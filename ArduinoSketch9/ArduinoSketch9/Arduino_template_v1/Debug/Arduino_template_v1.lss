
Arduino_template_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f4c  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00004f4c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae8  200000a0  00004fec  000100a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   00054c29  00000000  00000000  00010121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006024  00000000  00000000  00064d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000781a  00000000  00000000  0006ad6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000918  00000000  00000000  00072588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001398  00000000  00000000  00072ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001cd4f  00000000  00000000  00074238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e021  00000000  00000000  00090f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00083a25  00000000  00000000  0009efa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001808  00000000  00000000  001229d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 59 21 00 00 41 21 00 00 41 21 00 00     ... Y!..A!..A!..
	...
    202c:	41 21 00 00 00 00 00 00 00 00 00 00 41 21 00 00     A!..........A!..
    203c:	ad 21 00 00 41 21 00 00 41 21 00 00 41 21 00 00     .!..A!..A!..A!..
    204c:	41 21 00 00 41 21 00 00 41 21 00 00 41 21 00 00     A!..A!..A!..A!..
    205c:	45 21 00 00 41 21 00 00 41 21 00 00 41 21 00 00     E!..A!..A!..A!..
    206c:	41 21 00 00 41 21 00 00 31 39 00 00 21 39 00 00     A!..A!..19..!9..
    207c:	41 21 00 00 41 21 00 00 41 21 00 00 41 21 00 00     A!..A!..A!..A!..
    208c:	41 21 00 00 00 00 00 00 41 21 00 00 41 21 00 00     A!......A!..A!..
    209c:	41 21 00 00 41 21 00 00 41 21 00 00 41 21 00 00     A!..A!..A!..A!..
    20ac:	41 21 00 00 00 00 00 00                             A!......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200000a0 	.word	0x200000a0
    20d4:	00000000 	.word	0x00000000
    20d8:	00004f48 	.word	0x00004f48

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	200000a4 	.word	0x200000a4
    2108:	00004f48 	.word	0x00004f48
    210c:	20000098 	.word	0x20000098
    2110:	00000000 	.word	0x00000000

00002114 <setup>:


//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
    2114:	b510      	push	{r4, lr}
  // put your setup code here, to run once:
	pinMode(7,OUTPUT);
    2116:	2101      	movs	r1, #1
    2118:	2007      	movs	r0, #7
    211a:	f001 faaf 	bl	367c <pinMode>
}
    211e:	bd10      	pop	{r4, pc}

00002120 <loop>:

void loop() {
    2120:	b510      	push	{r4, lr}
  // put your main code here, to run repeatedly:
	digitalWrite(7,HIGH);
    2122:	2101      	movs	r1, #1
    2124:	2007      	movs	r0, #7
    2126:	f001 faf5 	bl	3714 <digitalWrite>
	delay(3000);
    212a:	4804      	ldr	r0, [pc, #16]	; (213c <loop+0x1c>)
    212c:	f000 f87c 	bl	2228 <delay>
	digitalWrite(7,LOW);
    2130:	2100      	movs	r1, #0
    2132:	2007      	movs	r0, #7
    2134:	f001 faee 	bl	3714 <digitalWrite>
}
    2138:	bd10      	pop	{r4, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00000bb8 	.word	0x00000bb8

00002140 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    2140:	be03      	bkpt	0x0003
    2142:	e7fe      	b.n	2142 <Dummy_Handler+0x2>

00002144 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    2144:	4b03      	ldr	r3, [pc, #12]	; (2154 <USB_Handler+0x10>)
{
    2146:	b510      	push	{r4, lr}
  if (usb_isr)
    2148:	681b      	ldr	r3, [r3, #0]
    214a:	2b00      	cmp	r3, #0
    214c:	d000      	beq.n	2150 <USB_Handler+0xc>
    usb_isr();
    214e:	4798      	blx	r3
}
    2150:	bd10      	pop	{r4, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	200000bc 	.word	0x200000bc

00002158 <Reset_Handler>:
{
    2158:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    215a:	490f      	ldr	r1, [pc, #60]	; (2198 <Reset_Handler+0x40>)
    215c:	4c0f      	ldr	r4, [pc, #60]	; (219c <Reset_Handler+0x44>)
    215e:	42a1      	cmp	r1, r4
    2160:	d104      	bne.n	216c <Reset_Handler+0x14>
  SystemInit();
    2162:	f000 f8f7 	bl	2354 <SystemInit>
  main();
    2166:	f000 f887 	bl	2278 <main>
    216a:	e7fe      	b.n	216a <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    216c:	4d0c      	ldr	r5, [pc, #48]	; (21a0 <Reset_Handler+0x48>)
    216e:	2300      	movs	r3, #0
    2170:	428d      	cmp	r5, r1
    2172:	d0f6      	beq.n	2162 <Reset_Handler+0xa>
    2174:	18ca      	adds	r2, r1, r3
    2176:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2178:	42a2      	cmp	r2, r4
    217a:	d305      	bcc.n	2188 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    217c:	4290      	cmp	r0, r2
    217e:	d0f0      	beq.n	2162 <Reset_Handler+0xa>
    2180:	4b08      	ldr	r3, [pc, #32]	; (21a4 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2182:	4909      	ldr	r1, [pc, #36]	; (21a8 <Reset_Handler+0x50>)
      *pDest = 0;
    2184:	2200      	movs	r2, #0
    2186:	e004      	b.n	2192 <Reset_Handler+0x3a>
      *pDest = *pSrc;
    2188:	6800      	ldr	r0, [r0, #0]
    218a:	3304      	adds	r3, #4
    218c:	6010      	str	r0, [r2, #0]
    218e:	e7f1      	b.n	2174 <Reset_Handler+0x1c>
      *pDest = 0;
    2190:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2192:	428b      	cmp	r3, r1
    2194:	d3fc      	bcc.n	2190 <Reset_Handler+0x38>
    2196:	e7e4      	b.n	2162 <Reset_Handler+0xa>
    2198:	20000000 	.word	0x20000000
    219c:	200000a0 	.word	0x200000a0
    21a0:	00004f4c 	.word	0x00004f4c
    21a4:	200000a0 	.word	0x200000a0
    21a8:	20000b88 	.word	0x20000b88

000021ac <SysTick_Handler>:
{
    21ac:	b510      	push	{r4, lr}
  if (sysTickHook())
    21ae:	f000 f860 	bl	2272 <sysTickHook>
    21b2:	2800      	cmp	r0, #0
    21b4:	d101      	bne.n	21ba <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    21b6:	f000 f851 	bl	225c <SysTick_DefaultHandler>
}
    21ba:	bd10      	pop	{r4, pc}

000021bc <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    21bc:	4b01      	ldr	r3, [pc, #4]	; (21c4 <USB_SetHandler+0x8>)
    21be:	6018      	str	r0, [r3, #0]
}
    21c0:	4770      	bx	lr
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	200000bc 	.word	0x200000bc

000021c8 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    21c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    21ca:	4813      	ldr	r0, [pc, #76]	; (2218 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21cc:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    21ce:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    21d0:	4912      	ldr	r1, [pc, #72]	; (221c <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21d2:	4c13      	ldr	r4, [pc, #76]	; (2220 <micros+0x58>)
  ticks2  = SysTick->VAL;
    21d4:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21d6:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    21d8:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21da:	0e9b      	lsrs	r3, r3, #26
    21dc:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21de:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    21e0:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    21e2:	6862      	ldr	r2, [r4, #4]
    21e4:	9f01      	ldr	r7, [sp, #4]
    21e6:	0e92      	lsrs	r2, r2, #26
    21e8:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    21ea:	4667      	mov	r7, ip
    21ec:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    21ee:	4293      	cmp	r3, r2
    21f0:	d10e      	bne.n	2210 <micros+0x48>
    21f2:	42bd      	cmp	r5, r7
    21f4:	d10c      	bne.n	2210 <micros+0x48>
    21f6:	4286      	cmp	r6, r0
    21f8:	d30a      	bcc.n	2210 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    21fa:	195b      	adds	r3, r3, r5
    21fc:	25fa      	movs	r5, #250	; 0xfa
    21fe:	6848      	ldr	r0, [r1, #4]
    2200:	00ad      	lsls	r5, r5, #2
    2202:	1b86      	subs	r6, r0, r6
    2204:	4807      	ldr	r0, [pc, #28]	; (2224 <micros+0x5c>)
    2206:	436b      	muls	r3, r5
    2208:	4370      	muls	r0, r6
    220a:	0d00      	lsrs	r0, r0, #20
    220c:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    220e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    2210:	003d      	movs	r5, r7
    2212:	0013      	movs	r3, r2
    2214:	0006      	movs	r6, r0
    2216:	e7e3      	b.n	21e0 <micros+0x18>
    2218:	200000c0 	.word	0x200000c0
    221c:	e000e010 	.word	0xe000e010
    2220:	e000ed00 	.word	0xe000ed00
    2224:	00005555 	.word	0x00005555

00002228 <delay>:

void delay( unsigned long ms )
{
    2228:	b570      	push	{r4, r5, r6, lr}
    222a:	1e04      	subs	r4, r0, #0
  if (ms == 0)
    222c:	d010      	beq.n	2250 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
    222e:	f7ff ffcb 	bl	21c8 <micros>
    2232:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
    2234:	f000 f81c 	bl	2270 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
    2238:	f7ff ffc6 	bl	21c8 <micros>
    223c:	4b05      	ldr	r3, [pc, #20]	; (2254 <delay+0x2c>)
    223e:	1b40      	subs	r0, r0, r5
    2240:	4298      	cmp	r0, r3
    2242:	d9f7      	bls.n	2234 <delay+0xc>
    {
      ms--;
      start += 1000;
    2244:	23fa      	movs	r3, #250	; 0xfa
      ms--;
    2246:	3c01      	subs	r4, #1
      start += 1000;
    2248:	009b      	lsls	r3, r3, #2
    224a:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
    224c:	2c00      	cmp	r4, #0
    224e:	d1f3      	bne.n	2238 <delay+0x10>
    }
  }
}
    2250:	bd70      	pop	{r4, r5, r6, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	000003e7 	.word	0x000003e7

00002258 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
    2258:	4770      	bx	lr
	...

0000225c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    225c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    225e:	4a03      	ldr	r2, [pc, #12]	; (226c <SysTick_DefaultHandler+0x10>)
    2260:	6813      	ldr	r3, [r2, #0]
    2262:	3301      	adds	r3, #1
    2264:	6013      	str	r3, [r2, #0]
  tickReset();
    2266:	f000 f839 	bl	22dc <tickReset>
}
    226a:	bd10      	pop	{r4, pc}
    226c:	200000c0 	.word	0x200000c0

00002270 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2270:	4770      	bx	lr

00002272 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2272:	2000      	movs	r0, #0
    2274:	4770      	bx	lr
	...

00002278 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    2278:	b510      	push	{r4, lr}
  init();
    227a:	f001 f8dd 	bl	3438 <init>

  __libc_init_array();
    227e:	f002 fb17 	bl	48b0 <__libc_init_array>

  initVariant();
    2282:	f001 fad1 	bl	3828 <_Z11initVariantv>

  delay(1);
    2286:	2001      	movs	r0, #1
    2288:	f7ff ffce 	bl	2228 <delay>
#if defined(USBCON)
  USBDevice.init();
    228c:	4c08      	ldr	r4, [pc, #32]	; (22b0 <main+0x38>)
    228e:	0020      	movs	r0, r4
    2290:	f000 fb80 	bl	2994 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2294:	0020      	movs	r0, r4
    2296:	f000 fc17 	bl	2ac8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    229a:	f7ff ff3b 	bl	2114 <setup>

  for (;;)
  {
    loop();
    229e:	f7ff ff3f 	bl	2120 <loop>
    if (serialEventRun) serialEventRun();
    22a2:	4b04      	ldr	r3, [pc, #16]	; (22b4 <main+0x3c>)
    22a4:	2b00      	cmp	r3, #0
    22a6:	d0fa      	beq.n	229e <main+0x26>
    22a8:	e000      	b.n	22ac <main+0x34>
    22aa:	bf00      	nop
    22ac:	e7f7      	b.n	229e <main+0x26>
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	200000ec 	.word	0x200000ec
    22b4:	00000000 	.word	0x00000000

000022b8 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    22b8:	b510      	push	{r4, lr}
    22ba:	0004      	movs	r4, r0
	resetExternalChip();
    22bc:	f7ff ffcc 	bl	2258 <resetExternalChip>
	ticks = _ticks;
    22c0:	4b01      	ldr	r3, [pc, #4]	; (22c8 <initiateReset+0x10>)
    22c2:	601c      	str	r4, [r3, #0]
}
    22c4:	bd10      	pop	{r4, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	20000000 	.word	0x20000000

000022cc <cancelReset>:

void cancelReset() {
	ticks = -1;
    22cc:	2201      	movs	r2, #1
    22ce:	4b02      	ldr	r3, [pc, #8]	; (22d8 <cancelReset+0xc>)
    22d0:	4252      	negs	r2, r2
    22d2:	601a      	str	r2, [r3, #0]
}
    22d4:	4770      	bx	lr
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	20000000 	.word	0x20000000

000022dc <tickReset>:

void tickReset() {
	if (ticks == -1)
    22dc:	4a16      	ldr	r2, [pc, #88]	; (2338 <tickReset+0x5c>)
void tickReset() {
    22de:	b510      	push	{r4, lr}
	if (ticks == -1)
    22e0:	6813      	ldr	r3, [r2, #0]
    22e2:	1c59      	adds	r1, r3, #1
    22e4:	d027      	beq.n	2336 <tickReset+0x5a>
		return;
	ticks--;
    22e6:	3b01      	subs	r3, #1
    22e8:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    22ea:	2b00      	cmp	r3, #0
    22ec:	d123      	bne.n	2336 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    22ee:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    22f0:	4b12      	ldr	r3, [pc, #72]	; (233c <tickReset+0x60>)
    22f2:	4a13      	ldr	r2, [pc, #76]	; (2340 <tickReset+0x64>)
    22f4:	3304      	adds	r3, #4
    22f6:	4293      	cmp	r3, r2
    22f8:	d808      	bhi.n	230c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    22fa:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    22fe:	4a11      	ldr	r2, [pc, #68]	; (2344 <tickReset+0x68>)
    2300:	4b11      	ldr	r3, [pc, #68]	; (2348 <tickReset+0x6c>)
    2302:	60da      	str	r2, [r3, #12]
    2304:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2308:	46c0      	nop			; (mov r8, r8)
    230a:	e7fd      	b.n	2308 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    230c:	4a0f      	ldr	r2, [pc, #60]	; (234c <tickReset+0x70>)
	while (!nvmReady())
    230e:	2101      	movs	r1, #1
    2310:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2312:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    2314:	420c      	tst	r4, r1
    2316:	d0fc      	beq.n	2312 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2318:	2120      	movs	r1, #32
    231a:	8b14      	ldrh	r4, [r2, #24]
    231c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    231e:	089b      	lsrs	r3, r3, #2
    2320:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2322:	4321      	orrs	r1, r4
    2324:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    2326:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    2328:	4b09      	ldr	r3, [pc, #36]	; (2350 <tickReset+0x74>)
    232a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    232c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    232e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    2330:	421a      	tst	r2, r3
    2332:	d0fc      	beq.n	232e <tickReset+0x52>
    2334:	e7e1      	b.n	22fa <tickReset+0x1e>
		banzai();
}
    2336:	bd10      	pop	{r4, pc}
    2338:	20000000 	.word	0x20000000
    233c:	00002000 	.word	0x00002000
    2340:	00000203 	.word	0x00000203
    2344:	05fa0004 	.word	0x05fa0004
    2348:	e000ed00 	.word	0xe000ed00
    234c:	41004000 	.word	0x41004000
    2350:	ffffa502 	.word	0xffffa502

00002354 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    2354:	221e      	movs	r2, #30
{
    2356:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    2358:	4846      	ldr	r0, [pc, #280]	; (2474 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    235a:	4947      	ldr	r1, [pc, #284]	; (2478 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    235c:	6843      	ldr	r3, [r0, #4]
    235e:	4393      	bics	r3, r2
    2360:	3a1c      	subs	r2, #28
    2362:	4313      	orrs	r3, r2
    2364:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    2366:	2308      	movs	r3, #8
    2368:	698c      	ldr	r4, [r1, #24]
    236a:	4323      	orrs	r3, r4
    236c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    236e:	4c43      	ldr	r4, [pc, #268]	; (247c <SystemInit+0x128>)
    2370:	4b43      	ldr	r3, [pc, #268]	; (2480 <SystemInit+0x12c>)
    2372:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    2374:	8a9c      	ldrh	r4, [r3, #20]
    2376:	4314      	orrs	r4, r2
    2378:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    237a:	68dc      	ldr	r4, [r3, #12]
    237c:	4214      	tst	r4, r2
    237e:	d0fc      	beq.n	237a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    2380:	2401      	movs	r4, #1
    2382:	4a40      	ldr	r2, [pc, #256]	; (2484 <SystemInit+0x130>)
    2384:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    2386:	7815      	ldrb	r5, [r2, #0]
    2388:	4225      	tst	r5, r4
    238a:	d003      	beq.n	2394 <SystemInit+0x40>
    238c:	7855      	ldrb	r5, [r2, #1]
    238e:	b26d      	sxtb	r5, r5
    2390:	2d00      	cmp	r5, #0
    2392:	dbf8      	blt.n	2386 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    2394:	2401      	movs	r4, #1
    2396:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2398:	7854      	ldrb	r4, [r2, #1]
    239a:	b264      	sxtb	r4, r4
    239c:	2c00      	cmp	r4, #0
    239e:	dbfb      	blt.n	2398 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    23a0:	4c39      	ldr	r4, [pc, #228]	; (2488 <SystemInit+0x134>)
    23a2:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    23a4:	7854      	ldrb	r4, [r2, #1]
    23a6:	b264      	sxtb	r4, r4
    23a8:	2c00      	cmp	r4, #0
    23aa:	dbfb      	blt.n	23a4 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    23ac:	2482      	movs	r4, #130	; 0x82
    23ae:	01e4      	lsls	r4, r4, #7
    23b0:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    23b2:	7854      	ldrb	r4, [r2, #1]
    23b4:	b264      	sxtb	r4, r4
    23b6:	2c00      	cmp	r4, #0
    23b8:	dbfb      	blt.n	23b2 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    23ba:	2402      	movs	r4, #2
    23bc:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    23be:	340e      	adds	r4, #14
    23c0:	68dd      	ldr	r5, [r3, #12]
    23c2:	4225      	tst	r5, r4
    23c4:	d0fc      	beq.n	23c0 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    23c6:	4c31      	ldr	r4, [pc, #196]	; (248c <SystemInit+0x138>)
    23c8:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    23ca:	2410      	movs	r4, #16
    23cc:	68dd      	ldr	r5, [r3, #12]
    23ce:	4225      	tst	r5, r4
    23d0:	d0fc      	beq.n	23cc <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    23d2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    23d4:	4c2e      	ldr	r4, [pc, #184]	; (2490 <SystemInit+0x13c>)
    23d6:	432c      	orrs	r4, r5
    23d8:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    23da:	2410      	movs	r4, #16
    23dc:	68dd      	ldr	r5, [r3, #12]
    23de:	4225      	tst	r5, r4
    23e0:	d0fc      	beq.n	23dc <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    23e2:	2402      	movs	r4, #2
    23e4:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    23e6:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    23e8:	432c      	orrs	r4, r5
    23ea:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    23ec:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    23ee:	68dd      	ldr	r5, [r3, #12]
    23f0:	4235      	tst	r5, r6
    23f2:	d0fc      	beq.n	23ee <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    23f4:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    23f6:	4225      	tst	r5, r4
    23f8:	d0f9      	beq.n	23ee <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    23fa:	2410      	movs	r4, #16
    23fc:	68dd      	ldr	r5, [r3, #12]
    23fe:	4225      	tst	r5, r4
    2400:	d0fc      	beq.n	23fc <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    2402:	2400      	movs	r4, #0
    2404:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2406:	7854      	ldrb	r4, [r2, #1]
    2408:	b264      	sxtb	r4, r4
    240a:	2c00      	cmp	r4, #0
    240c:	dbfb      	blt.n	2406 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    240e:	4c21      	ldr	r4, [pc, #132]	; (2494 <SystemInit+0x140>)
    2410:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2412:	7854      	ldrb	r4, [r2, #1]
    2414:	b264      	sxtb	r4, r4
    2416:	2c00      	cmp	r4, #0
    2418:	dbfb      	blt.n	2412 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    241a:	6a1c      	ldr	r4, [r3, #32]
    241c:	4d1e      	ldr	r5, [pc, #120]	; (2498 <SystemInit+0x144>)
    241e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    2420:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    2422:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    2424:	6a1c      	ldr	r4, [r3, #32]
    2426:	43ac      	bics	r4, r5
    2428:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    242a:	2303      	movs	r3, #3
    242c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    242e:	4b1b      	ldr	r3, [pc, #108]	; (249c <SystemInit+0x148>)
    2430:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2432:	7853      	ldrb	r3, [r2, #1]
    2434:	b25b      	sxtb	r3, r3
    2436:	2b00      	cmp	r3, #0
    2438:	dbfb      	blt.n	2432 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    243a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    243c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    243e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
    2440:	4a17      	ldr	r2, [pc, #92]	; (24a0 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    2442:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    2444:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    2446:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
    2448:	4b16      	ldr	r3, [pc, #88]	; (24a4 <SystemInit+0x150>)
    244a:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    244c:	4b16      	ldr	r3, [pc, #88]	; (24a8 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    244e:	4a17      	ldr	r2, [pc, #92]	; (24ac <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    2450:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    2452:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    2454:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    2456:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    2458:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    245a:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    245c:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    245e:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    2460:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    2462:	4313      	orrs	r3, r2
    2464:	4a12      	ldr	r2, [pc, #72]	; (24b0 <SystemInit+0x15c>)
    2466:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    2468:	2380      	movs	r3, #128	; 0x80
    246a:	6842      	ldr	r2, [r0, #4]
    246c:	4313      	orrs	r3, r2
    246e:	6043      	str	r3, [r0, #4]
}
    2470:	bd70      	pop	{r4, r5, r6, pc}
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	41004000 	.word	0x41004000
    2478:	40000400 	.word	0x40000400
    247c:	0000060c 	.word	0x0000060c
    2480:	40000800 	.word	0x40000800
    2484:	40000c00 	.word	0x40000c00
    2488:	00010501 	.word	0x00010501
    248c:	7dff05b9 	.word	0x7dff05b9
    2490:	00000a04 	.word	0x00000a04
    2494:	00030700 	.word	0x00030700
    2498:	fffffcff 	.word	0xfffffcff
    249c:	00010603 	.word	0x00010603
    24a0:	02dc6c00 	.word	0x02dc6c00
    24a4:	20000004 	.word	0x20000004
    24a8:	00806024 	.word	0x00806024
    24ac:	00806020 	.word	0x00806020
    24b0:	42004000 	.word	0x42004000

000024b4 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
    24b4:	4770      	bx	lr

000024b6 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
    24b6:	b510      	push	{r4, lr}
    24b8:	0004      	movs	r4, r0
	}
    24ba:	f001 fa95 	bl	39e8 <_ZdlPv>
    24be:	0020      	movs	r0, r4
    24c0:	bd10      	pop	{r4, pc}
	...

000024c4 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    24c4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    24c6:	2982      	cmp	r1, #130	; 0x82
    24c8:	d119      	bne.n	24fe <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    24ca:	b2c3      	uxtb	r3, r0
    24cc:	4d29      	ldr	r5, [pc, #164]	; (2574 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
    24ce:	015a      	lsls	r2, r3, #5
    24d0:	18aa      	adds	r2, r5, r2
    24d2:	6991      	ldr	r1, [r2, #24]
    24d4:	4c28      	ldr	r4, [pc, #160]	; (2578 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    24d6:	0180      	lsls	r0, r0, #6
    24d8:	400c      	ands	r4, r1
    24da:	21c0      	movs	r1, #192	; 0xc0
    24dc:	0589      	lsls	r1, r1, #22
    24de:	4321      	orrs	r1, r4
    24e0:	6191      	str	r1, [r2, #24]
    24e2:	4926      	ldr	r1, [pc, #152]	; (257c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    24e4:	3308      	adds	r3, #8
    24e6:	1808      	adds	r0, r1, r0
    24e8:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    24ea:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    24ec:	6828      	ldr	r0, [r5, #0]
    24ee:	015b      	lsls	r3, r3, #5
    24f0:	5c1a      	ldrb	r2, [r3, r0]
    24f2:	438a      	bics	r2, r1
    24f4:	0011      	movs	r1, r2
    24f6:	2230      	movs	r2, #48	; 0x30
    24f8:	430a      	orrs	r2, r1
    24fa:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
    24fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    24fe:	2900      	cmp	r1, #0
    2500:	d1fc      	bne.n	24fc <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2502:	26c0      	movs	r6, #192	; 0xc0
    2504:	b2c1      	uxtb	r1, r0
    2506:	4c1b      	ldr	r4, [pc, #108]	; (2574 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
    2508:	014b      	lsls	r3, r1, #5
    250a:	18e3      	adds	r3, r4, r3
    250c:	689a      	ldr	r2, [r3, #8]
    250e:	4d1a      	ldr	r5, [pc, #104]	; (2578 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
    2510:	05b6      	lsls	r6, r6, #22
    2512:	402a      	ands	r2, r5
    2514:	4332      	orrs	r2, r6
    2516:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2518:	4a19      	ldr	r2, [pc, #100]	; (2580 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
    251a:	0180      	lsls	r0, r0, #6
    251c:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    251e:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2520:	000a      	movs	r2, r1
    2522:	2707      	movs	r7, #7
    2524:	6824      	ldr	r4, [r4, #0]
    2526:	3208      	adds	r2, #8
    2528:	0152      	lsls	r2, r2, #5
    252a:	5d11      	ldrb	r1, [r2, r4]
    252c:	43b9      	bics	r1, r7
    252e:	000f      	movs	r7, r1
    2530:	2101      	movs	r1, #1
    2532:	4339      	orrs	r1, r7
    2534:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2536:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2538:	4910      	ldr	r1, [pc, #64]	; (257c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
    253a:	403d      	ands	r5, r7
    253c:	1808      	adds	r0, r1, r0
    253e:	432e      	orrs	r6, r5
    2540:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2542:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2544:	2070      	movs	r0, #112	; 0x70
    2546:	5d11      	ldrb	r1, [r2, r4]
    2548:	4381      	bics	r1, r0
    254a:	0008      	movs	r0, r1
    254c:	2110      	movs	r1, #16
    254e:	4301      	orrs	r1, r0
    2550:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2552:	6899      	ldr	r1, [r3, #8]
    2554:	480b      	ldr	r0, [pc, #44]	; (2584 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2556:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2558:	4008      	ands	r0, r1
    255a:	2180      	movs	r1, #128	; 0x80
    255c:	0349      	lsls	r1, r1, #13
    255e:	4301      	orrs	r1, r0
    2560:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2562:	6899      	ldr	r1, [r3, #8]
    2564:	0b89      	lsrs	r1, r1, #14
    2566:	0389      	lsls	r1, r1, #14
    2568:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    256a:	2340      	movs	r3, #64	; 0x40
    256c:	7911      	ldrb	r1, [r2, #4]
    256e:	430b      	orrs	r3, r1
    2570:	7113      	strb	r3, [r2, #4]
    2572:	e7c3      	b.n	24fc <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
    2574:	200005a4 	.word	0x200005a4
    2578:	8fffffff 	.word	0x8fffffff
    257c:	20000118 	.word	0x20000118
    2580:	200002d8 	.word	0x200002d8
    2584:	f0003fff 	.word	0xf0003fff

00002588 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2588:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    258c:	6003      	str	r3, [r0, #0]
    258e:	2301      	movs	r3, #1
    2590:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2592:	b672      	cpsid	i
	}
    2594:	4770      	bx	lr

00002596 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
    2596:	6803      	ldr	r3, [r0, #0]
    2598:	2b00      	cmp	r3, #0
    259a:	d102      	bne.n	25a2 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    259c:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    259e:	f3bf 8f6f 	isb	sy
	}
    25a2:	4770      	bx	lr

000025a4 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
    25a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    25a6:	0006      	movs	r6, r0
    25a8:	36fc      	adds	r6, #252	; 0xfc
    25aa:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
    25ac:	0004      	movs	r4, r0
		if (current == 0) {
    25ae:	2b00      	cmp	r3, #0
    25b0:	d118      	bne.n	25e4 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
    25b2:	27b2      	movs	r7, #178	; 0xb2
    25b4:	007f      	lsls	r7, r7, #1
    25b6:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
    25b8:	4668      	mov	r0, sp
    25ba:	f7ff ffe5 	bl	2588 <_ZN7__GuardC1Ev>
    25be:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
    25c0:	b2ed      	uxtb	r5, r5
			synchronized {
    25c2:	3b01      	subs	r3, #1
    25c4:	d302      	bcc.n	25cc <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
    25c6:	5de5      	ldrb	r5, [r4, r7]
    25c8:	b2ed      	uxtb	r5, r5
    25ca:	e7fa      	b.n	25c2 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
    25cc:	4668      	mov	r0, sp
    25ce:	9301      	str	r3, [sp, #4]
    25d0:	f7ff ffe1 	bl	2596 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    25d4:	2d00      	cmp	r5, #0
    25d6:	d101      	bne.n	25dc <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
    25d8:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    25da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
    25dc:	6e70      	ldr	r0, [r6, #100]	; 0x64
    25de:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
    25e0:	1ac0      	subs	r0, r0, r3
    25e2:	e7fa      	b.n	25da <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
    25e4:	4668      	mov	r0, sp
    25e6:	f7ff ffcf 	bl	2588 <_ZN7__GuardC1Ev>
				ready = ready1;
    25ea:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
    25ec:	2500      	movs	r5, #0
    25ee:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    25f0:	0052      	lsls	r2, r2, #1
			synchronized {
    25f2:	3b01      	subs	r3, #1
    25f4:	d302      	bcc.n	25fc <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
    25f6:	5ca5      	ldrb	r5, [r4, r2]
    25f8:	b2ed      	uxtb	r5, r5
			synchronized {
    25fa:	e7fa      	b.n	25f2 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
    25fc:	4668      	mov	r0, sp
    25fe:	9301      	str	r3, [sp, #4]
    2600:	f7ff ffc9 	bl	2596 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    2604:	2d00      	cmp	r5, #0
    2606:	d0e7      	beq.n	25d8 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
    2608:	23d6      	movs	r3, #214	; 0xd6
    260a:	005b      	lsls	r3, r3, #1
    260c:	58e0      	ldr	r0, [r4, r3]
    260e:	3b04      	subs	r3, #4
    2610:	58e3      	ldr	r3, [r4, r3]
    2612:	e7e5      	b.n	25e0 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00002614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
    2614:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
    2616:	6844      	ldr	r4, [r0, #4]
    2618:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    261a:	6943      	ldr	r3, [r0, #20]
    261c:	480b      	ldr	r0, [pc, #44]	; (264c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
    261e:	b2db      	uxtb	r3, r3
    2620:	015a      	lsls	r2, r3, #5
    2622:	18a2      	adds	r2, r4, r2
    2624:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2626:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2628:	4008      	ands	r0, r1
    262a:	2180      	movs	r1, #128	; 0x80
    262c:	0349      	lsls	r1, r1, #13
    262e:	4301      	orrs	r1, r0
    2630:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2632:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2634:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2636:	0b89      	lsrs	r1, r1, #14
    2638:	0389      	lsls	r1, r1, #14
    263a:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    263c:	6822      	ldr	r2, [r4, #0]
    263e:	18d3      	adds	r3, r2, r3
    2640:	2240      	movs	r2, #64	; 0x40
    2642:	7919      	ldrb	r1, [r3, #4]
    2644:	430a      	orrs	r2, r1
    2646:	711a      	strb	r2, [r3, #4]
	}
    2648:	bd10      	pop	{r4, pc}
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	f0003fff 	.word	0xf0003fff

00002650 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    2650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
    2652:	0005      	movs	r5, r0
    2654:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2656:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
    2658:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    265a:	0019      	movs	r1, r3
	virtual void handleEndpoint()
    265c:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    265e:	3108      	adds	r1, #8
    2660:	6810      	ldr	r0, [r2, #0]
    2662:	0149      	lsls	r1, r1, #5
    2664:	1841      	adds	r1, r0, r1
    2666:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    2668:	07c9      	lsls	r1, r1, #31
    266a:	d511      	bpl.n	2690 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    266c:	015b      	lsls	r3, r3, #5
    266e:	18d2      	adds	r2, r2, r3
    2670:	6893      	ldr	r3, [r2, #8]
    2672:	049b      	lsls	r3, r3, #18
    2674:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
    2676:	d10c      	bne.n	2692 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
    2678:	0020      	movs	r0, r4
    267a:	f7ff ffcb 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    267e:	6863      	ldr	r3, [r4, #4]
    2680:	681a      	ldr	r2, [r3, #0]
    2682:	696b      	ldr	r3, [r5, #20]
    2684:	b2db      	uxtb	r3, r3
    2686:	3308      	adds	r3, #8
    2688:	015b      	lsls	r3, r3, #5
    268a:	18d3      	adds	r3, r2, r3
    268c:	227f      	movs	r2, #127	; 0x7f
    268e:	71da      	strb	r2, [r3, #7]
	}
    2690:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
    2692:	69e9      	ldr	r1, [r5, #28]
    2694:	2900      	cmp	r1, #0
    2696:	d123      	bne.n	26e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
    2698:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    269a:	0023      	movs	r3, r4
				incoming = 1;
    269c:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    269e:	3369      	adds	r3, #105	; 0x69
    26a0:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
    26a2:	61ee      	str	r6, [r5, #28]
				synchronized {
    26a4:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    26a6:	6053      	str	r3, [r2, #4]
					ready0 = true;
    26a8:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
    26aa:	f7ff ff6d 	bl	2588 <_ZN7__GuardC1Ev>
					ready0 = true;
    26ae:	007f      	lsls	r7, r7, #1
					notify = ready1;
    26b0:	21b2      	movs	r1, #178	; 0xb2
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	31ff      	adds	r1, #255	; 0xff
    26b6:	3b01      	subs	r3, #1
				synchronized {
    26b8:	1c5a      	adds	r2, r3, #1
    26ba:	d038      	beq.n	272e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
    26bc:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
    26be:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
    26c0:	0052      	lsls	r2, r2, #1
    26c2:	5ca2      	ldrb	r2, [r4, r2]
    26c4:	1e58      	subs	r0, r3, #1
    26c6:	b2d2      	uxtb	r2, r2
    26c8:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    26ca:	5c62      	ldrb	r2, [r4, r1]
    26cc:	4684      	mov	ip, r0
    26ce:	2a00      	cmp	r2, #0
    26d0:	d104      	bne.n	26dc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
    26d2:	0020      	movs	r0, r4
    26d4:	9301      	str	r3, [sp, #4]
    26d6:	f7ff ff9d 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    26da:	e7e9      	b.n	26b0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
    26dc:	4663      	mov	r3, ip
    26de:	e7eb      	b.n	26b8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
    26e0:	21d6      	movs	r1, #214	; 0xd6
    26e2:	0049      	lsls	r1, r1, #1
    26e4:	5063      	str	r3, [r4, r1]
				incoming = 0;
    26e6:	2300      	movs	r3, #0
    26e8:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    26ea:	0023      	movs	r3, r4
    26ec:	331d      	adds	r3, #29
    26ee:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    26f0:	6053      	str	r3, [r2, #4]
				synchronized {
    26f2:	4668      	mov	r0, sp
					ready1 = true;
    26f4:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
    26f6:	f7ff ff47 	bl	2588 <_ZN7__GuardC1Ev>
					ready1 = true;
    26fa:	2701      	movs	r7, #1
    26fc:	0076      	lsls	r6, r6, #1
					notify = ready0;
    26fe:	21b2      	movs	r1, #178	; 0xb2
    2700:	9b01      	ldr	r3, [sp, #4]
    2702:	31ff      	adds	r1, #255	; 0xff
    2704:	3b01      	subs	r3, #1
				synchronized {
    2706:	1c5a      	adds	r2, r3, #1
    2708:	d011      	beq.n	272e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
    270a:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
    270c:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
    270e:	0052      	lsls	r2, r2, #1
    2710:	5ca2      	ldrb	r2, [r4, r2]
    2712:	1e58      	subs	r0, r3, #1
    2714:	b2d2      	uxtb	r2, r2
    2716:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    2718:	5c62      	ldrb	r2, [r4, r1]
    271a:	4684      	mov	ip, r0
    271c:	2a00      	cmp	r2, #0
    271e:	d104      	bne.n	272a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
    2720:	0020      	movs	r0, r4
    2722:	9301      	str	r3, [sp, #4]
    2724:	f7ff ff76 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2728:	e7e9      	b.n	26fe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
    272a:	4663      	mov	r3, ip
    272c:	e7eb      	b.n	2706 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
    272e:	4668      	mov	r0, sp
    2730:	9301      	str	r3, [sp, #4]
    2732:	f7ff ff30 	bl	2596 <_ZN7__GuardD1Ev>
    2736:	e7a2      	b.n	267e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00002738 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
    2738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    273a:	0005      	movs	r5, r0
		synchronized {
    273c:	4668      	mov	r0, sp
    273e:	002c      	movs	r4, r5
    2740:	f7ff ff22 	bl	2588 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
    2744:	2700      	movs	r7, #0

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
    2746:	22ff      	movs	r2, #255	; 0xff
    2748:	9b01      	ldr	r3, [sp, #4]
    274a:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
    274c:	3b01      	subs	r3, #1
    274e:	d30d      	bcc.n	276c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
    2750:	68e0      	ldr	r0, [r4, #12]
    2752:	6921      	ldr	r1, [r4, #16]
    2754:	4288      	cmp	r0, r1
    2756:	db04      	blt.n	2762 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
    2758:	68e7      	ldr	r7, [r4, #12]
    275a:	6920      	ldr	r0, [r4, #16]
    275c:	1bd7      	subs	r7, r2, r7
    275e:	183f      	adds	r7, r7, r0
    2760:	e7f4      	b.n	274c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
  else
    return _iTail - _iHead - 1;
    2762:	6927      	ldr	r7, [r4, #16]
    2764:	68e1      	ldr	r1, [r4, #12]
    2766:	1a7f      	subs	r7, r7, r1
    2768:	3f01      	subs	r7, #1
    276a:	e7ef      	b.n	274c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    276c:	4668      	mov	r0, sp
    276e:	9301      	str	r3, [sp, #4]
    2770:	f7ff ff11 	bl	2596 <_ZN7__GuardD1Ev>
		if (current == 0) {
    2774:	69a3      	ldr	r3, [r4, #24]
			synchronized {
    2776:	4668      	mov	r0, sp
		if (current == 0) {
    2778:	2b00      	cmp	r3, #0
    277a:	d141      	bne.n	2800 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
    277c:	f7ff ff04 	bl	2588 <_ZN7__GuardC1Ev>
				if (!ready0) {
    2780:	21b2      	movs	r1, #178	; 0xb2
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	0049      	lsls	r1, r1, #1
    2786:	3b01      	subs	r3, #1
			synchronized {
    2788:	1c5a      	adds	r2, r3, #1
    278a:	d00c      	beq.n	27a6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
    278c:	5c6e      	ldrb	r6, [r5, r1]
    278e:	1e5a      	subs	r2, r3, #1
    2790:	b2f6      	uxtb	r6, r6
    2792:	2e00      	cmp	r6, #0
    2794:	d105      	bne.n	27a2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
    2796:	4668      	mov	r0, sp
    2798:	9301      	str	r3, [sp, #4]
    279a:	f7ff fefc 	bl	2596 <_ZN7__GuardD1Ev>
	}
    279e:	0030      	movs	r0, r6
    27a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    27a2:	0013      	movs	r3, r2
    27a4:	e7f0      	b.n	2788 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
    27a6:	4668      	mov	r0, sp
    27a8:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
    27aa:	2600      	movs	r6, #0
			synchronized {
    27ac:	f7ff fef3 	bl	2596 <_ZN7__GuardD1Ev>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    27b0:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
    27b2:	42be      	cmp	r6, r7
    27b4:	d003      	beq.n	27be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
    27b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    27b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
    27ba:	428b      	cmp	r3, r1
    27bc:	d360      	bcc.n	2880 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
    27be:	6e63      	ldr	r3, [r4, #100]	; 0x64
    27c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    27c2:	429a      	cmp	r2, r3
    27c4:	d1eb      	bne.n	279e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
    27c6:	2300      	movs	r3, #0
    27c8:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
    27ca:	3301      	adds	r3, #1
    27cc:	61a3      	str	r3, [r4, #24]
				synchronized {
    27ce:	4668      	mov	r0, sp
					ready0 = false;
    27d0:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
    27d2:	f7ff fed9 	bl	2588 <_ZN7__GuardC1Ev>
					ready0 = false;
    27d6:	0064      	lsls	r4, r4, #1
					if (notify) {
    27d8:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
    27da:	2100      	movs	r1, #0
    27dc:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    27de:	32ff      	adds	r2, #255	; 0xff
    27e0:	3b01      	subs	r3, #1
				synchronized {
    27e2:	1c58      	adds	r0, r3, #1
    27e4:	d0d7      	beq.n	2796 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    27e6:	5529      	strb	r1, [r5, r4]
					if (notify) {
    27e8:	5ca8      	ldrb	r0, [r5, r2]
    27ea:	1e5f      	subs	r7, r3, #1
    27ec:	2800      	cmp	r0, #0
    27ee:	d005      	beq.n	27fc <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    27f0:	54a9      	strb	r1, [r5, r2]
						release();
    27f2:	0028      	movs	r0, r5
    27f4:	9301      	str	r3, [sp, #4]
    27f6:	f7ff ff0d 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    27fa:	e7ed      	b.n	27d8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    27fc:	003b      	movs	r3, r7
    27fe:	e7f0      	b.n	27e2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    2800:	f7ff fec2 	bl	2588 <_ZN7__GuardC1Ev>
				if (!ready1) {
    2804:	21d8      	movs	r1, #216	; 0xd8
    2806:	9b01      	ldr	r3, [sp, #4]
    2808:	0049      	lsls	r1, r1, #1
    280a:	3b01      	subs	r3, #1
			synchronized {
    280c:	1c5a      	adds	r2, r3, #1
    280e:	d006      	beq.n	281e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    2810:	5c6e      	ldrb	r6, [r5, r1]
    2812:	1e5a      	subs	r2, r3, #1
    2814:	b2f6      	uxtb	r6, r6
    2816:	2e00      	cmp	r6, #0
    2818:	d0bd      	beq.n	2796 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    281a:	0013      	movs	r3, r2
    281c:	e7f6      	b.n	280c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    281e:	4668      	mov	r0, sp
    2820:	9301      	str	r3, [sp, #4]
    2822:	f7ff feb8 	bl	2596 <_ZN7__GuardD1Ev>
    2826:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    2828:	2600      	movs	r6, #0
    282a:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    282c:	42be      	cmp	r6, r7
    282e:	d005      	beq.n	283c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    2830:	21d6      	movs	r1, #214	; 0xd6
    2832:	0049      	lsls	r1, r1, #1
    2834:	58ab      	ldr	r3, [r5, r2]
    2836:	5869      	ldr	r1, [r5, r1]
    2838:	428b      	cmp	r3, r1
    283a:	d332      	bcc.n	28a2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    283c:	23d6      	movs	r3, #214	; 0xd6
    283e:	005b      	lsls	r3, r3, #1
    2840:	58eb      	ldr	r3, [r5, r3]
    2842:	58a9      	ldr	r1, [r5, r2]
    2844:	4299      	cmp	r1, r3
    2846:	d1aa      	bne.n	279e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    2848:	2300      	movs	r3, #0
				synchronized {
    284a:	4668      	mov	r0, sp
				first1 = 0;
    284c:	50ab      	str	r3, [r5, r2]
				current = 0;
    284e:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    2850:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    2852:	f7ff fe99 	bl	2588 <_ZN7__GuardC1Ev>
					ready1 = false;
    2856:	0064      	lsls	r4, r4, #1
					if (notify) {
    2858:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    285a:	2100      	movs	r1, #0
    285c:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    285e:	32ff      	adds	r2, #255	; 0xff
    2860:	3b01      	subs	r3, #1
				synchronized {
    2862:	1c58      	adds	r0, r3, #1
    2864:	d097      	beq.n	2796 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    2866:	5529      	strb	r1, [r5, r4]
					if (notify) {
    2868:	5ca8      	ldrb	r0, [r5, r2]
    286a:	1e5f      	subs	r7, r3, #1
    286c:	2800      	cmp	r0, #0
    286e:	d005      	beq.n	287c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    2870:	54a9      	strb	r1, [r5, r2]
						release();
    2872:	0028      	movs	r0, r5
    2874:	9301      	str	r3, [sp, #4]
    2876:	f7ff fecd 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    287a:	e7ed      	b.n	2858 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    287c:	003b      	movs	r3, r7
    287e:	e7f0      	b.n	2862 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    2880:	1c59      	adds	r1, r3, #1
    2882:	18eb      	adds	r3, r5, r3
    2884:	33ff      	adds	r3, #255	; 0xff
    2886:	6621      	str	r1, [r4, #96]	; 0x60
    2888:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    288a:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    288c:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    288e:	3301      	adds	r3, #1
    2890:	4013      	ands	r3, r2
  if ( i != _iTail )
    2892:	4283      	cmp	r3, r0
    2894:	d003      	beq.n	289e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    2896:	68e0      	ldr	r0, [r4, #12]
    2898:	1828      	adds	r0, r5, r0
    289a:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    289c:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    289e:	3601      	adds	r6, #1
    28a0:	e787      	b.n	27b2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    28a2:	1c59      	adds	r1, r3, #1
    28a4:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    28a6:	21ff      	movs	r1, #255	; 0xff
    28a8:	18eb      	adds	r3, r5, r3
    28aa:	3369      	adds	r3, #105	; 0x69
    28ac:	33ff      	adds	r3, #255	; 0xff
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    28b2:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    28b4:	3301      	adds	r3, #1
    28b6:	400b      	ands	r3, r1
  if ( i != _iTail )
    28b8:	6921      	ldr	r1, [r4, #16]
    28ba:	428b      	cmp	r3, r1
    28bc:	d004      	beq.n	28c8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    28be:	4660      	mov	r0, ip
    28c0:	68e1      	ldr	r1, [r4, #12]
    28c2:	1869      	adds	r1, r5, r1
    28c4:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    28c6:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    28c8:	3601      	adds	r6, #1
    28ca:	e7af      	b.n	282c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

000028cc <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    28cc:	b510      	push	{r4, lr}
    28ce:	0004      	movs	r4, r0
		_recv();
    28d0:	f7ff ff32 	bl	2738 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    28d4:	0023      	movs	r3, r4
    28d6:	33fc      	adds	r3, #252	; 0xfc
    28d8:	6919      	ldr	r1, [r3, #16]
    28da:	68da      	ldr	r2, [r3, #12]
    28dc:	4291      	cmp	r1, r2
    28de:	d003      	beq.n	28e8 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    28e0:	691b      	ldr	r3, [r3, #16]
    28e2:	18e4      	adds	r4, r4, r3
    28e4:	7a20      	ldrb	r0, [r4, #8]
	}
    28e6:	bd10      	pop	{r4, pc}
    return -1;
    28e8:	2001      	movs	r0, #1
    28ea:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    28ec:	e7fb      	b.n	28e6 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

000028ee <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    28ee:	b510      	push	{r4, lr}
    28f0:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    28f2:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    28f4:	f7ff ff20 	bl	2738 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    28f8:	68e0      	ldr	r0, [r4, #12]
    28fa:	6923      	ldr	r3, [r4, #16]
    28fc:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    28fe:	d501      	bpl.n	2904 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    2900:	3001      	adds	r0, #1
    2902:	30ff      	adds	r0, #255	; 0xff
	}
    2904:	bd10      	pop	{r4, pc}

00002906 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    2906:	b5f0      	push	{r4, r5, r6, r7, lr}
    2908:	b085      	sub	sp, #20
    290a:	9201      	str	r2, [sp, #4]
    290c:	9100      	str	r1, [sp, #0]
    290e:	0005      	movs	r5, r0
		_recv();
    2910:	f7ff ff12 	bl	2738 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    2914:	a802      	add	r0, sp, #8
    2916:	f7ff fe37 	bl	2588 <_ZN7__GuardC1Ev>
    return -1;
    291a:	2001      	movs	r0, #1
		uint32_t i = 0;
    291c:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    291e:	26ff      	movs	r6, #255	; 0xff
    2920:	9a03      	ldr	r2, [sp, #12]
    return -1;
    2922:	4240      	negs	r0, r0
		synchronized {
    2924:	3a01      	subs	r2, #1
    2926:	d31d      	bcc.n	2964 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    2928:	002b      	movs	r3, r5
    292a:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    292c:	9901      	ldr	r1, [sp, #4]
    292e:	428c      	cmp	r4, r1
    2930:	d2f8      	bcs.n	2924 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    2932:	68d9      	ldr	r1, [r3, #12]
    2934:	691f      	ldr	r7, [r3, #16]
    2936:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    2938:	d501      	bpl.n	293e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    293a:	3101      	adds	r1, #1
    293c:	31ff      	adds	r1, #255	; 0xff
    293e:	2900      	cmp	r1, #0
    2940:	d0f0      	beq.n	2924 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    2942:	6919      	ldr	r1, [r3, #16]
    2944:	68df      	ldr	r7, [r3, #12]
    2946:	468c      	mov	ip, r1
    return -1;
    2948:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    294a:	45bc      	cmp	ip, r7
    294c:	d006      	beq.n	295c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    294e:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    2950:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    2952:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    2954:	3701      	adds	r7, #1
    2956:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    2958:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    295a:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    295c:	9f00      	ldr	r7, [sp, #0]
    295e:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    2960:	3401      	adds	r4, #1
    2962:	e7e3      	b.n	292c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    2964:	a802      	add	r0, sp, #8
    2966:	9203      	str	r2, [sp, #12]
    2968:	f7ff fe15 	bl	2596 <_ZN7__GuardD1Ev>
	}
    296c:	0020      	movs	r0, r4
    296e:	b005      	add	sp, #20
    2970:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002972 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    2972:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    2974:	466b      	mov	r3, sp
    2976:	1ddc      	adds	r4, r3, #7
    2978:	2300      	movs	r3, #0
{
    297a:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    297c:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    297e:	f001 fedd 	bl	473c <_Z12PluggableUSBv>
    2982:	0021      	movs	r1, r4
    2984:	f001 fe5a 	bl	463c <_ZN13PluggableUSB_12getInterfaceEPh>
    2988:	682b      	ldr	r3, [r5, #0]
    298a:	1818      	adds	r0, r3, r0
    298c:	6028      	str	r0, [r5, #0]
	return interfaces;
    298e:	7820      	ldrb	r0, [r4, #0]
}
    2990:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00002994 <_ZN14USBDeviceClass4initEv>:
{
    2994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    2996:	2320      	movs	r3, #32
    2998:	4a3e      	ldr	r2, [pc, #248]	; (2a94 <_ZN14USBDeviceClass4initEv+0x100>)
{
    299a:	0005      	movs	r5, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    299c:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    299e:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    29a0:	430b      	orrs	r3, r1
    29a2:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    29a4:	2201      	movs	r2, #1
    29a6:	493c      	ldr	r1, [pc, #240]	; (2a98 <_ZN14USBDeviceClass4initEv+0x104>)
    29a8:	780b      	ldrb	r3, [r1, #0]
    29aa:	4313      	orrs	r3, r2
    29ac:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    29ae:	4b3b      	ldr	r3, [pc, #236]	; (2a9c <_ZN14USBDeviceClass4initEv+0x108>)
    29b0:	7819      	ldrb	r1, [r3, #0]
    29b2:	4381      	bics	r1, r0
    29b4:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    29b6:	2106      	movs	r1, #6
    29b8:	781c      	ldrb	r4, [r3, #0]
    29ba:	4321      	orrs	r1, r4
    29bc:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    29be:	4938      	ldr	r1, [pc, #224]	; (2aa0 <_ZN14USBDeviceClass4initEv+0x10c>)
    29c0:	780c      	ldrb	r4, [r1, #0]
    29c2:	4322      	orrs	r2, r4
    29c4:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    29c6:	781a      	ldrb	r2, [r3, #0]
    29c8:	4002      	ands	r2, r0
    29ca:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    29cc:	2260      	movs	r2, #96	; 0x60
    29ce:	7819      	ldrb	r1, [r3, #0]
    29d0:	430a      	orrs	r2, r1
    29d2:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    29d4:	4b33      	ldr	r3, [pc, #204]	; (2aa4 <_ZN14USBDeviceClass4initEv+0x110>)
    29d6:	4a34      	ldr	r2, [pc, #208]	; (2aa8 <_ZN14USBDeviceClass4initEv+0x114>)
    29d8:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    29da:	785f      	ldrb	r7, [r3, #1]
    29dc:	09ff      	lsrs	r7, r7, #7
    29de:	d1fc      	bne.n	29da <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    29e0:	4832      	ldr	r0, [pc, #200]	; (2aac <_ZN14USBDeviceClass4initEv+0x118>)
    29e2:	f7ff fbeb 	bl	21bc <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    29e6:	4e32      	ldr	r6, [pc, #200]	; (2ab0 <_ZN14USBDeviceClass4initEv+0x11c>)
    29e8:	2301      	movs	r3, #1
    29ea:	0030      	movs	r0, r6
    29ec:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    29ee:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    29f0:	7822      	ldrb	r2, [r4, #0]
    29f2:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    29f4:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    29f6:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    29f8:	0052      	lsls	r2, r2, #1
    29fa:	f001 ff9a 	bl	4932 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    29fe:	78a3      	ldrb	r3, [r4, #2]
    2a00:	07db      	lsls	r3, r3, #31
    2a02:	d4fc      	bmi.n	29fe <_ZN14USBDeviceClass4initEv+0x6a>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2a04:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    2a06:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2a08:	4b2a      	ldr	r3, [pc, #168]	; (2ab4 <_ZN14USBDeviceClass4initEv+0x120>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    2a0a:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2a10:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    2a12:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2a14:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2a16:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    2a18:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    2a1a:	4282      	cmp	r2, r0
    2a1c:	d100      	bne.n	2a20 <_ZN14USBDeviceClass4initEv+0x8c>
		pad_transn = 5;
    2a1e:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    2a20:	291f      	cmp	r1, #31
    2a22:	d100      	bne.n	2a26 <_ZN14USBDeviceClass4initEv+0x92>
		pad_transp = 29;
    2a24:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    2a26:	2b07      	cmp	r3, #7
    2a28:	d100      	bne.n	2a2c <_ZN14USBDeviceClass4initEv+0x98>
		pad_trim = 3;
    2a2a:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    2a2c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    2a2e:	4f22      	ldr	r7, [pc, #136]	; (2ab8 <_ZN14USBDeviceClass4initEv+0x124>)
    2a30:	4002      	ands	r2, r0
    2a32:	403e      	ands	r6, r7
    2a34:	0192      	lsls	r2, r2, #6
    2a36:	4332      	orrs	r2, r6
    2a38:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    2a3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2a3c:	4001      	ands	r1, r0
    2a3e:	4382      	bics	r2, r0
    2a40:	000e      	movs	r6, r1
    2a42:	0011      	movs	r1, r2
    2a44:	4331      	orrs	r1, r6
    2a46:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2a4a:	0319      	lsls	r1, r3, #12
    2a4c:	4b1b      	ldr	r3, [pc, #108]	; (2abc <_ZN14USBDeviceClass4initEv+0x128>)
	SerialUSB.begin(0);
    2a4e:	481c      	ldr	r0, [pc, #112]	; (2ac0 <_ZN14USBDeviceClass4initEv+0x12c>)
    2a50:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2a52:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    2a54:	430b      	orrs	r3, r1
    2a56:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    2a58:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2a5a:	21c1      	movs	r1, #193	; 0xc1
    2a5c:	4013      	ands	r3, r2
    2a5e:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2a60:	2304      	movs	r3, #4
    2a62:	7822      	ldrb	r2, [r4, #0]
    2a64:	0089      	lsls	r1, r1, #2
    2a66:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2a68:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    2a6a:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    2a6c:	8923      	ldrh	r3, [r4, #8]
    2a6e:	4393      	bics	r3, r2
    2a70:	4a14      	ldr	r2, [pc, #80]	; (2ac4 <_ZN14USBDeviceClass4initEv+0x130>)
    2a72:	8123      	strh	r3, [r4, #8]
    2a74:	5853      	ldr	r3, [r2, r1]
    2a76:	021b      	lsls	r3, r3, #8
    2a78:	0a1b      	lsrs	r3, r3, #8
    2a7a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a7c:	2380      	movs	r3, #128	; 0x80
    2a7e:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    2a80:	7822      	ldrb	r2, [r4, #0]
    2a82:	3b7e      	subs	r3, #126	; 0x7e
    2a84:	4313      	orrs	r3, r2
    2a86:	7023      	strb	r3, [r4, #0]
	initialized = true;
    2a88:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    2a8a:	2100      	movs	r1, #0
	initialized = true;
    2a8c:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    2a8e:	f001 fdc9 	bl	4624 <_ZN7Serial_5beginEm>
}
    2a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a94:	40000400 	.word	0x40000400
    2a98:	41004458 	.word	0x41004458
    2a9c:	4100443c 	.word	0x4100443c
    2aa0:	41004459 	.word	0x41004459
    2aa4:	40000c00 	.word	0x40000c00
    2aa8:	00004006 	.word	0x00004006
    2aac:	00003419 	.word	0x00003419
    2ab0:	200005a4 	.word	0x200005a4
    2ab4:	00806024 	.word	0x00806024
    2ab8:	fffff83f 	.word	0xfffff83f
    2abc:	ffff8fff 	.word	0xffff8fff
    2ac0:	20000b38 	.word	0x20000b38
    2ac4:	e000e100 	.word	0xe000e100

00002ac8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    2ac8:	7800      	ldrb	r0, [r0, #0]
    2aca:	2800      	cmp	r0, #0
    2acc:	d010      	beq.n	2af0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    2ace:	2101      	movs	r1, #1
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	891a      	ldrh	r2, [r3, #8]
    2ad6:	438a      	bics	r2, r1
    2ad8:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    2ada:	2208      	movs	r2, #8
    2adc:	8b19      	ldrh	r1, [r3, #24]
    2ade:	430a      	orrs	r2, r1
    2ae0:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    2ae2:	2204      	movs	r2, #4
    2ae4:	8b19      	ldrh	r1, [r3, #24]
    2ae6:	430a      	orrs	r2, r1
    2ae8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    2aea:	2200      	movs	r2, #0
    2aec:	4b02      	ldr	r3, [pc, #8]	; (2af8 <_ZN14USBDeviceClass6attachEv+0x30>)
    2aee:	601a      	str	r2, [r3, #0]
}
    2af0:	4770      	bx	lr
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	200005a4 	.word	0x200005a4
    2af8:	2000059c 	.word	0x2000059c

00002afc <_ZN14USBDeviceClass10setAddressEm>:
{
    2afc:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2afe:	4a0f      	ldr	r2, [pc, #60]	; (2b3c <_ZN14USBDeviceClass10setAddressEm+0x40>)
    2b00:	6993      	ldr	r3, [r2, #24]
    2b02:	0b9b      	lsrs	r3, r3, #14
    2b04:	039b      	lsls	r3, r3, #14
    2b06:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2b08:	6813      	ldr	r3, [r2, #0]
    2b0a:	2202      	movs	r2, #2
    2b0c:	33ff      	adds	r3, #255	; 0xff
    2b0e:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2b10:	7998      	ldrb	r0, [r3, #6]
    2b12:	3a82      	subs	r2, #130	; 0x82
    2b14:	4302      	orrs	r2, r0
    2b16:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2b18:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    2b1a:	0792      	lsls	r2, r2, #30
    2b1c:	d5fc      	bpl.n	2b18 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2b1e:	247f      	movs	r4, #127	; 0x7f
    2b20:	4a07      	ldr	r2, [pc, #28]	; (2b40 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    2b22:	4021      	ands	r1, r4
    2b24:	7a93      	ldrb	r3, [r2, #10]
    2b26:	0008      	movs	r0, r1
    2b28:	43a3      	bics	r3, r4
    2b2a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2b2c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    2b2e:	4301      	orrs	r1, r0
    2b30:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    2b32:	7a91      	ldrb	r1, [r2, #10]
    2b34:	425b      	negs	r3, r3
    2b36:	430b      	orrs	r3, r1
    2b38:	7293      	strb	r3, [r2, #10]
}
    2b3a:	bd10      	pop	{r4, pc}
    2b3c:	200005a4 	.word	0x200005a4
    2b40:	41005000 	.word	0x41005000

00002b44 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    2b44:	b510      	push	{r4, lr}
    2b46:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    2b48:	f001 fdf8 	bl	473c <_Z12PluggableUSBv>
    2b4c:	0021      	movs	r1, r4
    2b4e:	f001 fdac 	bl	46aa <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    2b52:	2800      	cmp	r0, #0
    2b54:	d104      	bne.n	2b60 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2b56:	4a03      	ldr	r2, [pc, #12]	; (2b64 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    2b58:	6993      	ldr	r3, [r2, #24]
    2b5a:	0b9b      	lsrs	r3, r3, #14
    2b5c:	039b      	lsls	r3, r3, #14
    2b5e:	6193      	str	r3, [r2, #24]
}
    2b60:	bd10      	pop	{r4, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	200005a4 	.word	0x200005a4

00002b68 <_ZN14USBDeviceClass6initEPEmm>:
{
    2b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b6a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    2b6c:	2a83      	cmp	r2, #131	; 0x83
    2b6e:	d119      	bne.n	2ba4 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2b70:	b2cb      	uxtb	r3, r1
    2b72:	4c39      	ldr	r4, [pc, #228]	; (2c58 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    2b74:	015a      	lsls	r2, r3, #5
    2b76:	18a2      	adds	r2, r4, r2
    2b78:	6991      	ldr	r1, [r2, #24]
    2b7a:	4838      	ldr	r0, [pc, #224]	; (2c5c <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2b7c:	01ad      	lsls	r5, r5, #6
    2b7e:	4008      	ands	r0, r1
    2b80:	21c0      	movs	r1, #192	; 0xc0
    2b82:	0589      	lsls	r1, r1, #22
    2b84:	4301      	orrs	r1, r0
    2b86:	6191      	str	r1, [r2, #24]
    2b88:	4935      	ldr	r1, [pc, #212]	; (2c60 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2b8a:	6820      	ldr	r0, [r4, #0]
    2b8c:	194d      	adds	r5, r1, r5
    2b8e:	2170      	movs	r1, #112	; 0x70
    2b90:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2b92:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    2b94:	015b      	lsls	r3, r3, #5
    2b96:	5c1a      	ldrb	r2, [r3, r0]
    2b98:	438a      	bics	r2, r1
    2b9a:	0011      	movs	r1, r2
    2b9c:	2240      	movs	r2, #64	; 0x40
    2b9e:	430a      	orrs	r2, r1
    2ba0:	541a      	strb	r2, [r3, r0]
}
    2ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    2ba4:	2a02      	cmp	r2, #2
    2ba6:	d152      	bne.n	2c4e <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    2ba8:	4a2e      	ldr	r2, [pc, #184]	; (2c64 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    2baa:	008b      	lsls	r3, r1, #2
    2bac:	5898      	ldr	r0, [r3, r2]
    2bae:	2800      	cmp	r0, #0
    2bb0:	d002      	beq.n	2bb8 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    2bb2:	6803      	ldr	r3, [r0, #0]
    2bb4:	695b      	ldr	r3, [r3, #20]
    2bb6:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    2bb8:	20da      	movs	r0, #218	; 0xda
    2bba:	0040      	lsls	r0, r0, #1
    2bbc:	f000 ff10 	bl	39e0 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    2bc0:	2280      	movs	r2, #128	; 0x80
    2bc2:	0004      	movs	r4, r0
		notify(false)
    2bc4:	4e24      	ldr	r6, [pc, #144]	; (2c58 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    2bc6:	4b28      	ldr	r3, [pc, #160]	; (2c68 <_ZN14USBDeviceClass6initEPEmm+0x100>)
    2bc8:	6046      	str	r6, [r0, #4]
    2bca:	6003      	str	r3, [r0, #0]
    2bcc:	0052      	lsls	r2, r2, #1
    2bce:	2100      	movs	r1, #0
    2bd0:	3008      	adds	r0, #8
    2bd2:	f001 feae 	bl	4932 <memset>
  _iHead = 0;
    2bd6:	0022      	movs	r2, r4
    2bd8:	2300      	movs	r3, #0
    2bda:	32fc      	adds	r2, #252	; 0xfc
    2bdc:	60d3      	str	r3, [r2, #12]
    2bde:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    2be0:	6113      	str	r3, [r2, #16]
    2be2:	6613      	str	r3, [r2, #96]	; 0x60
    2be4:	6193      	str	r3, [r2, #24]
    2be6:	61d3      	str	r3, [r2, #28]
    2be8:	6653      	str	r3, [r2, #100]	; 0x64
    2bea:	22b2      	movs	r2, #178	; 0xb2
    2bec:	0052      	lsls	r2, r2, #1
    2bee:	54a3      	strb	r3, [r4, r2]
    2bf0:	3244      	adds	r2, #68	; 0x44
    2bf2:	50a3      	str	r3, [r4, r2]
    2bf4:	3204      	adds	r2, #4
    2bf6:	50a3      	str	r3, [r4, r2]
    2bf8:	3204      	adds	r2, #4
    2bfa:	54a3      	strb	r3, [r4, r2]
    2bfc:	22b2      	movs	r2, #178	; 0xb2
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2c02:	b2ea      	uxtb	r2, r5
    2c04:	0150      	lsls	r0, r2, #5
    2c06:	1831      	adds	r1, r6, r0
    2c08:	688b      	ldr	r3, [r1, #8]
    2c0a:	4f14      	ldr	r7, [pc, #80]	; (2c5c <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2c0c:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2c0e:	401f      	ands	r7, r3
    2c10:	23c0      	movs	r3, #192	; 0xc0
    2c12:	059b      	lsls	r3, r3, #22
    2c14:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2c16:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    2c18:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    2c1a:	6833      	ldr	r3, [r6, #0]
    2c1c:	0152      	lsls	r2, r2, #5
    2c1e:	5cd6      	ldrb	r6, [r2, r3]
    2c20:	00ad      	lsls	r5, r5, #2
    2c22:	43be      	bics	r6, r7
    2c24:	46b4      	mov	ip, r6
    2c26:	2603      	movs	r6, #3
    2c28:	4667      	mov	r7, ip
    2c2a:	433e      	orrs	r6, r7
    2c2c:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    2c2e:	0022      	movs	r2, r4
    2c30:	321d      	adds	r2, #29
    2c32:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2c34:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c36:	2201      	movs	r2, #1
    2c38:	181b      	adds	r3, r3, r0
    2c3a:	33ff      	adds	r3, #255	; 0xff
    2c3c:	7a99      	ldrb	r1, [r3, #10]
		release();
    2c3e:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2c40:	430a      	orrs	r2, r1
    2c42:	729a      	strb	r2, [r3, #10]
		release();
    2c44:	f7ff fce6 	bl	2614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    2c4a:	515c      	str	r4, [r3, r5]
    2c4c:	e7a9      	b.n	2ba2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2c4e:	0011      	movs	r1, r2
    2c50:	0028      	movs	r0, r5
    2c52:	f7ff fc37 	bl	24c4 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    2c56:	e7a4      	b.n	2ba2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    2c58:	200005a4 	.word	0x200005a4
    2c5c:	8fffffff 	.word	0x8fffffff
    2c60:	20000118 	.word	0x20000118
    2c64:	200000f0 	.word	0x200000f0
    2c68:	00004b08 	.word	0x00004b08

00002c6c <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	0005      	movs	r5, r0
    2c70:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    2c72:	4b06      	ldr	r3, [pc, #24]	; (2c8c <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    2c74:	00a2      	lsls	r2, r4, #2
    2c76:	58d2      	ldr	r2, [r2, r3]
    2c78:	2a00      	cmp	r2, #0
    2c7a:	d006      	beq.n	2c8a <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    2c7c:	0021      	movs	r1, r4
    2c7e:	0028      	movs	r0, r5
    2c80:	3401      	adds	r4, #1
    2c82:	f7ff ff71 	bl	2b68 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    2c86:	2c0a      	cmp	r4, #10
    2c88:	d1f3      	bne.n	2c72 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    2c8a:	bd70      	pop	{r4, r5, r6, pc}
    2c8c:	200000c4 	.word	0x200000c4

00002c90 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    2c90:	4b0b      	ldr	r3, [pc, #44]	; (2cc0 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2c92:	b2ca      	uxtb	r2, r1
    2c94:	480b      	ldr	r0, [pc, #44]	; (2cc4 <_ZN14USBDeviceClass5clearEm+0x34>)
    2c96:	0189      	lsls	r1, r1, #6
    2c98:	1859      	adds	r1, r3, r1
    2c9a:	0153      	lsls	r3, r2, #5
    2c9c:	18c3      	adds	r3, r0, r3
    2c9e:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ca0:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2ca2:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ca4:	0b89      	lsrs	r1, r1, #14
    2ca6:	0389      	lsls	r1, r1, #14
    2ca8:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2caa:	6803      	ldr	r3, [r0, #0]
    2cac:	0152      	lsls	r2, r2, #5
    2cae:	189a      	adds	r2, r3, r2
    2cb0:	2302      	movs	r3, #2
    2cb2:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2cb4:	7951      	ldrb	r1, [r2, #5]
    2cb6:	3b82      	subs	r3, #130	; 0x82
    2cb8:	430b      	orrs	r3, r1
    2cba:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    2cbc:	4770      	bx	lr
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	20000118 	.word	0x20000118
    2cc4:	200005a4 	.word	0x200005a4

00002cc8 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    2cc8:	4b08      	ldr	r3, [pc, #32]	; (2cec <_ZN14USBDeviceClass9availableEm+0x24>)
    2cca:	008a      	lsls	r2, r1, #2
    2ccc:	58d0      	ldr	r0, [r2, r3]
{
    2cce:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d003      	beq.n	2cdc <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    2cd4:	6803      	ldr	r3, [r0, #0]
    2cd6:	689b      	ldr	r3, [r3, #8]
    2cd8:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    2cda:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2cdc:	b2c9      	uxtb	r1, r1
    2cde:	4b04      	ldr	r3, [pc, #16]	; (2cf0 <_ZN14USBDeviceClass9availableEm+0x28>)
    2ce0:	0149      	lsls	r1, r1, #5
    2ce2:	1859      	adds	r1, r3, r1
    2ce4:	6888      	ldr	r0, [r1, #8]
    2ce6:	0480      	lsls	r0, r0, #18
    2ce8:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    2cea:	e7f6      	b.n	2cda <_ZN14USBDeviceClass9availableEm+0x12>
    2cec:	200000f0 	.word	0x200000f0
    2cf0:	200005a4 	.word	0x200005a4

00002cf4 <_ZN14USBDeviceClass5flushEm>:
{
    2cf4:	b510      	push	{r4, lr}
    2cf6:	000c      	movs	r4, r1
	if (available(ep)) {
    2cf8:	f7ff ffe6 	bl	2cc8 <_ZN14USBDeviceClass9availableEm>
    2cfc:	2800      	cmp	r0, #0
    2cfe:	d00c      	beq.n	2d1a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2d00:	4b06      	ldr	r3, [pc, #24]	; (2d1c <_ZN14USBDeviceClass5flushEm+0x28>)
    2d02:	b2e4      	uxtb	r4, r4
    2d04:	681b      	ldr	r3, [r3, #0]
    2d06:	3408      	adds	r4, #8
    2d08:	0164      	lsls	r4, r4, #5
    2d0a:	191c      	adds	r4, r3, r4
    2d0c:	2380      	movs	r3, #128	; 0x80
    2d0e:	7962      	ldrb	r2, [r4, #5]
    2d10:	425b      	negs	r3, r3
    2d12:	4313      	orrs	r3, r2
    2d14:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2d16:	2302      	movs	r3, #2
    2d18:	71e3      	strb	r3, [r4, #7]
}
    2d1a:	bd10      	pop	{r4, pc}
    2d1c:	200005a4 	.word	0x200005a4

00002d20 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    2d24:	4b2b      	ldr	r3, [pc, #172]	; (2dd4 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
{
    2d26:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    2d28:	681b      	ldr	r3, [r3, #0]
{
    2d2a:	0007      	movs	r7, r0
    2d2c:	000d      	movs	r5, r1
    2d2e:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    2d30:	2b00      	cmp	r3, #0
    2d32:	d04b      	beq.n	2dcc <_ZN14USBDeviceClass4recvEmPvm+0xac>
		digitalWrite(PIN_LED_RXL, LOW);

	rxLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	if (epHandlers[ep]) {
    2d34:	4b28      	ldr	r3, [pc, #160]	; (2dd8 <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    2d36:	008a      	lsls	r2, r1, #2
    2d38:	58d0      	ldr	r0, [r2, r3]
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d008      	beq.n	2d50 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    2d3e:	6803      	ldr	r3, [r0, #0]
    2d40:	0022      	movs	r2, r4
    2d42:	685b      	ldr	r3, [r3, #4]
    2d44:	9902      	ldr	r1, [sp, #8]
    2d46:	4798      	blx	r3
    2d48:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    2d4a:	0020      	movs	r0, r4
    2d4c:	b005      	add	sp, #20
    2d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    2d50:	0038      	movs	r0, r7
    2d52:	f7ff ffb9 	bl	2cc8 <_ZN14USBDeviceClass9availableEm>
    2d56:	4284      	cmp	r4, r0
    2d58:	d904      	bls.n	2d64 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    2d5a:	0029      	movs	r1, r5
    2d5c:	0038      	movs	r0, r7
    2d5e:	f7ff ffb3 	bl	2cc8 <_ZN14USBDeviceClass9availableEm>
    2d62:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    2d64:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2d66:	b2eb      	uxtb	r3, r5
    2d68:	4e1c      	ldr	r6, [pc, #112]	; (2ddc <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    2d6a:	9303      	str	r3, [sp, #12]
    2d6c:	015b      	lsls	r3, r3, #5
    2d6e:	9301      	str	r3, [sp, #4]
    2d70:	18f2      	adds	r2, r6, r3
    2d72:	6893      	ldr	r3, [r2, #8]
    2d74:	0b9b      	lsrs	r3, r3, #14
    2d76:	039b      	lsls	r3, r3, #14
    2d78:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    2d7a:	9a01      	ldr	r2, [sp, #4]
    2d7c:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    2d7e:	9802      	ldr	r0, [sp, #8]
    2d80:	189b      	adds	r3, r3, r2
    2d82:	33ff      	adds	r3, #255	; 0xff
    2d84:	7a5a      	ldrb	r2, [r3, #9]
    2d86:	430a      	orrs	r2, r1
    2d88:	4915      	ldr	r1, [pc, #84]	; (2de0 <_ZN14USBDeviceClass4recvEmPvm+0xc0>)
    2d8a:	725a      	strb	r2, [r3, #9]
    2d8c:	01ab      	lsls	r3, r5, #6
    2d8e:	18c9      	adds	r1, r1, r3
    2d90:	0022      	movs	r2, r4
    2d92:	f001 fdc5 	bl	4920 <memcpy>
	if (len && !available(ep)) {
    2d96:	2c00      	cmp	r4, #0
    2d98:	d0d7      	beq.n	2d4a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    2d9a:	0029      	movs	r1, r5
    2d9c:	0038      	movs	r0, r7
    2d9e:	f7ff ff93 	bl	2cc8 <_ZN14USBDeviceClass9availableEm>
    2da2:	2800      	cmp	r0, #0
    2da4:	d1d1      	bne.n	2d4a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2da6:	2140      	movs	r1, #64	; 0x40
    2da8:	9b03      	ldr	r3, [sp, #12]
    2daa:	6832      	ldr	r2, [r6, #0]
    2dac:	3308      	adds	r3, #8
    2dae:	015b      	lsls	r3, r3, #5
    2db0:	18d3      	adds	r3, r2, r3
    2db2:	7918      	ldrb	r0, [r3, #4]
    2db4:	4301      	orrs	r1, r0
    2db6:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    2db8:	2101      	movs	r1, #1
    2dba:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    2dbc:	2101      	movs	r1, #1
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	18d3      	adds	r3, r2, r3
    2dc2:	33ff      	adds	r3, #255	; 0xff
    2dc4:	7a9a      	ldrb	r2, [r3, #10]
    2dc6:	430a      	orrs	r2, r1
    2dc8:	729a      	strb	r2, [r3, #10]
    2dca:	e7be      	b.n	2d4a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    2dcc:	2401      	movs	r4, #1
    2dce:	4264      	negs	r4, r4
    2dd0:	e7bb      	b.n	2d4a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	2000059c 	.word	0x2000059c
    2dd8:	200000f0 	.word	0x200000f0
    2ddc:	200005a4 	.word	0x200005a4
    2de0:	200002d8 	.word	0x200002d8

00002de4 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    2de4:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    2de6:	466b      	mov	r3, sp
    2de8:	1ddc      	adds	r4, r3, #7
    2dea:	0022      	movs	r2, r4
    2dec:	2301      	movs	r3, #1
    2dee:	f7ff ff97 	bl	2d20 <_ZN14USBDeviceClass4recvEmPvm>
    2df2:	2801      	cmp	r0, #1
    2df4:	d101      	bne.n	2dfa <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    2df6:	7820      	ldrb	r0, [r4, #0]
	}
}
    2df8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    2dfa:	2001      	movs	r0, #1
    2dfc:	4240      	negs	r0, r0
    2dfe:	e7fb      	b.n	2df8 <_ZN14USBDeviceClass4recvEm+0x14>

00002e00 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    2e00:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    2e02:	4b13      	ldr	r3, [pc, #76]	; (2e50 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    2e04:	b2cc      	uxtb	r4, r1
    2e06:	4a13      	ldr	r2, [pc, #76]	; (2e54 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    2e08:	0160      	lsls	r0, r4, #5
    2e0a:	0189      	lsls	r1, r1, #6
    2e0c:	1859      	adds	r1, r3, r1
    2e0e:	1813      	adds	r3, r2, r0
    2e10:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2e12:	6899      	ldr	r1, [r3, #8]
    2e14:	4d10      	ldr	r5, [pc, #64]	; (2e58 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2e16:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2e18:	400d      	ands	r5, r1
    2e1a:	2180      	movs	r1, #128	; 0x80
    2e1c:	0349      	lsls	r1, r1, #13
    2e1e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2e20:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2e22:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    2e24:	6899      	ldr	r1, [r3, #8]
    2e26:	0b89      	lsrs	r1, r1, #14
    2e28:	0389      	lsls	r1, r1, #14
    2e2a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    2e2c:	6811      	ldr	r1, [r2, #0]
    2e2e:	0163      	lsls	r3, r4, #5
    2e30:	18cb      	adds	r3, r1, r3
    2e32:	791e      	ldrb	r6, [r3, #4]
    2e34:	4335      	orrs	r5, r6
    2e36:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    2e38:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    2e3a:	066d      	lsls	r5, r5, #25
    2e3c:	d5fc      	bpl.n	2e38 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    2e3e:	0164      	lsls	r4, r4, #5
    2e40:	1909      	adds	r1, r1, r4
    2e42:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    2e44:	07db      	lsls	r3, r3, #31
    2e46:	d5fc      	bpl.n	2e42 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    2e48:	1812      	adds	r2, r2, r0
    2e4a:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    2e4c:	b2c0      	uxtb	r0, r0
}
    2e4e:	bd70      	pop	{r4, r5, r6, pc}
    2e50:	200002d8 	.word	0x200002d8
    2e54:	200005a4 	.word	0x200005a4
    2e58:	f0003fff 	.word	0xf0003fff

00002e5c <_ZN14USBDeviceClass11recvControlEPvm>:
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    2e60:	2100      	movs	r1, #0
{
    2e62:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    2e64:	f7ff ffcc 	bl	2e00 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    2e68:	42a0      	cmp	r0, r4
    2e6a:	d900      	bls.n	2e6e <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    2e6c:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    2e6e:	2300      	movs	r3, #0
		data[i] = buffer[i];
    2e70:	4903      	ldr	r1, [pc, #12]	; (2e80 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    2e72:	42a3      	cmp	r3, r4
    2e74:	d003      	beq.n	2e7e <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    2e76:	5c5a      	ldrb	r2, [r3, r1]
    2e78:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    2e7a:	3301      	adds	r3, #1
    2e7c:	e7f9      	b.n	2e72 <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
    2e80:	200002d8 	.word	0x200002d8

00002e84 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    2e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e86:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    2e88:	4b3a      	ldr	r3, [pc, #232]	; (2f74 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    2e8a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    2e8c:	681b      	ldr	r3, [r3, #0]
{
    2e8e:	000f      	movs	r7, r1
    2e90:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    2e92:	2b00      	cmp	r3, #0
    2e94:	d035      	beq.n	2f02 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    2e96:	2380      	movs	r3, #128	; 0x80
    2e98:	01db      	lsls	r3, r3, #7
    2e9a:	429e      	cmp	r6, r3
    2e9c:	d831      	bhi.n	2f02 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2e9e:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    2ea0:	4a35      	ldr	r2, [pc, #212]	; (2f78 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    2ea2:	018b      	lsls	r3, r1, #6
    2ea4:	18d3      	adds	r3, r2, r3
    2ea6:	9302      	str	r3, [sp, #8]
	while (len != 0)
    2ea8:	2e00      	cmp	r6, #0
    2eaa:	d02c      	beq.n	2f06 <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    2eac:	4b33      	ldr	r3, [pc, #204]	; (2f7c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    2eae:	681b      	ldr	r3, [r3, #0]
    2eb0:	9303      	str	r3, [sp, #12]
    2eb2:	23ff      	movs	r3, #255	; 0xff
    2eb4:	403b      	ands	r3, r7
    2eb6:	001c      	movs	r4, r3
    2eb8:	9300      	str	r3, [sp, #0]
    2eba:	3408      	adds	r4, #8
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	0164      	lsls	r4, r4, #5
    2ec0:	191c      	adds	r4, r3, r4
    2ec2:	79a3      	ldrb	r3, [r4, #6]
    2ec4:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    2ec6:	d021      	beq.n	2f0c <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    2ec8:	4b2d      	ldr	r3, [pc, #180]	; (2f80 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    2eca:	492e      	ldr	r1, [pc, #184]	; (2f84 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    2ecc:	6818      	ldr	r0, [r3, #0]
    2ece:	f001 fc63 	bl	4798 <__udivsi3>
    2ed2:	4b2d      	ldr	r3, [pc, #180]	; (2f88 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    2ed4:	2117      	movs	r1, #23
    2ed6:	4358      	muls	r0, r3
    2ed8:	f001 fc5e 	bl	4798 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    2edc:	4b2b      	ldr	r3, [pc, #172]	; (2f8c <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    2ede:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    2ee0:	0792      	lsls	r2, r2, #30
    2ee2:	d413      	bmi.n	2f0c <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    2ee4:	5dda      	ldrb	r2, [r3, r7]
    2ee6:	2a00      	cmp	r2, #0
    2ee8:	d101      	bne.n	2eee <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    2eea:	3801      	subs	r0, #1
    2eec:	d2f7      	bcs.n	2ede <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    2eee:	2201      	movs	r2, #1
    2ef0:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2ef2:	9b00      	ldr	r3, [sp, #0]
    2ef4:	4a21      	ldr	r2, [pc, #132]	; (2f7c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    2ef6:	015b      	lsls	r3, r3, #5
    2ef8:	18d3      	adds	r3, r2, r3
    2efa:	699a      	ldr	r2, [r3, #24]
    2efc:	0b92      	lsrs	r2, r2, #14
    2efe:	0392      	lsls	r2, r2, #14
    2f00:	619a      	str	r2, [r3, #24]
					return -1;
    2f02:	2501      	movs	r5, #1
    2f04:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    2f06:	0028      	movs	r0, r5
    2f08:	b005      	add	sp, #20
    2f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    2f0c:	2200      	movs	r2, #0
    2f0e:	4b1f      	ldr	r3, [pc, #124]	; (2f8c <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    2f10:	0034      	movs	r4, r6
    2f12:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    2f14:	2e3f      	cmp	r6, #63	; 0x3f
    2f16:	d909      	bls.n	2f2c <_ZN14USBDeviceClass4sendEmPKvm+0xa8>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    2f18:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    2f1a:	2440      	movs	r4, #64	; 0x40
    2f1c:	015a      	lsls	r2, r3, #5
    2f1e:	4b17      	ldr	r3, [pc, #92]	; (2f7c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
    2f20:	189b      	adds	r3, r3, r2
    2f22:	2280      	movs	r2, #128	; 0x80
    2f24:	6999      	ldr	r1, [r3, #24]
    2f26:	0612      	lsls	r2, r2, #24
    2f28:	430a      	orrs	r2, r1
    2f2a:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    2f2c:	0022      	movs	r2, r4
    2f2e:	9901      	ldr	r1, [sp, #4]
    2f30:	9802      	ldr	r0, [sp, #8]
    2f32:	f001 fcf5 	bl	4920 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2f36:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2f38:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2f3a:	015a      	lsls	r2, r3, #5
    2f3c:	4b0f      	ldr	r3, [pc, #60]	; (2f7c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2f3e:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2f40:	189b      	adds	r3, r3, r2
    2f42:	9a02      	ldr	r2, [sp, #8]
		written += length;
    2f44:	192d      	adds	r5, r5, r4
    2f46:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2f48:	699a      	ldr	r2, [r3, #24]
		len -= length;
    2f4a:	1b36      	subs	r6, r6, r4
    2f4c:	0b92      	lsrs	r2, r2, #14
    2f4e:	0392      	lsls	r2, r2, #14
    2f50:	430a      	orrs	r2, r1
    2f52:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    2f54:	9b00      	ldr	r3, [sp, #0]
    2f56:	9a03      	ldr	r2, [sp, #12]
    2f58:	3308      	adds	r3, #8
    2f5a:	015b      	lsls	r3, r3, #5
    2f5c:	18d3      	adds	r3, r2, r3
    2f5e:	2202      	movs	r2, #2
    2f60:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    2f62:	7959      	ldrb	r1, [r3, #5]
    2f64:	3a82      	subs	r2, #130	; 0x82
    2f66:	430a      	orrs	r2, r1
    2f68:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	191b      	adds	r3, r3, r4
    2f6e:	9301      	str	r3, [sp, #4]
	while (len != 0)
    2f70:	e79a      	b.n	2ea8 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	2000059c 	.word	0x2000059c
    2f78:	20000118 	.word	0x20000118
    2f7c:	200005a4 	.word	0x200005a4
    2f80:	20000004 	.word	0x20000004
    2f84:	000f4240 	.word	0x000f4240
    2f88:	00011170 	.word	0x00011170
    2f8c:	2000010d 	.word	0x2000010d

00002f90 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    2f90:	b570      	push	{r4, r5, r6, lr}
    2f92:	000d      	movs	r5, r1
    2f94:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2f96:	4e0d      	ldr	r6, [pc, #52]	; (2fcc <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    2f98:	01ab      	lsls	r3, r5, #6
    2f9a:	18f6      	adds	r6, r6, r3
{
    2f9c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    2f9e:	0030      	movs	r0, r6
    2fa0:	0022      	movs	r2, r4
    2fa2:	f001 fcbd 	bl	4920 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    2fa6:	b2ed      	uxtb	r5, r5
    2fa8:	4909      	ldr	r1, [pc, #36]	; (2fd0 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    2faa:	016d      	lsls	r5, r5, #5
    2fac:	194d      	adds	r5, r1, r5
    2fae:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    2fb0:	69ab      	ldr	r3, [r5, #24]
    2fb2:	4a08      	ldr	r2, [pc, #32]	; (2fd4 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    2fb4:	0020      	movs	r0, r4
    2fb6:	4013      	ands	r3, r2
    2fb8:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    2fba:	69ab      	ldr	r3, [r5, #24]
    2fbc:	04a2      	lsls	r2, r4, #18
    2fbe:	0b9b      	lsrs	r3, r3, #14
    2fc0:	0c92      	lsrs	r2, r2, #18
    2fc2:	039b      	lsls	r3, r3, #14
    2fc4:	4313      	orrs	r3, r2
    2fc6:	61ab      	str	r3, [r5, #24]
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	20000118 	.word	0x20000118
    2fd0:	200005a4 	.word	0x200005a4
    2fd4:	f0003fff 	.word	0xf0003fff

00002fd8 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    2fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    2fda:	4b10      	ldr	r3, [pc, #64]	; (301c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    2fdc:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    2fde:	781b      	ldrb	r3, [r3, #0]
{
    2fe0:	000f      	movs	r7, r1
    2fe2:	0015      	movs	r5, r2
	if (_dry_run == true)
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d10c      	bne.n	3002 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    2fe8:	4b0d      	ldr	r3, [pc, #52]	; (3020 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    2fea:	0016      	movs	r6, r2
    2fec:	781c      	ldrb	r4, [r3, #0]
    2fee:	2c00      	cmp	r4, #0
    2ff0:	d009      	beq.n	3006 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    2ff2:	4e0c      	ldr	r6, [pc, #48]	; (3024 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    2ff4:	480c      	ldr	r0, [pc, #48]	; (3028 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    2ff6:	8834      	ldrh	r4, [r6, #0]
    2ff8:	1900      	adds	r0, r0, r4
		_pack_size += len;
    2ffa:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    2ffc:	f001 fc90 	bl	4920 <memcpy>
		_pack_size += len;
    3000:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3002:	0028      	movs	r0, r5
    3004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3006:	2e00      	cmp	r6, #0
    3008:	d0fb      	beq.n	3002 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    300a:	193a      	adds	r2, r7, r4
    300c:	0033      	movs	r3, r6
    300e:	2100      	movs	r1, #0
    3010:	9801      	ldr	r0, [sp, #4]
    3012:	f7ff ffbd 	bl	2f90 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3016:	1824      	adds	r4, r4, r0
		len -= sent;
    3018:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    301a:	e7f4      	b.n	3006 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    301c:	20000498 	.word	0x20000498
    3020:	20000599 	.word	0x20000599
    3024:	2000059a 	.word	0x2000059a
    3028:	20000499 	.word	0x20000499

0000302c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    302e:	000e      	movs	r6, r1
    3030:	0015      	movs	r5, r2
		return false;
    3032:	2700      	movs	r7, #0
	if (maxlen < 2)
    3034:	2a01      	cmp	r2, #1
    3036:	d927      	bls.n	3088 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    3038:	0010      	movs	r0, r2
    303a:	f001 fc5d 	bl	48f8 <malloc>
    303e:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    3040:	0030      	movs	r0, r6
    3042:	f001 fd39 	bl	4ab8 <strlen>
    3046:	3001      	adds	r0, #1
    3048:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    304a:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    304c:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    304e:	2202      	movs	r2, #2
		buffer[i] = 0;
    3050:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    3052:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    3054:	4295      	cmp	r5, r2
    3056:	d90d      	bls.n	3074 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    3058:	7831      	ldrb	r1, [r6, #0]
    305a:	2900      	cmp	r1, #0
    305c:	d00a      	beq.n	3074 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    305e:	1c53      	adds	r3, r2, #1
    3060:	b2db      	uxtb	r3, r3
    3062:	3601      	adds	r6, #1
    3064:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    3066:	429d      	cmp	r5, r3
    3068:	d003      	beq.n	3072 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    306a:	3202      	adds	r2, #2
		buffer[i] = 0;
    306c:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    306e:	b2d2      	uxtb	r2, r2
    3070:	e7f0      	b.n	3054 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    3072:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    3074:	0021      	movs	r1, r4
    3076:	4805      	ldr	r0, [pc, #20]	; (308c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    3078:	f7ff ffae 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
    307c:	1e47      	subs	r7, r0, #1
    307e:	41b8      	sbcs	r0, r7
    3080:	b2c7      	uxtb	r7, r0
	free(buffer);
    3082:	0020      	movs	r0, r4
    3084:	f001 fc42 	bl	490c <free>
}
    3088:	0038      	movs	r0, r7
    308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    308c:	200000ec 	.word	0x200000ec

00003090 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3092:	2700      	movs	r7, #0
	_dry_run = true;
    3094:	2601      	movs	r6, #1
{
    3096:	b087      	sub	sp, #28
	_dry_run = true;
    3098:	4b1e      	ldr	r3, [pc, #120]	; (3114 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    309a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    309c:	a902      	add	r1, sp, #8
	_dry_run = true;
    309e:	701e      	strb	r6, [r3, #0]
{
    30a0:	0005      	movs	r5, r0
	uint32_t total = 0;
    30a2:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    30a4:	f7ff fc65 	bl	2972 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    30a8:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    30aa:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    30ac:	2209      	movs	r2, #9
    30ae:	0039      	movs	r1, r7
    30b0:	0020      	movs	r0, r4
    30b2:	f001 fc3e 	bl	4932 <memset>
    30b6:	2309      	movs	r3, #9
    30b8:	7023      	strb	r3, [r4, #0]
    30ba:	2302      	movs	r3, #2
    30bc:	7063      	strb	r3, [r4, #1]
    30be:	339e      	adds	r3, #158	; 0x9e
    30c0:	71e3      	strb	r3, [r4, #7]
    30c2:	335a      	adds	r3, #90	; 0x5a
    30c4:	7223      	strb	r3, [r4, #8]
    30c6:	9b02      	ldr	r3, [sp, #8]
    30c8:	7166      	strb	r6, [r4, #5]
    30ca:	3309      	adds	r3, #9
    30cc:	8063      	strh	r3, [r4, #2]
    30ce:	466b      	mov	r3, sp
    30d0:	791b      	ldrb	r3, [r3, #4]
    30d2:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    30d4:	4b0f      	ldr	r3, [pc, #60]	; (3114 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    30d6:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    30d8:	9b00      	ldr	r3, [sp, #0]
    30da:	2b09      	cmp	r3, #9
    30dc:	d107      	bne.n	30ee <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    30de:	001a      	movs	r2, r3
    30e0:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    30e2:	0028      	movs	r0, r5
    30e4:	f7ff ff78 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    30e8:	2001      	movs	r0, #1
    30ea:	b007      	add	sp, #28
    30ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    30ee:	4b0a      	ldr	r3, [pc, #40]	; (3118 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    30f0:	2209      	movs	r2, #9
		_pack_message = true;
    30f2:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    30f4:	4e09      	ldr	r6, [pc, #36]	; (311c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    30f6:	0021      	movs	r1, r4
    30f8:	0028      	movs	r0, r5
	total = 0;
    30fa:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    30fc:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    30fe:	f7ff ff6b 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3102:	a902      	add	r1, sp, #8
    3104:	0028      	movs	r0, r5
    3106:	f7ff fc34 	bl	2972 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    310a:	4b03      	ldr	r3, [pc, #12]	; (3118 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    310c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    310e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3110:	4903      	ldr	r1, [pc, #12]	; (3120 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3112:	e7e6      	b.n	30e2 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3114:	20000498 	.word	0x20000498
    3118:	20000599 	.word	0x20000599
    311c:	2000059a 	.word	0x2000059a
    3120:	20000499 	.word	0x20000499

00003124 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    3124:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    3126:	78ce      	ldrb	r6, [r1, #3]
{
    3128:	b092      	sub	sp, #72	; 0x48
    312a:	0005      	movs	r5, r0
    312c:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    312e:	2e02      	cmp	r6, #2
    3130:	d10b      	bne.n	314a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    3132:	798b      	ldrb	r3, [r1, #6]
    3134:	79c9      	ldrb	r1, [r1, #7]
    3136:	482e      	ldr	r0, [pc, #184]	; (31f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    3138:	0209      	lsls	r1, r1, #8
    313a:	4319      	orrs	r1, r3
    313c:	f7ff ffa8 	bl	3090 <_ZN14USBDeviceClass17sendConfigurationEm>
    3140:	1e41      	subs	r1, r0, #1
    3142:	4188      	sbcs	r0, r1
    3144:	b2c0      	uxtb	r0, r0
}
    3146:	b012      	add	sp, #72	; 0x48
    3148:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    314a:	f001 faf7 	bl	473c <_Z12PluggableUSBv>
    314e:	0021      	movs	r1, r4
    3150:	f001 fa88 	bl	4664 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    3154:	2800      	cmp	r0, #0
    3156:	d003      	beq.n	3160 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    3158:	17c1      	asrs	r1, r0, #31
    315a:	1a08      	subs	r0, r1, r0
    315c:	0fc0      	lsrs	r0, r0, #31
    315e:	e7f2      	b.n	3146 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    3160:	2e01      	cmp	r6, #1
    3162:	d10e      	bne.n	3182 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    3164:	79e2      	ldrb	r2, [r4, #7]
    3166:	79a3      	ldrb	r3, [r4, #6]
    3168:	0212      	lsls	r2, r2, #8
    316a:	431a      	orrs	r2, r3
    316c:	4921      	ldr	r1, [pc, #132]	; (31f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    316e:	2a11      	cmp	r2, #17
    3170:	dc3c      	bgt.n	31ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    3172:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    3174:	2a00      	cmp	r2, #0
    3176:	d039      	beq.n	31ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    3178:	0028      	movs	r0, r5
    317a:	f7ff ff2d 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    317e:	2001      	movs	r0, #1
    3180:	e7e1      	b.n	3146 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    3182:	2e03      	cmp	r6, #3
    3184:	d1df      	bne.n	3146 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    3186:	78a3      	ldrb	r3, [r4, #2]
    3188:	2b00      	cmp	r3, #0
    318a:	d028      	beq.n	31de <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    318c:	2b02      	cmp	r3, #2
    318e:	d108      	bne.n	31a2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3190:	79e2      	ldrb	r2, [r4, #7]
    3192:	79a3      	ldrb	r3, [r4, #6]
    3194:	0212      	lsls	r2, r2, #8
    3196:	4918      	ldr	r1, [pc, #96]	; (31f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    3198:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    319a:	0028      	movs	r0, r5
    319c:	f7ff ff46 	bl	302c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    31a0:	e7d1      	b.n	3146 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    31a2:	2b01      	cmp	r3, #1
    31a4:	d105      	bne.n	31b2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    31a6:	79e2      	ldrb	r2, [r4, #7]
    31a8:	79a3      	ldrb	r3, [r4, #6]
    31aa:	0212      	lsls	r2, r2, #8
    31ac:	431a      	orrs	r2, r3
    31ae:	4913      	ldr	r1, [pc, #76]	; (31fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    31b0:	e7f3      	b.n	319a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    31b2:	2b03      	cmp	r3, #3
    31b4:	d1c7      	bne.n	3146 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    31b6:	0001      	movs	r1, r0
    31b8:	2241      	movs	r2, #65	; 0x41
    31ba:	a801      	add	r0, sp, #4
    31bc:	f001 fbb9 	bl	4932 <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    31c0:	f001 fabc 	bl	473c <_Z12PluggableUSBv>
    31c4:	a901      	add	r1, sp, #4
    31c6:	f001 fa5d 	bl	4684 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    31ca:	2800      	cmp	r0, #0
    31cc:	d005      	beq.n	31da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    31ce:	79e2      	ldrb	r2, [r4, #7]
    31d0:	79a3      	ldrb	r3, [r4, #6]
    31d2:	0212      	lsls	r2, r2, #8
    31d4:	431a      	orrs	r2, r3
    31d6:	a901      	add	r1, sp, #4
    31d8:	e7df      	b.n	319a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    31da:	7803      	ldrb	r3, [r0, #0]
    31dc:	deff      	udf	#255	; 0xff
    31de:	79e2      	ldrb	r2, [r4, #7]
    31e0:	79a3      	ldrb	r3, [r4, #6]
    31e2:	0212      	lsls	r2, r2, #8
    31e4:	431a      	orrs	r2, r3
    31e6:	4906      	ldr	r1, [pc, #24]	; (3200 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    31e8:	2a03      	cmp	r2, #3
    31ea:	ddc2      	ble.n	3172 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    31ec:	780a      	ldrb	r2, [r1, #0]
    31ee:	e7c3      	b.n	3178 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    31f0:	200000ec 	.word	0x200000ec
    31f4:	00004b4a 	.word	0x00004b4a
    31f8:	00004b24 	.word	0x00004b24
    31fc:	00004b3e 	.word	0x00004b3e
    3200:	00004b3a 	.word	0x00004b3a

00003204 <_ZN14USBDeviceClass7sendZlpEm>:
    3204:	b2cb      	uxtb	r3, r1
    3206:	4904      	ldr	r1, [pc, #16]	; (3218 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    3208:	015b      	lsls	r3, r3, #5
    320a:	18c9      	adds	r1, r1, r3
    320c:	698b      	ldr	r3, [r1, #24]
    320e:	0b9b      	lsrs	r3, r3, #14
    3210:	039b      	lsls	r3, r3, #14
    3212:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    3214:	4770      	bx	lr
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	200005a4 	.word	0x200005a4

0000321c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    321c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    321e:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    3220:	7848      	ldrb	r0, [r1, #1]
{
    3222:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    3224:	280b      	cmp	r0, #11
    3226:	d811      	bhi.n	324c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3228:	f001 faac 	bl	4784 <__gnu_thumb1_case_uqi>
    322c:	2e101d06 	.word	0x2e101d06
    3230:	64484310 	.word	0x64484310
    3234:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    3238:	7809      	ldrb	r1, [r1, #0]
    323a:	aa01      	add	r2, sp, #4
    323c:	2900      	cmp	r1, #0
    323e:	d107      	bne.n	3250 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    3240:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    3242:	7011      	strb	r1, [r2, #0]
    3244:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    3246:	0028      	movs	r0, r5
    3248:	f7ff fea2 	bl	2f90 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    324c:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    324e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    3250:	2300      	movs	r3, #0
    3252:	7013      	strb	r3, [r2, #0]
    3254:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    3256:	4b28      	ldr	r3, [pc, #160]	; (32f8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    3258:	781b      	ldrb	r3, [r3, #0]
    325a:	2b01      	cmp	r3, #1
    325c:	d100      	bne.n	3260 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    325e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    3260:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    3262:	2100      	movs	r1, #0
    3264:	e7ef      	b.n	3246 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3266:	788a      	ldrb	r2, [r1, #2]
    3268:	2300      	movs	r3, #0
    326a:	2a01      	cmp	r2, #1
    326c:	d104      	bne.n	3278 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    326e:	aa01      	add	r2, sp, #4
    3270:	7013      	strb	r3, [r2, #0]
    3272:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    3274:	4b21      	ldr	r3, [pc, #132]	; (32fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    3276:	e7ef      	b.n	3258 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    3278:	4a1f      	ldr	r2, [pc, #124]	; (32f8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    327a:	7013      	strb	r3, [r2, #0]
    327c:	4a20      	ldr	r2, [pc, #128]	; (3300 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    327e:	6993      	ldr	r3, [r2, #24]
    3280:	0b9b      	lsrs	r3, r3, #14
    3282:	039b      	lsls	r3, r3, #14
    3284:	6193      	str	r3, [r2, #24]
    3286:	e7e1      	b.n	324c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3288:	788c      	ldrb	r4, [r1, #2]
    328a:	2c01      	cmp	r4, #1
    328c:	d106      	bne.n	329c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    328e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    3290:	4b1a      	ldr	r3, [pc, #104]	; (32fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    3292:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3294:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3296:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3298:	0023      	movs	r3, r4
    329a:	e7d4      	b.n	3246 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    329c:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    329e:	2c00      	cmp	r4, #0
    32a0:	d1d5      	bne.n	324e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    32a2:	4b15      	ldr	r3, [pc, #84]	; (32f8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    32a4:	4a16      	ldr	r2, [pc, #88]	; (3300 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    32a6:	7018      	strb	r0, [r3, #0]
    32a8:	6993      	ldr	r3, [r2, #24]
    32aa:	0b9b      	lsrs	r3, r3, #14
    32ac:	039b      	lsls	r3, r3, #14
    32ae:	6193      	str	r3, [r2, #24]
			return true;
    32b0:	e7cd      	b.n	324e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    32b2:	7889      	ldrb	r1, [r1, #2]
    32b4:	0028      	movs	r0, r5
    32b6:	f7ff fc21 	bl	2afc <_ZN14USBDeviceClass10setAddressEm>
    32ba:	e7c7      	b.n	324c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    32bc:	0028      	movs	r0, r5
    32be:	f7ff ff31 	bl	3124 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    32c2:	e7c4      	b.n	324e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    32c4:	2301      	movs	r3, #1
    32c6:	4a0f      	ldr	r2, [pc, #60]	; (3304 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    32c8:	e7cb      	b.n	3262 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    32ca:	780b      	ldrb	r3, [r1, #0]
			return false;
    32cc:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    32ce:	06db      	lsls	r3, r3, #27
    32d0:	d1bd      	bne.n	324e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    32d2:	0028      	movs	r0, r5
    32d4:	f7ff fcca 	bl	2c6c <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    32d8:	78a2      	ldrb	r2, [r4, #2]
    32da:	4b0a      	ldr	r3, [pc, #40]	; (3304 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    32dc:	480a      	ldr	r0, [pc, #40]	; (3308 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    32de:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    32e0:	f001 f988 	bl	45f4 <_ZN7Serial_15enableInterruptEv>
    32e4:	e7ca      	b.n	327c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    32e6:	2301      	movs	r3, #1
    32e8:	4a08      	ldr	r2, [pc, #32]	; (330c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    32ea:	e7ba      	b.n	3262 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    32ec:	788a      	ldrb	r2, [r1, #2]
    32ee:	4b07      	ldr	r3, [pc, #28]	; (330c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    32f0:	601a      	str	r2, [r3, #0]
    32f2:	e7c3      	b.n	327c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    32f4:	2000      	movs	r0, #0
    32f6:	e7aa      	b.n	324e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    32f8:	2000010c 	.word	0x2000010c
    32fc:	20000114 	.word	0x20000114
    3300:	200005a4 	.word	0x200005a4
    3304:	2000059c 	.word	0x2000059c
    3308:	20000b38 	.word	0x20000b38
    330c:	200005a0 	.word	0x200005a0

00003310 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3310:	4b3b      	ldr	r3, [pc, #236]	; (3400 <_ZN14USBDeviceClass10ISRHandlerEv+0xf0>)
{
    3312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3314:	781e      	ldrb	r6, [r3, #0]
{
    3316:	0005      	movs	r5, r0
	if (_pack_message == true) {
    3318:	2e00      	cmp	r6, #0
    331a:	d161      	bne.n	33e0 <_ZN14USBDeviceClass10ISRHandlerEv+0xd0>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    331c:	4c39      	ldr	r4, [pc, #228]	; (3404 <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
    331e:	6823      	ldr	r3, [r4, #0]
    3320:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    3322:	0712      	lsls	r2, r2, #28
    3324:	d50d      	bpl.n	3342 <_ZN14USBDeviceClass10ISRHandlerEv+0x32>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    3326:	2208      	movs	r2, #8
    3328:	0031      	movs	r1, r6
    332a:	839a      	strh	r2, [r3, #28]
    332c:	0030      	movs	r0, r6
    332e:	f7ff f8c9 	bl	24c4 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    3332:	2210      	movs	r2, #16
    3334:	6823      	ldr	r3, [r4, #0]
    3336:	33ff      	adds	r3, #255	; 0xff
    3338:	7a99      	ldrb	r1, [r3, #10]
    333a:	430a      	orrs	r2, r1
    333c:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    333e:	4b32      	ldr	r3, [pc, #200]	; (3408 <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    3340:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    3342:	6823      	ldr	r3, [r4, #0]
    3344:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    3346:	0752      	lsls	r2, r2, #29
    3348:	d501      	bpl.n	334e <_ZN14USBDeviceClass10ISRHandlerEv+0x3e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    334a:	2204      	movs	r2, #4
    334c:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    334e:	33ff      	adds	r3, #255	; 0xff
    3350:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    3352:	0692      	lsls	r2, r2, #26
    3354:	d503      	bpl.n	335e <_ZN14USBDeviceClass10ISRHandlerEv+0x4e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    3356:	2220      	movs	r2, #32
    3358:	7a59      	ldrb	r1, [r3, #9]
    335a:	430a      	orrs	r2, r1
    335c:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    335e:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3360:	06d2      	lsls	r2, r2, #27
    3362:	d525      	bpl.n	33b0 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    3364:	4668      	mov	r0, sp
    3366:	4a29      	ldr	r2, [pc, #164]	; (340c <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    3368:	4669      	mov	r1, sp
    336a:	cac0      	ldmia	r2!, {r6, r7}
    336c:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    336e:	68a2      	ldr	r2, [r4, #8]
    3370:	0b92      	lsrs	r2, r2, #14
    3372:	0392      	lsls	r2, r2, #14
    3374:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3376:	2240      	movs	r2, #64	; 0x40
    3378:	7958      	ldrb	r0, [r3, #5]
    337a:	4302      	orrs	r2, r0
    337c:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    337e:	2360      	movs	r3, #96	; 0x60
    3380:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    3382:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    3384:	421a      	tst	r2, r3
    3386:	d12c      	bne.n	33e2 <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
			ok = handleStandardSetup(setup);
    3388:	f7ff ff48 	bl	321c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    338c:	2800      	cmp	r0, #0
    338e:	d02b      	beq.n	33e8 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3390:	2280      	movs	r2, #128	; 0x80
    3392:	6823      	ldr	r3, [r4, #0]
    3394:	4252      	negs	r2, r2
    3396:	33ff      	adds	r3, #255	; 0xff
    3398:	7999      	ldrb	r1, [r3, #6]
    339a:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    339c:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    339e:	6823      	ldr	r3, [r4, #0]
    33a0:	33ff      	adds	r3, #255	; 0xff
    33a2:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    33a4:	0652      	lsls	r2, r2, #25
    33a6:	d503      	bpl.n	33b0 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    33a8:	2240      	movs	r2, #64	; 0x40
    33aa:	7a59      	ldrb	r1, [r3, #9]
    33ac:	430a      	orrs	r2, r1
    33ae:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    33b0:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    33b2:	2501      	movs	r5, #1
    33b4:	6823      	ldr	r3, [r4, #0]
    33b6:	33ff      	adds	r3, #255	; 0xff
    33b8:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    33ba:	002f      	movs	r7, r5
    33bc:	6823      	ldr	r3, [r4, #0]
    33be:	3708      	adds	r7, #8
    33c0:	017f      	lsls	r7, r7, #5
    33c2:	19db      	adds	r3, r3, r7
    33c4:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    33c6:	2b00      	cmp	r3, #0
    33c8:	d007      	beq.n	33da <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
			if (epHandlers[ep]) {
    33ca:	4b11      	ldr	r3, [pc, #68]	; (3410 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
    33cc:	00aa      	lsls	r2, r5, #2
    33ce:	58d0      	ldr	r0, [r2, r3]
    33d0:	2800      	cmp	r0, #0
    33d2:	d00c      	beq.n	33ee <_ZN14USBDeviceClass10ISRHandlerEv+0xde>
				epHandlers[ep]->handleEndpoint();
    33d4:	6803      	ldr	r3, [r0, #0]
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    33da:	3501      	adds	r5, #1
    33dc:	2d08      	cmp	r5, #8
    33de:	d1ec      	bne.n	33ba <_ZN14USBDeviceClass10ISRHandlerEv+0xaa>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    33e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    33e2:	f7ff fbaf 	bl	2b44 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    33e6:	e7d1      	b.n	338c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    33e8:	2220      	movs	r2, #32
    33ea:	4b0a      	ldr	r3, [pc, #40]	; (3414 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    33ec:	e7d6      	b.n	339c <_ZN14USBDeviceClass10ISRHandlerEv+0x8c>
				PluggableUSB().handleEndpoint(ep);
    33ee:	f001 f9a5 	bl	473c <_Z12PluggableUSBv>
    33f2:	0029      	movs	r1, r5
    33f4:	f001 f969 	bl	46ca <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    33f8:	6823      	ldr	r3, [r4, #0]
    33fa:	19df      	adds	r7, r3, r7
    33fc:	71fe      	strb	r6, [r7, #7]
    33fe:	e7ec      	b.n	33da <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
    3400:	20000599 	.word	0x20000599
    3404:	200005a4 	.word	0x200005a4
    3408:	2000059c 	.word	0x2000059c
    340c:	200002d8 	.word	0x200002d8
    3410:	200000f0 	.word	0x200000f0
    3414:	410050ff 	.word	0x410050ff

00003418 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    3418:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    341a:	4802      	ldr	r0, [pc, #8]	; (3424 <UDD_Handler+0xc>)
    341c:	f7ff ff78 	bl	3310 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    3420:	bd10      	pop	{r4, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	200000ec 	.word	0x200000ec

00003428 <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    3428:	4a01      	ldr	r2, [pc, #4]	; (3430 <_GLOBAL__sub_I_usbd+0x8>)
    342a:	4b02      	ldr	r3, [pc, #8]	; (3434 <_GLOBAL__sub_I_usbd+0xc>)
    342c:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    342e:	4770      	bx	lr
    3430:	41005000 	.word	0x41005000
    3434:	200005a4 	.word	0x200005a4

00003438 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    3438:	21fa      	movs	r1, #250	; 0xfa
    343a:	4b31      	ldr	r3, [pc, #196]	; (3500 <init+0xc8>)
{
    343c:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    343e:	6818      	ldr	r0, [r3, #0]
    3440:	0089      	lsls	r1, r1, #2
    3442:	f001 f9a9 	bl	4798 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3446:	4b2f      	ldr	r3, [pc, #188]	; (3504 <init+0xcc>)
    3448:	3801      	subs	r0, #1
    344a:	4298      	cmp	r0, r3
    344c:	d856      	bhi.n	34fc <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    344e:	492e      	ldr	r1, [pc, #184]	; (3508 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3450:	4a2e      	ldr	r2, [pc, #184]	; (350c <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3452:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3454:	20c0      	movs	r0, #192	; 0xc0
    3456:	6a13      	ldr	r3, [r2, #32]
    3458:	0600      	lsls	r0, r0, #24
    345a:	021b      	lsls	r3, r3, #8
    345c:	0a1b      	lsrs	r3, r3, #8
    345e:	4303      	orrs	r3, r0
    3460:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3462:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3464:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3466:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3468:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    346a:	2180      	movs	r1, #128	; 0x80
    346c:	6a13      	ldr	r3, [r2, #32]
    346e:	0609      	lsls	r1, r1, #24
    3470:	021b      	lsls	r3, r3, #8
    3472:	0a1b      	lsrs	r3, r3, #8
    3474:	430b      	orrs	r3, r1
    3476:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    3478:	22fc      	movs	r2, #252	; 0xfc
    347a:	4b25      	ldr	r3, [pc, #148]	; (3510 <init+0xd8>)
    347c:	6a19      	ldr	r1, [r3, #32]
    347e:	430a      	orrs	r2, r1
    3480:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    3482:	22fc      	movs	r2, #252	; 0xfc
    3484:	6a19      	ldr	r1, [r3, #32]
    3486:	0192      	lsls	r2, r2, #6
    3488:	430a      	orrs	r2, r1
    348a:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    348c:	22a0      	movs	r2, #160	; 0xa0
    348e:	6a19      	ldr	r1, [r3, #32]
    3490:	02d2      	lsls	r2, r2, #11
    3492:	430a      	orrs	r2, r1
    3494:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    3496:	0020      	movs	r0, r4
    3498:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    349a:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    349c:	f000 f8ee 	bl	367c <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    34a0:	2c0f      	cmp	r4, #15
    34a2:	d1f8      	bne.n	3496 <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    34a4:	4b1b      	ldr	r3, [pc, #108]	; (3514 <init+0xdc>)
    34a6:	001c      	movs	r4, r3
    34a8:	785a      	ldrb	r2, [r3, #1]
    34aa:	b252      	sxtb	r2, r2
    34ac:	2a00      	cmp	r2, #0
    34ae:	dbfb      	blt.n	34a8 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    34b0:	4a19      	ldr	r2, [pc, #100]	; (3518 <init+0xe0>)
    34b2:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    34b4:	4b19      	ldr	r3, [pc, #100]	; (351c <init+0xe4>)
    34b6:	001a      	movs	r2, r3
    34b8:	7e59      	ldrb	r1, [r3, #25]
    34ba:	09c9      	lsrs	r1, r1, #7
    34bc:	2901      	cmp	r1, #1
    34be:	d0fb      	beq.n	34b8 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    34c0:	21e4      	movs	r1, #228	; 0xe4
    34c2:	00c9      	lsls	r1, r1, #3
    34c4:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    34c6:	213f      	movs	r1, #63	; 0x3f
    34c8:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    34ca:	7e53      	ldrb	r3, [r2, #25]
    34cc:	09db      	lsrs	r3, r3, #7
    34ce:	2b01      	cmp	r3, #1
    34d0:	d0fb      	beq.n	34ca <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    34d2:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    34d4:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    34d6:	015b      	lsls	r3, r3, #5
    34d8:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    34da:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    34dc:	f000 f82e 	bl	353c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    34e0:	7863      	ldrb	r3, [r4, #1]
    34e2:	b25b      	sxtb	r3, r3
    34e4:	2b00      	cmp	r3, #0
    34e6:	dbfb      	blt.n	34e0 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    34e8:	4b0d      	ldr	r3, [pc, #52]	; (3520 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    34ea:	4a0e      	ldr	r2, [pc, #56]	; (3524 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    34ec:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    34ee:	79d3      	ldrb	r3, [r2, #7]
    34f0:	09db      	lsrs	r3, r3, #7
    34f2:	2b01      	cmp	r3, #1
    34f4:	d0fb      	beq.n	34ee <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    34f6:	2341      	movs	r3, #65	; 0x41
    34f8:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    34fa:	bd10      	pop	{r4, pc}
    34fc:	e7fe      	b.n	34fc <init+0xc4>
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	20000004 	.word	0x20000004
    3504:	00ffffff 	.word	0x00ffffff
    3508:	e000e010 	.word	0xe000e010
    350c:	e000ed00 	.word	0xe000ed00
    3510:	40000400 	.word	0x40000400
    3514:	40000c00 	.word	0x40000c00
    3518:	0000401e 	.word	0x0000401e
    351c:	42004000 	.word	0x42004000
    3520:	00004021 	.word	0x00004021
    3524:	42004800 	.word	0x42004800

00003528 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    3528:	4291      	cmp	r1, r2
    352a:	d002      	beq.n	3532 <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    352c:	d902      	bls.n	3534 <mapResolution+0xc>
    return value >> (from-to);
    352e:	1a8a      	subs	r2, r1, r2
    3530:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    3532:	4770      	bx	lr
  return value << (to-from);
    3534:	1a52      	subs	r2, r2, r1
    3536:	4090      	lsls	r0, r2
    3538:	e7fb      	b.n	3532 <mapResolution+0xa>
	...

0000353c <analogReference>:
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    353c:	4a16      	ldr	r2, [pc, #88]	; (3598 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    353e:	b500      	push	{lr}
    3540:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3542:	7e51      	ldrb	r1, [r2, #25]
    3544:	09c9      	lsrs	r1, r1, #7
    3546:	2901      	cmp	r1, #1
    3548:	d0fb      	beq.n	3542 <analogReference+0x6>
  syncADC();
  switch (mode)
    354a:	3801      	subs	r0, #1
    354c:	2804      	cmp	r0, #4
    354e:	d816      	bhi.n	357e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3550:	6919      	ldr	r1, [r3, #16]
    3552:	4a12      	ldr	r2, [pc, #72]	; (359c <analogReference+0x60>)
    3554:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    3556:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    3558:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    355a:	785a      	ldrb	r2, [r3, #1]
    355c:	438a      	bics	r2, r1
  switch (mode)
    355e:	f001 f911 	bl	4784 <__gnu_thumb1_case_uqi>
    3562:	0803      	.short	0x0803
    3564:	0b06      	.short	0x0b06
    3566:	03          	.byte	0x03
    3567:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    3568:	0011      	movs	r1, r2
    356a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    356c:	430a      	orrs	r2, r1
    356e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    3570:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    3572:	0011      	movs	r1, r2
    3574:	2203      	movs	r2, #3
    3576:	e7f9      	b.n	356c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    3578:	0011      	movs	r1, r2
    357a:	2202      	movs	r2, #2
    357c:	e7f6      	b.n	356c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    357e:	23f0      	movs	r3, #240	; 0xf0
    3580:	6911      	ldr	r1, [r2, #16]
    3582:	051b      	lsls	r3, r3, #20
    3584:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    3586:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    3588:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    358a:	7853      	ldrb	r3, [r2, #1]
    358c:	438b      	bics	r3, r1
    358e:	0019      	movs	r1, r3
    3590:	2302      	movs	r3, #2
    3592:	430b      	orrs	r3, r1
    3594:	7053      	strb	r3, [r2, #1]
}
    3596:	e7eb      	b.n	3570 <analogReference+0x34>
    3598:	42004000 	.word	0x42004000
    359c:	f0ffffff 	.word	0xf0ffffff

000035a0 <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    35a0:	b510      	push	{r4, lr}
    35a2:	0004      	movs	r4, r0
  uint32_t valueRead = 0;

  if (pin < A0) {
    35a4:	280e      	cmp	r0, #14
    35a6:	d800      	bhi.n	35aa <analogRead+0xa>
    pin += A0;
    35a8:	340f      	adds	r4, #15
  }

  pinPeripheral(pin, PIO_ANALOG);
    35aa:	2101      	movs	r1, #1
    35ac:	0020      	movs	r0, r4
    35ae:	f000 f8dd 	bl	376c <pinPeripheral>

  // Disable DAC, if analogWrite() was used previously to enable the DAC
  if ((g_APinDescription[pin].ulADCChannelNumber == ADC_Channel0) || (g_APinDescription[pin].ulADCChannelNumber == DAC_Channel0)) {
    35b2:	2318      	movs	r3, #24
    35b4:	2110      	movs	r1, #16
    35b6:	4363      	muls	r3, r4
    35b8:	4c2b      	ldr	r4, [pc, #172]	; (3668 <analogRead+0xc8>)
    35ba:	18e4      	adds	r4, r4, r3
    35bc:	5661      	ldrsb	r1, [r4, r1]
    35be:	2900      	cmp	r1, #0
    35c0:	d042      	beq.n	3648 <analogRead+0xa8>
    35c2:	2914      	cmp	r1, #20
    35c4:	d040      	beq.n	3648 <analogRead+0xa8>
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    35c6:	4829      	ldr	r0, [pc, #164]	; (366c <analogRead+0xcc>)
    35c8:	0003      	movs	r3, r0
    35ca:	7e42      	ldrb	r2, [r0, #25]
    35cc:	09d2      	lsrs	r2, r2, #7
    35ce:	2a01      	cmp	r2, #1
    35d0:	d0fb      	beq.n	35ca <analogRead+0x2a>
    //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
    syncDAC();
  }

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    35d2:	241f      	movs	r4, #31
    35d4:	6902      	ldr	r2, [r0, #16]
    35d6:	4021      	ands	r1, r4
    35d8:	43a2      	bics	r2, r4
    35da:	430a      	orrs	r2, r1
    35dc:	6102      	str	r2, [r0, #16]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    35de:	7e5a      	ldrb	r2, [r3, #25]
    35e0:	09d2      	lsrs	r2, r2, #7
    35e2:	2a01      	cmp	r2, #1
    35e4:	d0fb      	beq.n	35de <analogRead+0x3e>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    35e6:	2202      	movs	r2, #2
    35e8:	7819      	ldrb	r1, [r3, #0]
    35ea:	430a      	orrs	r2, r1
    35ec:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    35ee:	7e5a      	ldrb	r2, [r3, #25]
    35f0:	09d2      	lsrs	r2, r2, #7
    35f2:	2a01      	cmp	r2, #1
    35f4:	d0fb      	beq.n	35ee <analogRead+0x4e>

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    35f6:	2202      	movs	r2, #2
    35f8:	7b19      	ldrb	r1, [r3, #12]
    35fa:	430a      	orrs	r2, r1
    35fc:	731a      	strb	r2, [r3, #12]

  // Waiting for the 1st conversion to complete
  while (ADC->INTFLAG.bit.RESRDY == 0);
    35fe:	7e1a      	ldrb	r2, [r3, #24]
    3600:	07d2      	lsls	r2, r2, #31
    3602:	d5fc      	bpl.n	35fe <analogRead+0x5e>

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3604:	2201      	movs	r2, #1
    3606:	761a      	strb	r2, [r3, #24]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3608:	7e5a      	ldrb	r2, [r3, #25]
    360a:	09d2      	lsrs	r2, r2, #7
    360c:	2a01      	cmp	r2, #1
    360e:	d0fb      	beq.n	3608 <analogRead+0x68>

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    3610:	2202      	movs	r2, #2
    3612:	7b19      	ldrb	r1, [r3, #12]
    3614:	430a      	orrs	r2, r1
    3616:	731a      	strb	r2, [r3, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    3618:	7e1a      	ldrb	r2, [r3, #24]
    361a:	07d2      	lsls	r2, r2, #31
    361c:	d5fc      	bpl.n	3618 <analogRead+0x78>
  valueRead = ADC->RESULT.reg;
    361e:	8b58      	ldrh	r0, [r3, #26]
    3620:	b280      	uxth	r0, r0
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3622:	7e5a      	ldrb	r2, [r3, #25]
    3624:	09d2      	lsrs	r2, r2, #7
    3626:	2a01      	cmp	r2, #1
    3628:	d0fb      	beq.n	3622 <analogRead+0x82>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    362a:	2102      	movs	r1, #2
    362c:	781a      	ldrb	r2, [r3, #0]
    362e:	438a      	bics	r2, r1
    3630:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    3632:	7e5a      	ldrb	r2, [r3, #25]
    3634:	09d2      	lsrs	r2, r2, #7
    3636:	2a01      	cmp	r2, #1
    3638:	d0fb      	beq.n	3632 <analogRead+0x92>
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    363a:	4b0d      	ldr	r3, [pc, #52]	; (3670 <analogRead+0xd0>)
    363c:	681a      	ldr	r2, [r3, #0]
    363e:	4b0d      	ldr	r3, [pc, #52]	; (3674 <analogRead+0xd4>)
    3640:	6819      	ldr	r1, [r3, #0]
    3642:	f7ff ff71 	bl	3528 <mapResolution>
}
    3646:	bd10      	pop	{r4, pc}
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    3648:	4b0b      	ldr	r3, [pc, #44]	; (3678 <analogRead+0xd8>)
    364a:	0018      	movs	r0, r3
    364c:	79da      	ldrb	r2, [r3, #7]
    364e:	09d2      	lsrs	r2, r2, #7
    3650:	2a01      	cmp	r2, #1
    3652:	d0fb      	beq.n	364c <analogRead+0xac>
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    3654:	2402      	movs	r4, #2
    3656:	781a      	ldrb	r2, [r3, #0]
    3658:	43a2      	bics	r2, r4
    365a:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    365c:	79c3      	ldrb	r3, [r0, #7]
    365e:	09db      	lsrs	r3, r3, #7
    3660:	2b01      	cmp	r3, #1
    3662:	d0fb      	beq.n	365c <analogRead+0xbc>
    3664:	e7af      	b.n	35c6 <analogRead+0x26>
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	00004b5c 	.word	0x00004b5c
    366c:	42004000 	.word	0x42004000
    3670:	2000000c 	.word	0x2000000c
    3674:	20000008 	.word	0x20000008
    3678:	42004800 	.word	0x42004800

0000367c <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    367c:	2318      	movs	r3, #24
{
    367e:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    3680:	001d      	movs	r5, r3
{
    3682:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    3684:	4345      	muls	r5, r0
    3686:	2008      	movs	r0, #8
    3688:	4a20      	ldr	r2, [pc, #128]	; (370c <pinMode+0x90>)
    368a:	1955      	adds	r5, r2, r5
    368c:	5628      	ldrsb	r0, [r5, r0]
    368e:	3001      	adds	r0, #1
    3690:	d014      	beq.n	36bc <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    3692:	2903      	cmp	r1, #3
    3694:	d812      	bhi.n	36bc <pinMode+0x40>
    3696:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    3698:	4363      	muls	r3, r4
    369a:	56d1      	ldrsb	r1, [r2, r3]
    369c:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    369e:	f001 f871 	bl	4784 <__gnu_thumb1_case_uqi>
    36a2:	2802      	.short	0x2802
    36a4:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    36a6:	6858      	ldr	r0, [r3, #4]
    36a8:	01cb      	lsls	r3, r1, #7
    36aa:	2102      	movs	r1, #2
    36ac:	4a18      	ldr	r2, [pc, #96]	; (3710 <pinMode+0x94>)
    36ae:	189b      	adds	r3, r3, r2
    36b0:	181a      	adds	r2, r3, r0
    36b2:	3240      	adds	r2, #64	; 0x40
    36b4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    36b6:	2201      	movs	r2, #1
    36b8:	4082      	lsls	r2, r0
    36ba:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    36bc:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    36be:	6858      	ldr	r0, [r3, #4]
    36c0:	01cb      	lsls	r3, r1, #7
    36c2:	2106      	movs	r1, #6
    36c4:	4a12      	ldr	r2, [pc, #72]	; (3710 <pinMode+0x94>)
    36c6:	189b      	adds	r3, r3, r2
    36c8:	181a      	adds	r2, r3, r0
    36ca:	3240      	adds	r2, #64	; 0x40
    36cc:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    36ce:	2201      	movs	r2, #1
    36d0:	4082      	lsls	r2, r0
    36d2:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    36d4:	619a      	str	r2, [r3, #24]
    break ;
    36d6:	e7f1      	b.n	36bc <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    36d8:	6858      	ldr	r0, [r3, #4]
    36da:	01cb      	lsls	r3, r1, #7
    36dc:	2106      	movs	r1, #6
    36de:	4a0c      	ldr	r2, [pc, #48]	; (3710 <pinMode+0x94>)
    36e0:	189b      	adds	r3, r3, r2
    36e2:	181a      	adds	r2, r3, r0
    36e4:	3240      	adds	r2, #64	; 0x40
    36e6:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    36e8:	2201      	movs	r2, #1
    36ea:	4082      	lsls	r2, r0
    36ec:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    36ee:	615a      	str	r2, [r3, #20]
    break ;
    36f0:	e7e4      	b.n	36bc <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    36f2:	6858      	ldr	r0, [r3, #4]
    36f4:	01cb      	lsls	r3, r1, #7
    36f6:	2102      	movs	r1, #2
    36f8:	4a05      	ldr	r2, [pc, #20]	; (3710 <pinMode+0x94>)
    36fa:	189b      	adds	r3, r3, r2
    36fc:	181a      	adds	r2, r3, r0
    36fe:	3240      	adds	r2, #64	; 0x40
    3700:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    3702:	2201      	movs	r2, #1
    3704:	4082      	lsls	r2, r0
    3706:	609a      	str	r2, [r3, #8]
    break ;
    3708:	e7d8      	b.n	36bc <pinMode+0x40>
    370a:	46c0      	nop			; (mov r8, r8)
    370c:	00004b5c 	.word	0x00004b5c
    3710:	41004400 	.word	0x41004400

00003714 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    3714:	2318      	movs	r3, #24
{
    3716:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    3718:	2408      	movs	r4, #8
    371a:	4358      	muls	r0, r3
    371c:	4a11      	ldr	r2, [pc, #68]	; (3764 <digitalWrite+0x50>)
    371e:	1813      	adds	r3, r2, r0
    3720:	571c      	ldrsb	r4, [r3, r4]
    3722:	3401      	adds	r4, #1
    3724:	d01b      	beq.n	375e <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    3726:	2601      	movs	r6, #1
    3728:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    372a:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    372c:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    372e:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    3730:	4a0d      	ldr	r2, [pc, #52]	; (3768 <digitalWrite+0x54>)
    3732:	01db      	lsls	r3, r3, #7
    3734:	189a      	adds	r2, r3, r2
    3736:	6890      	ldr	r0, [r2, #8]
    3738:	4228      	tst	r0, r5
    373a:	d10b      	bne.n	3754 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    373c:	000c      	movs	r4, r1
    373e:	1e60      	subs	r0, r4, #1
    3740:	4184      	sbcs	r4, r0
    3742:	19d2      	adds	r2, r2, r7
    3744:	3240      	adds	r2, #64	; 0x40
    3746:	7810      	ldrb	r0, [r2, #0]
    3748:	4034      	ands	r4, r6
    374a:	3603      	adds	r6, #3
    374c:	00a4      	lsls	r4, r4, #2
    374e:	43b0      	bics	r0, r6
    3750:	4320      	orrs	r0, r4
    3752:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    3754:	4a04      	ldr	r2, [pc, #16]	; (3768 <digitalWrite+0x54>)
    3756:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    3758:	2900      	cmp	r1, #0
    375a:	d101      	bne.n	3760 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    375c:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    3760:	619d      	str	r5, [r3, #24]
    break ;
    3762:	e7fc      	b.n	375e <digitalWrite+0x4a>
    3764:	00004b5c 	.word	0x00004b5c
    3768:	41004400 	.word	0x41004400

0000376c <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    376e:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    3770:	2018      	movs	r0, #24
    3772:	4358      	muls	r0, r3
    3774:	4a2a      	ldr	r2, [pc, #168]	; (3820 <pinPeripheral+0xb4>)
    3776:	1810      	adds	r0, r2, r0
    3778:	7a00      	ldrb	r0, [r0, #8]
    377a:	b240      	sxtb	r0, r0
  {
    return -1 ;
    377c:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    377e:	3001      	adds	r0, #1
    3780:	d013      	beq.n	37aa <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    3782:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    3784:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    3786:	280c      	cmp	r0, #12
    3788:	d80f      	bhi.n	37aa <pinPeripheral+0x3e>
    378a:	f000 fffb 	bl	4784 <__gnu_thumb1_case_uqi>
    378e:	1c45      	.short	0x1c45
    3790:	1c1c1c1c 	.word	0x1c1c1c1c
    3794:	071c1c1c 	.word	0x071c1c1c
    3798:	0707      	.short	0x0707
    379a:	07          	.byte	0x07
    379b:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    379c:	2909      	cmp	r1, #9
    379e:	d106      	bne.n	37ae <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    37a0:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    37a2:	0018      	movs	r0, r3
    37a4:	f7ff ff6a 	bl	367c <pinMode>
  return 0l ;
    37a8:	2400      	movs	r4, #0
}
    37aa:	0020      	movs	r0, r4
    37ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    37ae:	290a      	cmp	r1, #10
    37b0:	d101      	bne.n	37b6 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    37b2:	3908      	subs	r1, #8
    37b4:	e7f5      	b.n	37a2 <pinPeripheral+0x36>
  return 0l ;
    37b6:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    37b8:	290b      	cmp	r1, #11
    37ba:	d1f6      	bne.n	37aa <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    37bc:	390a      	subs	r1, #10
    37be:	0018      	movs	r0, r3
    37c0:	f7ff ff5c 	bl	367c <pinMode>
    37c4:	e7f1      	b.n	37aa <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    37c6:	2018      	movs	r0, #24
    37c8:	4343      	muls	r3, r0
    37ca:	18d0      	adds	r0, r2, r3
    37cc:	6846      	ldr	r6, [r0, #4]
    37ce:	2501      	movs	r5, #1
    37d0:	0034      	movs	r4, r6
    37d2:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    37d4:	4813      	ldr	r0, [pc, #76]	; (3824 <pinPeripheral+0xb8>)
    37d6:	01d2      	lsls	r2, r2, #7
    37d8:	1812      	adds	r2, r2, r0
    37da:	0873      	lsrs	r3, r6, #1
    37dc:	18d3      	adds	r3, r2, r3
    37de:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    37e0:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    37e2:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    37e4:	2c00      	cmp	r4, #0
    37e6:	d00b      	beq.n	3800 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    37e8:	240f      	movs	r4, #15
    37ea:	0109      	lsls	r1, r1, #4
    37ec:	4020      	ands	r0, r4
    37ee:	4301      	orrs	r1, r0
    37f0:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    37f2:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    37f4:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    37f6:	3240      	adds	r2, #64	; 0x40
    37f8:	7813      	ldrb	r3, [r2, #0]
    37fa:	431d      	orrs	r5, r3
    37fc:	7015      	strb	r5, [r2, #0]
    37fe:	e7d3      	b.n	37a8 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    3800:	270f      	movs	r7, #15
    3802:	43b8      	bics	r0, r7
    3804:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    3806:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    3808:	b2c9      	uxtb	r1, r1
    380a:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    380c:	0013      	movs	r3, r2
    380e:	3340      	adds	r3, #64	; 0x40
    3810:	781a      	ldrb	r2, [r3, #0]
    3812:	4315      	orrs	r5, r2
    3814:	701d      	strb	r5, [r3, #0]
    3816:	e7c8      	b.n	37aa <pinPeripheral+0x3e>
      return -1l ;
    3818:	2401      	movs	r4, #1
    381a:	4264      	negs	r4, r4
    381c:	e7c5      	b.n	37aa <pinPeripheral+0x3e>
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	00004b5c 	.word	0x00004b5c
    3824:	41004400 	.word	0x41004400

00003828 <_Z11initVariantv>:
  PERIPH_WIRE.disableWIRE();
}

#endif

void initVariant() {
    3828:	b570      	push	{r4, r5, r6, lr}
#if defined(USE_BQ24195L_PMIC)
  pinMode(ADC_BATTERY, OUTPUT);
    382a:	2101      	movs	r1, #1
    382c:	2020      	movs	r0, #32
    382e:	f7ff ff25 	bl	367c <pinMode>
  digitalWrite(ADC_BATTERY, LOW);
    3832:	2100      	movs	r1, #0
    3834:	2020      	movs	r0, #32
    3836:	f7ff ff6d 	bl	3714 <digitalWrite>
  delay(10);
    383a:	200a      	movs	r0, #10
    383c:	f7fe fcf4 	bl	2228 <delay>
  pinMode(ADC_BATTERY, INPUT);
    3840:	2100      	movs	r1, #0
    3842:	2020      	movs	r0, #32
    3844:	f7ff ff1a 	bl	367c <pinMode>
  delay(100);
    3848:	2064      	movs	r0, #100	; 0x64
    384a:	f7fe fced 	bl	2228 <delay>

  bool batteryPresent = analogRead(ADC_BATTERY) > 600;
    384e:	2020      	movs	r0, #32
    3850:	f7ff fea6 	bl	35a0 <analogRead>
  if (batteryPresent) {
    3854:	2396      	movs	r3, #150	; 0x96
  bool batteryPresent = analogRead(ADC_BATTERY) > 600;
    3856:	0005      	movs	r5, r0
  if (batteryPresent) {
    3858:	009b      	lsls	r3, r3, #2
    385a:	4c2f      	ldr	r4, [pc, #188]	; (3918 <_Z11initVariantv+0xf0>)
    385c:	4298      	cmp	r0, r3
    385e:	d922      	bls.n	38a6 <_Z11initVariantv+0x7e>
  PERIPH_WIRE.initMasterWIRE(100000);
    3860:	492e      	ldr	r1, [pc, #184]	; (391c <_Z11initVariantv+0xf4>)
    3862:	0020      	movs	r0, r4
    3864:	f000 fa66 	bl	3d34 <_ZN6SERCOM14initMasterWIREEm>
  PERIPH_WIRE.enableWIRE();
    3868:	0020      	movs	r0, r4
    386a:	f000 f950 	bl	3b0e <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(PIN_WIRE_SDA, g_APinDescription[PIN_WIRE_SDA].ulPinType);
    386e:	2103      	movs	r1, #3
    3870:	200b      	movs	r0, #11
    3872:	f7ff ff7b 	bl	376c <pinPeripheral>
  pinPeripheral(PIN_WIRE_SCL, g_APinDescription[PIN_WIRE_SCL].ulPinType);
    3876:	2103      	movs	r1, #3
    3878:	200c      	movs	r0, #12
    387a:	f7ff ff77 	bl	376c <pinPeripheral>
  PERIPH_WIRE.startTransmissionWIRE( PMIC_ADDRESS, WIRE_WRITE_FLAG );
    387e:	2200      	movs	r2, #0
    3880:	216b      	movs	r1, #107	; 0x6b
    3882:	0020      	movs	r0, r4
    3884:	f000 f97c 	bl	3b80 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  PERIPH_WIRE.sendDataMasterWIRE(PMIC_REG01);
    3888:	2101      	movs	r1, #1
    388a:	0020      	movs	r0, r4
    388c:	f000 f9ba 	bl	3c04 <_ZN6SERCOM18sendDataMasterWIREEh>
  PERIPH_WIRE.sendDataMasterWIRE(0x1B); // Charge Battery + Minimum System Voltage 3.5V
    3890:	211b      	movs	r1, #27
    3892:	0020      	movs	r0, r4
    3894:	f000 f9b6 	bl	3c04 <_ZN6SERCOM18sendDataMasterWIREEh>
  PERIPH_WIRE.prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    3898:	0020      	movs	r0, r4
    389a:	2103      	movs	r1, #3
    389c:	f000 f954 	bl	3b48 <_ZN6SERCOM22prepareCommandBitsWireEh>
  PERIPH_WIRE.disableWIRE();
    38a0:	0020      	movs	r0, r4
    38a2:	f000 f947 	bl	3b34 <_ZN6SERCOM11disableWIREEv>
  PERIPH_WIRE.initMasterWIRE(100000);
    38a6:	491d      	ldr	r1, [pc, #116]	; (391c <_Z11initVariantv+0xf4>)
    38a8:	0020      	movs	r0, r4
    38aa:	f000 fa43 	bl	3d34 <_ZN6SERCOM14initMasterWIREEm>
  PERIPH_WIRE.enableWIRE();
    38ae:	0020      	movs	r0, r4
    38b0:	f000 f92d 	bl	3b0e <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(PIN_WIRE_SDA, g_APinDescription[PIN_WIRE_SDA].ulPinType);
    38b4:	2103      	movs	r1, #3
    38b6:	200b      	movs	r0, #11
    38b8:	f7ff ff58 	bl	376c <pinPeripheral>
  pinPeripheral(PIN_WIRE_SCL, g_APinDescription[PIN_WIRE_SCL].ulPinType);
    38bc:	2103      	movs	r1, #3
    38be:	200c      	movs	r0, #12
    38c0:	f7ff ff54 	bl	376c <pinPeripheral>
  PERIPH_WIRE.startTransmissionWIRE( PMIC_ADDRESS, WIRE_WRITE_FLAG );
    38c4:	2200      	movs	r2, #0
    38c6:	216b      	movs	r1, #107	; 0x6b
    38c8:	0020      	movs	r0, r4
    38ca:	f000 f959 	bl	3b80 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  PERIPH_WIRE.sendDataMasterWIRE(PMIC_REG07);
    38ce:	2107      	movs	r1, #7
    38d0:	0020      	movs	r0, r4
    38d2:	f000 f997 	bl	3c04 <_ZN6SERCOM18sendDataMasterWIREEh>
  PERIPH_WIRE.sendDataMasterWIRE(0x0B | (disabled ? 0x20 : 0x00));
    38d6:	2396      	movs	r3, #150	; 0x96
    38d8:	212b      	movs	r1, #43	; 0x2b
    38da:	009b      	lsls	r3, r3, #2
    38dc:	429d      	cmp	r5, r3
    38de:	d900      	bls.n	38e2 <_Z11initVariantv+0xba>
    38e0:	3920      	subs	r1, #32
    38e2:	0020      	movs	r0, r4
    38e4:	f000 f98e 	bl	3c04 <_ZN6SERCOM18sendDataMasterWIREEh>
  PERIPH_WIRE.prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    38e8:	2103      	movs	r1, #3
    38ea:	0020      	movs	r0, r4
    38ec:	f000 f92c 	bl	3b48 <_ZN6SERCOM22prepareCommandBitsWireEh>
  PERIPH_WIRE.disableWIRE();
    38f0:	0020      	movs	r0, r4
    38f2:	f000 f91f 	bl	3b34 <_ZN6SERCOM11disableWIREEv>
  }
  disable_battery_fet(!batteryPresent);
#endif

  // NINA - SPI boot
  pinMode(NINA_GPIO0, OUTPUT);
    38f6:	2101      	movs	r1, #1
    38f8:	201e      	movs	r0, #30
    38fa:	f7ff febf 	bl	367c <pinMode>
  digitalWrite(NINA_GPIO0, HIGH);
    38fe:	2101      	movs	r1, #1
    3900:	201e      	movs	r0, #30
    3902:	f7ff ff07 	bl	3714 <digitalWrite>

  // disable NINA
  pinMode(NINA_RESETN, OUTPUT);
    3906:	2101      	movs	r1, #1
    3908:	201f      	movs	r0, #31
    390a:	f7ff feb7 	bl	367c <pinMode>
  digitalWrite(NINA_RESETN, HIGH);
    390e:	2101      	movs	r1, #1
    3910:	201f      	movs	r0, #31
    3912:	f7ff feff 	bl	3714 <digitalWrite>
}
    3916:	bd70      	pop	{r4, r5, r6, pc}
    3918:	20000b28 	.word	0x20000b28
    391c:	000186a0 	.word	0x000186a0

00003920 <SERCOM5_Handler>:

// Serial1
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);

void SERCOM5_Handler()
{
    3920:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    3922:	4802      	ldr	r0, [pc, #8]	; (392c <SERCOM5_Handler+0xc>)
    3924:	f000 fbb5 	bl	4092 <_ZN4Uart10IrqHandlerEv>
}
    3928:	bd10      	pop	{r4, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	200006a8 	.word	0x200006a8

00003930 <SERCOM4_Handler>:

// Serial2
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);

void SERCOM4_Handler()
{
    3930:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    3932:	4802      	ldr	r0, [pc, #8]	; (393c <SERCOM4_Handler+0xc>)
    3934:	f000 fbad 	bl	4092 <_ZN4Uart10IrqHandlerEv>
}
    3938:	bd10      	pop	{r4, pc}
    393a:	46c0      	nop			; (mov r8, r8)
    393c:	200008e4 	.word	0x200008e4

00003940 <_GLOBAL__sub_I_g_APinDescription>:
    3940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
SERCOM sercom0(SERCOM0);
    3942:	4919      	ldr	r1, [pc, #100]	; (39a8 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    3944:	4819      	ldr	r0, [pc, #100]	; (39ac <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    3946:	f000 f853 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    394a:	4919      	ldr	r1, [pc, #100]	; (39b0 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    394c:	4819      	ldr	r0, [pc, #100]	; (39b4 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    394e:	f000 f84f 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    3952:	4919      	ldr	r1, [pc, #100]	; (39b8 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    3954:	4819      	ldr	r0, [pc, #100]	; (39bc <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    3956:	f000 f84b 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    395a:	4919      	ldr	r1, [pc, #100]	; (39c0 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    395c:	4819      	ldr	r0, [pc, #100]	; (39c4 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    395e:	f000 f847 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    3962:	4c19      	ldr	r4, [pc, #100]	; (39c8 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    3964:	4919      	ldr	r1, [pc, #100]	; (39cc <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    3966:	0020      	movs	r0, r4
    3968:	f000 f842 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    396c:	4e18      	ldr	r6, [pc, #96]	; (39d0 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    396e:	4919      	ldr	r1, [pc, #100]	; (39d4 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    3970:	0030      	movs	r0, r6
    3972:	f000 f83d 	bl	39f0 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1(&sercom5, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX);
    3976:	2501      	movs	r5, #1
    3978:	2303      	movs	r3, #3
    397a:	0031      	movs	r1, r6
    397c:	9501      	str	r5, [sp, #4]
    397e:	9300      	str	r3, [sp, #0]
    3980:	220d      	movs	r2, #13
    3982:	330b      	adds	r3, #11
    3984:	4814      	ldr	r0, [pc, #80]	; (39d8 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    3986:	f000 fb19 	bl	3fbc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2(&sercom4, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX, PIN_SERIAL2_RTS, PIN_SERIAL2_CTS);
    398a:	231d      	movs	r3, #29
    398c:	9303      	str	r3, [sp, #12]
    398e:	3b01      	subs	r3, #1
    3990:	9302      	str	r3, [sp, #8]
    3992:	3b1a      	subs	r3, #26
    3994:	9301      	str	r3, [sp, #4]
    3996:	9500      	str	r5, [sp, #0]
    3998:	3318      	adds	r3, #24
    399a:	221b      	movs	r2, #27
    399c:	0021      	movs	r1, r4
    399e:	480f      	ldr	r0, [pc, #60]	; (39dc <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    39a0:	f000 fac8 	bl	3f34 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
}
    39a4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	42000800 	.word	0x42000800
    39ac:	20000b20 	.word	0x20000b20
    39b0:	42000c00 	.word	0x42000c00
    39b4:	20000b24 	.word	0x20000b24
    39b8:	42001000 	.word	0x42001000
    39bc:	20000b28 	.word	0x20000b28
    39c0:	42001400 	.word	0x42001400
    39c4:	20000b2c 	.word	0x20000b2c
    39c8:	20000b30 	.word	0x20000b30
    39cc:	42001800 	.word	0x42001800
    39d0:	20000b34 	.word	0x20000b34
    39d4:	42001c00 	.word	0x42001c00
    39d8:	200006a8 	.word	0x200006a8
    39dc:	200008e4 	.word	0x200008e4

000039e0 <_Znwj>:
    39e0:	b510      	push	{r4, lr}
    39e2:	f000 ff89 	bl	48f8 <malloc>
    39e6:	bd10      	pop	{r4, pc}

000039e8 <_ZdlPv>:
    39e8:	b510      	push	{r4, lr}
    39ea:	f000 ff8f 	bl	490c <free>
    39ee:	bd10      	pop	{r4, pc}

000039f0 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    39f0:	6001      	str	r1, [r0, #0]
}
    39f2:	4770      	bx	lr

000039f4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f6:	ac05      	add	r4, sp, #20
    39f8:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    39fa:	6804      	ldr	r4, [r0, #0]
    39fc:	1e98      	subs	r0, r3, #2
    39fe:	1e47      	subs	r7, r0, #1
    3a00:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    3a02:	6826      	ldr	r6, [r4, #0]
    3a04:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    3a06:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    3a08:	4332      	orrs	r2, r6
    3a0a:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    3a0c:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    3a0e:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    3a10:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    3a12:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    3a14:	6862      	ldr	r2, [r4, #4]
    3a16:	4329      	orrs	r1, r5
    3a18:	2000      	movs	r0, #0
    3a1a:	2b02      	cmp	r3, #2
    3a1c:	d000      	beq.n	3a20 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    3a1e:	0358      	lsls	r0, r3, #13
    3a20:	4311      	orrs	r1, r2
    3a22:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    3a24:	6061      	str	r1, [r4, #4]
}
    3a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a28 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    3a28:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    3a2a:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    3a2c:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    3a2e:	03a4      	lsls	r4, r4, #14
    3a30:	6818      	ldr	r0, [r3, #0]
    3a32:	0512      	lsls	r2, r2, #20
    3a34:	4022      	ands	r2, r4
    3a36:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    3a38:	20c0      	movs	r0, #192	; 0xc0
    3a3a:	0409      	lsls	r1, r1, #16
    3a3c:	0280      	lsls	r0, r0, #10
    3a3e:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    3a40:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    3a42:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    3a44:	685a      	ldr	r2, [r3, #4]
    3a46:	4310      	orrs	r0, r2
    3a48:	6058      	str	r0, [r3, #4]
}
    3a4a:	bd10      	pop	{r4, pc}

00003a4c <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    3a4c:	2201      	movs	r2, #1
    3a4e:	6803      	ldr	r3, [r0, #0]
    3a50:	6819      	ldr	r1, [r3, #0]
    3a52:	430a      	orrs	r2, r1
    3a54:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    3a56:	681a      	ldr	r2, [r3, #0]
    3a58:	07d2      	lsls	r2, r2, #31
    3a5a:	d4fc      	bmi.n	3a56 <_ZN6SERCOM9resetUARTEv+0xa>
    3a5c:	69da      	ldr	r2, [r3, #28]
    3a5e:	07d2      	lsls	r2, r2, #31
    3a60:	d4f9      	bmi.n	3a56 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    3a62:	4770      	bx	lr

00003a64 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    3a64:	2202      	movs	r2, #2
    3a66:	6803      	ldr	r3, [r0, #0]
    3a68:	6819      	ldr	r1, [r3, #0]
    3a6a:	430a      	orrs	r2, r1
    3a6c:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    3a6e:	69da      	ldr	r2, [r3, #28]
    3a70:	0792      	lsls	r2, r2, #30
    3a72:	d4fc      	bmi.n	3a6e <_ZN6SERCOM10enableUARTEv+0xa>
}
    3a74:	4770      	bx	lr

00003a76 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    3a76:	6803      	ldr	r3, [r0, #0]
    3a78:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    3a7a:	07d2      	lsls	r2, r2, #31
    3a7c:	d402      	bmi.n	3a84 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    3a7e:	7e1a      	ldrb	r2, [r3, #24]
    3a80:	0792      	lsls	r2, r2, #30
    3a82:	d5fc      	bpl.n	3a7e <_ZN6SERCOM9flushUARTEv+0x8>
}
    3a84:	4770      	bx	lr

00003a86 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    3a86:	2200      	movs	r2, #0
    3a88:	6803      	ldr	r3, [r0, #0]
    3a8a:	835a      	strh	r2, [r3, #26]
}
    3a8c:	4770      	bx	lr

00003a8e <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    3a8e:	6803      	ldr	r3, [r0, #0]
    3a90:	7e18      	ldrb	r0, [r3, #24]
    3a92:	0740      	lsls	r0, r0, #29
    3a94:	0fc0      	lsrs	r0, r0, #31
}
    3a96:	4770      	bx	lr

00003a98 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    3a98:	6803      	ldr	r3, [r0, #0]
    3a9a:	7e18      	ldrb	r0, [r3, #24]
    3a9c:	09c0      	lsrs	r0, r0, #7
}
    3a9e:	4770      	bx	lr

00003aa0 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    3aa0:	2380      	movs	r3, #128	; 0x80
    3aa2:	6802      	ldr	r2, [r0, #0]
    3aa4:	425b      	negs	r3, r3
    3aa6:	7e11      	ldrb	r1, [r2, #24]
    3aa8:	430b      	orrs	r3, r1
    3aaa:	7613      	strb	r3, [r2, #24]
}
    3aac:	4770      	bx	lr

00003aae <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    3aae:	6803      	ldr	r3, [r0, #0]
    3ab0:	8b58      	ldrh	r0, [r3, #26]
    3ab2:	0780      	lsls	r0, r0, #30
    3ab4:	0fc0      	lsrs	r0, r0, #31
}
    3ab6:	4770      	bx	lr

00003ab8 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    3ab8:	2302      	movs	r3, #2
    3aba:	6802      	ldr	r2, [r0, #0]
    3abc:	8b51      	ldrh	r1, [r2, #26]
    3abe:	430b      	orrs	r3, r1
    3ac0:	8353      	strh	r3, [r2, #26]
}
    3ac2:	4770      	bx	lr

00003ac4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    3ac4:	6803      	ldr	r3, [r0, #0]
    3ac6:	7e18      	ldrb	r0, [r3, #24]
    3ac8:	07c0      	lsls	r0, r0, #31
    3aca:	0fc0      	lsrs	r0, r0, #31
}
    3acc:	4770      	bx	lr

00003ace <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    3ace:	6803      	ldr	r3, [r0, #0]
    3ad0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    3ad2:	b2c0      	uxtb	r0, r0
}
    3ad4:	4770      	bx	lr

00003ad6 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    3ad6:	6803      	ldr	r3, [r0, #0]
    3ad8:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    3ada:	07d2      	lsls	r2, r2, #31
    3adc:	d5fc      	bpl.n	3ad8 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    3ade:	b289      	uxth	r1, r1
  return 1;
}
    3ae0:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    3ae2:	8519      	strh	r1, [r3, #40]	; 0x28
}
    3ae4:	4770      	bx	lr

00003ae6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3ae6:	2201      	movs	r2, #1
    3ae8:	6803      	ldr	r3, [r0, #0]
    3aea:	759a      	strb	r2, [r3, #22]
}
    3aec:	4770      	bx	lr

00003aee <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    3aee:	2201      	movs	r2, #1
    3af0:	6803      	ldr	r3, [r0, #0]
    3af2:	751a      	strb	r2, [r3, #20]
}
    3af4:	4770      	bx	lr

00003af6 <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    3af6:	2201      	movs	r2, #1
    3af8:	6803      	ldr	r3, [r0, #0]
    3afa:	6819      	ldr	r1, [r3, #0]
    3afc:	430a      	orrs	r2, r1
    3afe:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    3b00:	681a      	ldr	r2, [r3, #0]
    3b02:	07d2      	lsls	r2, r2, #31
    3b04:	d4fc      	bmi.n	3b00 <_ZN6SERCOM9resetWIREEv+0xa>
    3b06:	69da      	ldr	r2, [r3, #28]
    3b08:	07d2      	lsls	r2, r2, #31
    3b0a:	d4f9      	bmi.n	3b00 <_ZN6SERCOM9resetWIREEv+0xa>
}
    3b0c:	4770      	bx	lr

00003b0e <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    3b0e:	2202      	movs	r2, #2
    3b10:	6803      	ldr	r3, [r0, #0]
    3b12:	6819      	ldr	r1, [r3, #0]
    3b14:	430a      	orrs	r2, r1
    3b16:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    3b18:	69da      	ldr	r2, [r3, #28]
    3b1a:	0792      	lsls	r2, r2, #30
    3b1c:	d4fc      	bmi.n	3b18 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    3b1e:	2130      	movs	r1, #48	; 0x30
    3b20:	8b5a      	ldrh	r2, [r3, #26]
    3b22:	438a      	bics	r2, r1
    3b24:	0011      	movs	r1, r2
    3b26:	2210      	movs	r2, #16
    3b28:	430a      	orrs	r2, r1
    3b2a:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    3b2c:	69da      	ldr	r2, [r3, #28]
    3b2e:	0752      	lsls	r2, r2, #29
    3b30:	d4fc      	bmi.n	3b2c <_ZN6SERCOM10enableWIREEv+0x1e>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    3b32:	4770      	bx	lr

00003b34 <_ZN6SERCOM11disableWIREEv>:
void SERCOM::disableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 0 ;
    3b34:	2102      	movs	r1, #2
    3b36:	6803      	ldr	r3, [r0, #0]
    3b38:	681a      	ldr	r2, [r3, #0]
    3b3a:	438a      	bics	r2, r1
    3b3c:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    3b3e:	69da      	ldr	r2, [r3, #28]
    3b40:	0792      	lsls	r2, r2, #30
    3b42:	d4fc      	bmi.n	3b3e <_ZN6SERCOM11disableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }
}
    3b44:	4770      	bx	lr
	...

00003b48 <_ZN6SERCOM22prepareCommandBitsWireEh>:
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    3b48:	6803      	ldr	r3, [r0, #0]
{
    3b4a:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    3b4c:	6818      	ldr	r0, [r3, #0]
    3b4e:	2203      	movs	r2, #3
    3b50:	06c0      	lsls	r0, r0, #27
    3b52:	0f40      	lsrs	r0, r0, #29
    3b54:	4c09      	ldr	r4, [pc, #36]	; (3b7c <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    3b56:	2805      	cmp	r0, #5
    3b58:	d109      	bne.n	3b6e <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    3b5a:	6858      	ldr	r0, [r3, #4]
    3b5c:	4011      	ands	r1, r2
    3b5e:	0409      	lsls	r1, r1, #16
    3b60:	4020      	ands	r0, r4
    3b62:	4301      	orrs	r1, r0
    3b64:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    3b66:	69da      	ldr	r2, [r3, #28]
    3b68:	0752      	lsls	r2, r2, #29
    3b6a:	d4fc      	bmi.n	3b66 <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    3b6c:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    3b6e:	6858      	ldr	r0, [r3, #4]
    3b70:	4011      	ands	r1, r2
    3b72:	0409      	lsls	r1, r1, #16
    3b74:	4020      	ands	r0, r4
    3b76:	4301      	orrs	r1, r0
    3b78:	6059      	str	r1, [r3, #4]
}
    3b7a:	e7f7      	b.n	3b6c <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    3b7c:	fffcffff 	.word	0xfffcffff

00003b80 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
{
    3b80:	b570      	push	{r4, r5, r6, lr}
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    3b82:	6803      	ldr	r3, [r0, #0]
{
    3b84:	0004      	movs	r4, r0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    3b86:	8b58      	ldrh	r0, [r3, #26]
    3b88:	0680      	lsls	r0, r0, #26
    3b8a:	0f80      	lsrs	r0, r0, #30
  if(!isBusOwnerWIRE())
    3b8c:	2802      	cmp	r0, #2
    3b8e:	d00e      	beq.n	3bae <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
}

bool SERCOM::isBusBusyWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    3b90:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    3b92:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    3b94:	06ad      	lsls	r5, r5, #26
    3b96:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    3b98:	2d03      	cmp	r5, #3
    3b9a:	d032      	beq.n	3c02 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
    3b9c:	8b58      	ldrh	r0, [r3, #26]
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    3b9e:	0780      	lsls	r0, r0, #30
    3ba0:	d505      	bpl.n	3bae <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    3ba2:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    3ba4:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    3ba6:	06ad      	lsls	r5, r5, #26
    3ba8:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    3baa:	2d01      	cmp	r5, #1
    3bac:	d129      	bne.n	3c02 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  sercom->I2CM.ADDR.bit.ADDR = address;
    3bae:	6a58      	ldr	r0, [r3, #36]	; 0x24
  address = (address << 0x1ul) | flag;
    3bb0:	0049      	lsls	r1, r1, #1
    3bb2:	4311      	orrs	r1, r2
  sercom->I2CM.ADDR.bit.ADDR = address;
    3bb4:	0ac0      	lsrs	r0, r0, #11
  address = (address << 0x1ul) | flag;
    3bb6:	b2c9      	uxtb	r1, r1
  sercom->I2CM.ADDR.bit.ADDR = address;
    3bb8:	02c0      	lsls	r0, r0, #11
    3bba:	4308      	orrs	r0, r1
    3bbc:	6258      	str	r0, [r3, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    3bbe:	2a00      	cmp	r2, #0
    3bc0:	d113      	bne.n	3bea <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
    while( !sercom->I2CM.INTFLAG.bit.MB )
    3bc2:	7e1a      	ldrb	r2, [r3, #24]
    3bc4:	07d2      	lsls	r2, r2, #31
    3bc6:	d5fc      	bpl.n	3bc2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x42>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    3bc8:	8b5b      	ldrh	r3, [r3, #26]
    3bca:	069b      	lsls	r3, r3, #26
    3bcc:	0f9b      	lsrs	r3, r3, #30
    if(!isBusOwnerWIRE())
    3bce:	2b02      	cmp	r3, #2
    3bd0:	d004      	beq.n	3bdc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
      startTransmissionWIRE(address >> 1, flag);
    3bd2:	0849      	lsrs	r1, r1, #1
    3bd4:	2200      	movs	r2, #0
    3bd6:	0020      	movs	r0, r4
    3bd8:	f7ff ffd2 	bl	3b80 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  if(sercom->I2CM.STATUS.bit.RXNACK)
    3bdc:	6823      	ldr	r3, [r4, #0]
    3bde:	8b58      	ldrh	r0, [r3, #26]
    3be0:	0740      	lsls	r0, r0, #29
    3be2:	0fc3      	lsrs	r3, r0, #31
    3be4:	2001      	movs	r0, #1
    3be6:	4058      	eors	r0, r3
    3be8:	e00b      	b.n	3c02 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
    while( !sercom->I2CM.INTFLAG.bit.SB )
    3bea:	7e18      	ldrb	r0, [r3, #24]
    3bec:	0780      	lsls	r0, r0, #30
    3bee:	0fc0      	lsrs	r0, r0, #31
    3bf0:	d1f4      	bne.n	3bdc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
        if (sercom->I2CM.INTFLAG.bit.MB) {
    3bf2:	7e1a      	ldrb	r2, [r3, #24]
    3bf4:	07d2      	lsls	r2, r2, #31
    3bf6:	d5f8      	bpl.n	3bea <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    3bf8:	22c0      	movs	r2, #192	; 0xc0
    3bfa:	6859      	ldr	r1, [r3, #4]
    3bfc:	0292      	lsls	r2, r2, #10
    3bfe:	430a      	orrs	r2, r1
    3c00:	605a      	str	r2, [r3, #4]
}
    3c02:	bd70      	pop	{r4, r5, r6, pc}

00003c04 <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
    3c04:	6803      	ldr	r3, [r0, #0]
    3c06:	001a      	movs	r2, r3
    3c08:	3228      	adds	r2, #40	; 0x28
    3c0a:	7011      	strb	r1, [r2, #0]
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    3c0c:	7e18      	ldrb	r0, [r3, #24]
    3c0e:	07c0      	lsls	r0, r0, #31
    3c10:	0fc0      	lsrs	r0, r0, #31
    3c12:	d103      	bne.n	3c1c <_ZN6SERCOM18sendDataMasterWIREEh+0x18>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    3c14:	8b5a      	ldrh	r2, [r3, #26]
    3c16:	07d2      	lsls	r2, r2, #31
    3c18:	d5f8      	bpl.n	3c0c <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
}
    3c1a:	4770      	bx	lr
  if(sercom->I2CM.STATUS.bit.RXNACK)
    3c1c:	8b58      	ldrh	r0, [r3, #26]
    3c1e:	0740      	lsls	r0, r0, #29
    3c20:	0fc3      	lsrs	r3, r0, #31
    3c22:	2001      	movs	r0, #1
    3c24:	4058      	eors	r0, r3
    3c26:	e7f8      	b.n	3c1a <_ZN6SERCOM18sendDataMasterWIREEh+0x16>

00003c28 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    3c28:	6803      	ldr	r3, [r0, #0]
    3c2a:	4a21      	ldr	r2, [pc, #132]	; (3cb0 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    3c2c:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    3c2e:	4293      	cmp	r3, r2
    3c30:	d011      	beq.n	3c56 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    3c32:	4a20      	ldr	r2, [pc, #128]	; (3cb4 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    3c34:	4293      	cmp	r3, r2
    3c36:	d02f      	beq.n	3c98 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    3c38:	4a1f      	ldr	r2, [pc, #124]	; (3cb8 <_ZN6SERCOM13initClockNVICEv+0x90>)
    3c3a:	4293      	cmp	r3, r2
    3c3c:	d02f      	beq.n	3c9e <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    3c3e:	4a1f      	ldr	r2, [pc, #124]	; (3cbc <_ZN6SERCOM13initClockNVICEv+0x94>)
    3c40:	4293      	cmp	r3, r2
    3c42:	d02f      	beq.n	3ca4 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    3c44:	4a1e      	ldr	r2, [pc, #120]	; (3cc0 <_ZN6SERCOM13initClockNVICEv+0x98>)
    3c46:	4293      	cmp	r3, r2
    3c48:	d02f      	beq.n	3caa <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    3c4a:	4a1e      	ldr	r2, [pc, #120]	; (3cc4 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    3c4c:	4293      	cmp	r3, r2
    3c4e:	d122      	bne.n	3c96 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    3c50:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    3c52:	2219      	movs	r2, #25
    3c54:	e001      	b.n	3c5a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    3c56:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    3c58:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c5a:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3c5c:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c5e:	4099      	lsls	r1, r3
    3c60:	4819      	ldr	r0, [pc, #100]	; (3cc8 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3c62:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c64:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3c66:	0899      	lsrs	r1, r3, #2
    3c68:	402b      	ands	r3, r5
    3c6a:	40ab      	lsls	r3, r5
    3c6c:	35fc      	adds	r5, #252	; 0xfc
    3c6e:	409d      	lsls	r5, r3
    3c70:	0089      	lsls	r1, r1, #2
    3c72:	1809      	adds	r1, r1, r0
    3c74:	00a4      	lsls	r4, r4, #2
    3c76:	5908      	ldr	r0, [r1, r4]
    3c78:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    3c7a:	25c0      	movs	r5, #192	; 0xc0
    3c7c:	409d      	lsls	r5, r3
    3c7e:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3c80:	4303      	orrs	r3, r0
    3c82:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    3c84:	2380      	movs	r3, #128	; 0x80
    3c86:	01db      	lsls	r3, r3, #7
    3c88:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    3c8a:	4b10      	ldr	r3, [pc, #64]	; (3ccc <_ZN6SERCOM13initClockNVICEv+0xa4>)
    3c8c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3c8e:	785a      	ldrb	r2, [r3, #1]
    3c90:	b252      	sxtb	r2, r2
    3c92:	2a00      	cmp	r2, #0
    3c94:	dbfb      	blt.n	3c8e <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    3c96:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    3c98:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    3c9a:	2215      	movs	r2, #21
    3c9c:	e7dd      	b.n	3c5a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    3c9e:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    3ca0:	2216      	movs	r2, #22
    3ca2:	e7da      	b.n	3c5a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    3ca4:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    3ca6:	2217      	movs	r2, #23
    3ca8:	e7d7      	b.n	3c5a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    3caa:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    3cac:	2218      	movs	r2, #24
    3cae:	e7d4      	b.n	3c5a <_ZN6SERCOM13initClockNVICEv+0x32>
    3cb0:	42000800 	.word	0x42000800
    3cb4:	42000c00 	.word	0x42000c00
    3cb8:	42001000 	.word	0x42001000
    3cbc:	42001400 	.word	0x42001400
    3cc0:	42001800 	.word	0x42001800
    3cc4:	42001c00 	.word	0x42001c00
    3cc8:	e000e100 	.word	0xe000e100
    3ccc:	40000c00 	.word	0x40000c00

00003cd0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    3cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cd2:	0004      	movs	r4, r0
    3cd4:	0016      	movs	r6, r2
    3cd6:	000f      	movs	r7, r1
    3cd8:	001d      	movs	r5, r3
  initClockNVIC();
    3cda:	f7ff ffa5 	bl	3c28 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    3cde:	0020      	movs	r0, r4
    3ce0:	f7ff feb4 	bl	3a4c <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    3ce4:	221c      	movs	r2, #28
    3ce6:	00bb      	lsls	r3, r7, #2
    3ce8:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    3cea:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    3cec:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    3cee:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    3cf0:	4313      	orrs	r3, r2
    3cf2:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    3cf4:	2384      	movs	r3, #132	; 0x84
    3cf6:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    3cf8:	2f01      	cmp	r7, #1
    3cfa:	d118      	bne.n	3d2e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    3cfc:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    3cfe:	2e01      	cmp	r6, #1
    3d00:	d000      	beq.n	3d04 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    3d02:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    3d04:	4b0a      	ldr	r3, [pc, #40]	; (3d30 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    3d06:	4369      	muls	r1, r5
    3d08:	6818      	ldr	r0, [r3, #0]
    3d0a:	00c0      	lsls	r0, r0, #3
    3d0c:	f000 fd44 	bl	4798 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    3d10:	2207      	movs	r2, #7
    3d12:	89a3      	ldrh	r3, [r4, #12]
    3d14:	4002      	ands	r2, r0
    3d16:	04db      	lsls	r3, r3, #19
    3d18:	0352      	lsls	r2, r2, #13
    3d1a:	0cdb      	lsrs	r3, r3, #19
    3d1c:	4313      	orrs	r3, r2
    3d1e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    3d20:	0403      	lsls	r3, r0, #16
    3d22:	89a0      	ldrh	r0, [r4, #12]
    3d24:	0cdb      	lsrs	r3, r3, #19
    3d26:	0b40      	lsrs	r0, r0, #13
    3d28:	0340      	lsls	r0, r0, #13
    3d2a:	4318      	orrs	r0, r3
    3d2c:	81a0      	strh	r0, [r4, #12]
}
    3d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d30:	20000004 	.word	0x20000004

00003d34 <_ZN6SERCOM14initMasterWIREEm>:
{
    3d34:	b570      	push	{r4, r5, r6, lr}
    3d36:	0005      	movs	r5, r0
    3d38:	000c      	movs	r4, r1
  initClockNVIC() ;
    3d3a:	f7ff ff75 	bl	3c28 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    3d3e:	0028      	movs	r0, r5
    3d40:	f7ff fed9 	bl	3af6 <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    3d44:	2314      	movs	r3, #20
    3d46:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    3d48:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    3d4a:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    3d4c:	4b0c      	ldr	r3, [pc, #48]	; (3d80 <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    3d4e:	681e      	ldr	r6, [r3, #0]
    3d50:	0030      	movs	r0, r6
    3d52:	f000 fd21 	bl	4798 <__udivsi3>
    3d56:	490b      	ldr	r1, [pc, #44]	; (3d84 <_ZN6SERCOM14initMasterWIREEm+0x50>)
    3d58:	0004      	movs	r4, r0
    3d5a:	0030      	movs	r0, r6
    3d5c:	f000 fd1c 	bl	4798 <__udivsi3>
    3d60:	237d      	movs	r3, #125	; 0x7d
    3d62:	21fa      	movs	r1, #250	; 0xfa
    3d64:	4358      	muls	r0, r3
    3d66:	00c9      	lsls	r1, r1, #3
    3d68:	f000 fd16 	bl	4798 <__udivsi3>
    3d6c:	23ff      	movs	r3, #255	; 0xff
    3d6e:	1a24      	subs	r4, r4, r0
    3d70:	68e8      	ldr	r0, [r5, #12]
    3d72:	3c05      	subs	r4, #5
    3d74:	401c      	ands	r4, r3
    3d76:	4398      	bics	r0, r3
    3d78:	4304      	orrs	r4, r0
    3d7a:	60ec      	str	r4, [r5, #12]
}
    3d7c:	bd70      	pop	{r4, r5, r6, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	20000004 	.word	0x20000004
    3d84:	000f4240 	.word	0x000f4240

00003d88 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3d88:	2001      	movs	r0, #1
    3d8a:	4770      	bx	lr

00003d8c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    3d8c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    3d8e:	6803      	ldr	r3, [r0, #0]
    3d90:	4a01      	ldr	r2, [pc, #4]	; (3d98 <_ZN4Uart5beginEm+0xc>)
    3d92:	6a1b      	ldr	r3, [r3, #32]
    3d94:	4798      	blx	r3
}
    3d96:	bd10      	pop	{r4, pc}
    3d98:	00000413 	.word	0x00000413

00003d9c <_ZN4Uart4peekEv>:
  if(_iTail == _iHead)
    3d9c:	0003      	movs	r3, r0
    3d9e:	33fc      	adds	r3, #252	; 0xfc
    3da0:	69d9      	ldr	r1, [r3, #28]
    3da2:	699a      	ldr	r2, [r3, #24]
    3da4:	4291      	cmp	r1, r2
    3da6:	d003      	beq.n	3db0 <_ZN4Uart4peekEv+0x14>
  return _aucBuffer[_iTail];
    3da8:	69db      	ldr	r3, [r3, #28]
    3daa:	18c0      	adds	r0, r0, r3
    3dac:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    3dae:	4770      	bx	lr
    return -1;
    3db0:	2001      	movs	r0, #1
    3db2:	4240      	negs	r0, r0
  return rxBuffer.peek();
    3db4:	e7fb      	b.n	3dae <_ZN4Uart4peekEv+0x12>

00003db6 <_ZN4Uart3endEv>:
{
    3db6:	b510      	push	{r4, lr}
    3db8:	0004      	movs	r4, r0
  sercom->resetUART();
    3dba:	6900      	ldr	r0, [r0, #16]
    3dbc:	f7ff fe46 	bl	3a4c <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    3dc0:	0022      	movs	r2, r4
    3dc2:	2300      	movs	r3, #0
    3dc4:	32fc      	adds	r2, #252	; 0xfc
    3dc6:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    3dc8:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    3dca:	2286      	movs	r2, #134	; 0x86
    3dcc:	0092      	lsls	r2, r2, #2
    3dce:	18a4      	adds	r4, r4, r2
    3dd0:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    3dd2:	60a3      	str	r3, [r4, #8]
}
    3dd4:	bd10      	pop	{r4, pc}

00003dd6 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    3dd6:	20f0      	movs	r0, #240	; 0xf0
    3dd8:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    3dda:	3930      	subs	r1, #48	; 0x30
    3ddc:	4248      	negs	r0, r1
    3dde:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    3de0:	4770      	bx	lr

00003de2 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    3de2:	23f0      	movs	r3, #240	; 0xf0
    3de4:	011b      	lsls	r3, r3, #4
    3de6:	4019      	ands	r1, r3
    3de8:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    3dea:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    3dec:	009b      	lsls	r3, r3, #2
    3dee:	4299      	cmp	r1, r3
    3df0:	d00a      	beq.n	3e08 <_ZN4Uart15extractCharSizeEt+0x26>
    3df2:	3301      	adds	r3, #1
    3df4:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    3df6:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    3df8:	4299      	cmp	r1, r3
    3dfa:	d005      	beq.n	3e08 <_ZN4Uart15extractCharSizeEt+0x26>
    3dfc:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    3dfe:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    3e00:	005b      	lsls	r3, r3, #1
    3e02:	4299      	cmp	r1, r3
    3e04:	d000      	beq.n	3e08 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3e06:	2000      	movs	r0, #0

  }
}
    3e08:	4770      	bx	lr

00003e0a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    3e0a:	200f      	movs	r0, #15
    3e0c:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    3e0e:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    3e10:	2901      	cmp	r1, #1
    3e12:	d003      	beq.n	3e1c <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    3e14:	3902      	subs	r1, #2
    3e16:	1e48      	subs	r0, r1, #1
    3e18:	4181      	sbcs	r1, r0
    3e1a:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    3e1c:	4770      	bx	lr
	...

00003e20 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3e20:	2389      	movs	r3, #137	; 0x89
{
    3e22:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3e24:	2618      	movs	r6, #24
{
    3e26:	b085      	sub	sp, #20
    3e28:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3e2a:	009b      	lsls	r3, r3, #2
{
    3e2c:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3e2e:	5cc0      	ldrb	r0, [r0, r3]
    3e30:	0033      	movs	r3, r6
    3e32:	2108      	movs	r1, #8
    3e34:	4343      	muls	r3, r0
    3e36:	4d32      	ldr	r5, [pc, #200]	; (3f00 <_ZN4Uart5beginEmt+0xe0>)
{
    3e38:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3e3a:	18eb      	adds	r3, r5, r3
    3e3c:	5659      	ldrsb	r1, [r3, r1]
    3e3e:	f7ff fc95 	bl	376c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    3e42:	4b30      	ldr	r3, [pc, #192]	; (3f04 <_ZN4Uart5beginEmt+0xe4>)
    3e44:	2108      	movs	r1, #8
    3e46:	5ce0      	ldrb	r0, [r4, r3]
    3e48:	0033      	movs	r3, r6
    3e4a:	4343      	muls	r3, r0
    3e4c:	18eb      	adds	r3, r5, r3
    3e4e:	5659      	ldrsb	r1, [r3, r1]
    3e50:	f7ff fc8c 	bl	376c <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    3e54:	4b2c      	ldr	r3, [pc, #176]	; (3f08 <_ZN4Uart5beginEmt+0xe8>)
    3e56:	5ce2      	ldrb	r2, [r4, r3]
    3e58:	9303      	str	r3, [sp, #12]
    3e5a:	2a02      	cmp	r2, #2
    3e5c:	d109      	bne.n	3e72 <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    3e5e:	3311      	adds	r3, #17
    3e60:	5ce0      	ldrb	r0, [r4, r3]
    3e62:	28ff      	cmp	r0, #255	; 0xff
    3e64:	d005      	beq.n	3e72 <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    3e66:	2108      	movs	r1, #8
    3e68:	4346      	muls	r6, r0
    3e6a:	19ae      	adds	r6, r5, r6
    3e6c:	5671      	ldrsb	r1, [r6, r1]
    3e6e:	f7ff fc7d 	bl	376c <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    3e72:	268a      	movs	r6, #138	; 0x8a
    3e74:	00b6      	lsls	r6, r6, #2
    3e76:	5da0      	ldrb	r0, [r4, r6]
    3e78:	28ff      	cmp	r0, #255	; 0xff
    3e7a:	d019      	beq.n	3eb0 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    3e7c:	2101      	movs	r1, #1
    3e7e:	f7ff fbfd 	bl	367c <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    3e82:	2218      	movs	r2, #24
    3e84:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3e86:	4921      	ldr	r1, [pc, #132]	; (3f0c <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    3e88:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3e8a:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3e8c:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3e8e:	01db      	lsls	r3, r3, #7
    3e90:	1858      	adds	r0, r3, r1
    3e92:	218b      	movs	r1, #139	; 0x8b
    3e94:	0089      	lsls	r1, r1, #2
    3e96:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    3e98:	491d      	ldr	r1, [pc, #116]	; (3f10 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3e9a:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    3e9c:	185b      	adds	r3, r3, r1
    3e9e:	218c      	movs	r1, #140	; 0x8c
    3ea0:	0089      	lsls	r1, r1, #2
    3ea2:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3ea4:	6869      	ldr	r1, [r5, #4]
    3ea6:	408a      	lsls	r2, r1
    3ea8:	218d      	movs	r1, #141	; 0x8d
    3eaa:	0089      	lsls	r1, r1, #2
    3eac:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    3eae:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    3eb0:	2201      	movs	r2, #1
    3eb2:	9b02      	ldr	r3, [sp, #8]
    3eb4:	0011      	movs	r1, r2
    3eb6:	6920      	ldr	r0, [r4, #16]
    3eb8:	f7ff ff0a 	bl	3cd0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    3ebc:	0039      	movs	r1, r7
    3ebe:	0020      	movs	r0, r4
    3ec0:	f7ff ff8f 	bl	3de2 <_ZN4Uart15extractCharSizeEt>
    3ec4:	0039      	movs	r1, r7
    3ec6:	0005      	movs	r5, r0
    3ec8:	0020      	movs	r0, r4
    3eca:	f7ff ff9e 	bl	3e0a <_ZN4Uart13extractParityEt>
    3ece:	0039      	movs	r1, r7
    3ed0:	0006      	movs	r6, r0
    3ed2:	0020      	movs	r0, r4
    3ed4:	f7ff ff7f 	bl	3dd6 <_ZN4Uart16extractNbStopBitEt>
    3ed8:	0033      	movs	r3, r6
    3eda:	9000      	str	r0, [sp, #0]
    3edc:	0029      	movs	r1, r5
    3ede:	6920      	ldr	r0, [r4, #16]
    3ee0:	2201      	movs	r2, #1
    3ee2:	f7ff fd87 	bl	39f4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    3ee6:	4b0b      	ldr	r3, [pc, #44]	; (3f14 <_ZN4Uart5beginEmt+0xf4>)
    3ee8:	6920      	ldr	r0, [r4, #16]
    3eea:	5ce2      	ldrb	r2, [r4, r3]
    3eec:	9b03      	ldr	r3, [sp, #12]
    3eee:	5ce1      	ldrb	r1, [r4, r3]
    3ef0:	f7ff fd9a 	bl	3a28 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    3ef4:	6920      	ldr	r0, [r4, #16]
    3ef6:	f7ff fdb5 	bl	3a64 <_ZN6SERCOM10enableUARTEv>
}
    3efa:	b005      	add	sp, #20
    3efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	00004b5c 	.word	0x00004b5c
    3f04:	00000225 	.word	0x00000225
    3f08:	00000227 	.word	0x00000227
    3f0c:	41004418 	.word	0x41004418
    3f10:	41004414 	.word	0x41004414
    3f14:	00000226 	.word	0x00000226

00003f18 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    3f18:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    3f1a:	b510      	push	{r4, lr}
    3f1c:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    3f1e:	0052      	lsls	r2, r2, #1
    3f20:	2100      	movs	r1, #0
    3f22:	f000 fd06 	bl	4932 <memset>
  _iHead = 0;
    3f26:	0023      	movs	r3, r4
    3f28:	2200      	movs	r2, #0
    3f2a:	33fc      	adds	r3, #252	; 0xfc
    3f2c:	605a      	str	r2, [r3, #4]
}
    3f2e:	0020      	movs	r0, r4
  _iTail = 0;
    3f30:	609a      	str	r2, [r3, #8]
}
    3f32:	bd10      	pop	{r4, pc}

00003f34 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f36:	b085      	sub	sp, #20
    3f38:	001d      	movs	r5, r3
    3f3a:	ab0a      	add	r3, sp, #40	; 0x28
    3f3c:	781b      	ldrb	r3, [r3, #0]
    3f3e:	0004      	movs	r4, r0
    3f40:	9300      	str	r3, [sp, #0]
    3f42:	ab0b      	add	r3, sp, #44	; 0x2c
    3f44:	781b      	ldrb	r3, [r3, #0]
    3f46:	0016      	movs	r6, r2
    3f48:	9301      	str	r3, [sp, #4]
    3f4a:	ab0c      	add	r3, sp, #48	; 0x30
    3f4c:	781b      	ldrb	r3, [r3, #0]
    3f4e:	000f      	movs	r7, r1
    3f50:	9302      	str	r3, [sp, #8]
    3f52:	ab0d      	add	r3, sp, #52	; 0x34
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	9303      	str	r3, [sp, #12]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f58:	2300      	movs	r3, #0
    3f5a:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3f5c:	23fa      	movs	r3, #250	; 0xfa
    3f5e:	009b      	lsls	r3, r3, #2
    3f60:	6083      	str	r3, [r0, #8]
    3f62:	4b12      	ldr	r3, [pc, #72]	; (3fac <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x78>)
    3f64:	3308      	adds	r3, #8
    3f66:	6003      	str	r3, [r0, #0]
    3f68:	3014      	adds	r0, #20
    3f6a:	f7ff ffd5 	bl	3f18 <_ZN11RingBufferNILi256EEC1Ev>
    3f6e:	0020      	movs	r0, r4
    3f70:	301d      	adds	r0, #29
    3f72:	30ff      	adds	r0, #255	; 0xff
    3f74:	f7ff ffd0 	bl	3f18 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    3f78:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    3f7a:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    3f7c:	009b      	lsls	r3, r3, #2
  sercom = _s;
    3f7e:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    3f80:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    3f82:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x7c>)
  uc_padRX = _padRX ;
    3f84:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    3f86:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    3f88:	4b0a      	ldr	r3, [pc, #40]	; (3fb4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x80>)
}
    3f8a:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    3f8c:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    3f8e:	466a      	mov	r2, sp
    3f90:	4b09      	ldr	r3, [pc, #36]	; (3fb8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x84>)
    3f92:	7912      	ldrb	r2, [r2, #4]
    3f94:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    3f96:	466a      	mov	r2, sp
    3f98:	7a12      	ldrb	r2, [r2, #8]
    3f9a:	3301      	adds	r3, #1
    3f9c:	54e2      	strb	r2, [r4, r3]
  uc_pinCTS = _pinCTS;
    3f9e:	466a      	mov	r2, sp
    3fa0:	7b12      	ldrb	r2, [r2, #12]
    3fa2:	3310      	adds	r3, #16
    3fa4:	54e2      	strb	r2, [r4, r3]
}
    3fa6:	b005      	add	sp, #20
    3fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	00004ebc 	.word	0x00004ebc
    3fb0:	00000225 	.word	0x00000225
    3fb4:	00000226 	.word	0x00000226
    3fb8:	00000227 	.word	0x00000227

00003fbc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fbe:	001d      	movs	r5, r3
    3fc0:	ab08      	add	r3, sp, #32
    3fc2:	781b      	ldrb	r3, [r3, #0]
    3fc4:	0004      	movs	r4, r0
    3fc6:	9300      	str	r3, [sp, #0]
    3fc8:	ab09      	add	r3, sp, #36	; 0x24
    3fca:	781b      	ldrb	r3, [r3, #0]
    3fcc:	0016      	movs	r6, r2
    3fce:	9301      	str	r3, [sp, #4]
    3fd0:	2300      	movs	r3, #0
    3fd2:	6043      	str	r3, [r0, #4]
    3fd4:	23fa      	movs	r3, #250	; 0xfa
    3fd6:	009b      	lsls	r3, r3, #2
    3fd8:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3fda:	4b11      	ldr	r3, [pc, #68]	; (4020 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3fdc:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3fde:	3308      	adds	r3, #8
    3fe0:	6003      	str	r3, [r0, #0]
    3fe2:	3014      	adds	r0, #20
    3fe4:	f7ff ff98 	bl	3f18 <_ZN11RingBufferNILi256EEC1Ev>
    3fe8:	0020      	movs	r0, r4
    3fea:	301d      	adds	r0, #29
    3fec:	30ff      	adds	r0, #255	; 0xff
    3fee:	f7ff ff93 	bl	3f18 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    3ff2:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    3ff4:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    3ff6:	009b      	lsls	r3, r3, #2
  sercom = _s;
    3ff8:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    3ffa:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    3ffc:	4b09      	ldr	r3, [pc, #36]	; (4024 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    3ffe:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    4000:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    4002:	4b09      	ldr	r3, [pc, #36]	; (4028 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    4004:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    4006:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    4008:	466a      	mov	r2, sp
    400a:	4b08      	ldr	r3, [pc, #32]	; (402c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    400c:	7912      	ldrb	r2, [r2, #4]
    400e:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    4010:	228a      	movs	r2, #138	; 0x8a
    4012:	3b29      	subs	r3, #41	; 0x29
    4014:	3bff      	subs	r3, #255	; 0xff
    4016:	0092      	lsls	r2, r2, #2
    4018:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    401a:	3210      	adds	r2, #16
    401c:	54a3      	strb	r3, [r4, r2]
}
    401e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4020:	00004ebc 	.word	0x00004ebc
    4024:	00000225 	.word	0x00000225
    4028:	00000226 	.word	0x00000226
    402c:	00000227 	.word	0x00000227

00004030 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    4030:	0003      	movs	r3, r0
    4032:	33fc      	adds	r3, #252	; 0xfc
    4034:	6858      	ldr	r0, [r3, #4]
    4036:	689b      	ldr	r3, [r3, #8]
    4038:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    403a:	d501      	bpl.n	4040 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    403c:	3001      	adds	r0, #1
    403e:	30ff      	adds	r0, #255	; 0xff
}
    4040:	4770      	bx	lr

00004042 <_ZN4Uart5flushEv>:
{
    4042:	b510      	push	{r4, lr}
    4044:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    4046:	0020      	movs	r0, r4
    4048:	301d      	adds	r0, #29
    404a:	30ff      	adds	r0, #255	; 0xff
    404c:	f7ff fff0 	bl	4030 <_ZN11RingBufferNILi256EE9availableEv>
    4050:	2800      	cmp	r0, #0
    4052:	d1f8      	bne.n	4046 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    4054:	6920      	ldr	r0, [r4, #16]
    4056:	f7ff fd0e 	bl	3a76 <_ZN6SERCOM9flushUARTEv>
}
    405a:	bd10      	pop	{r4, pc}

0000405c <_ZN4Uart9availableEv>:
{
    405c:	b510      	push	{r4, lr}
  return rxBuffer.available();
    405e:	3014      	adds	r0, #20
    4060:	f7ff ffe6 	bl	4030 <_ZN11RingBufferNILi256EE9availableEv>
}
    4064:	bd10      	pop	{r4, pc}

00004066 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    4066:	0003      	movs	r3, r0
    4068:	33fc      	adds	r3, #252	; 0xfc
    406a:	6859      	ldr	r1, [r3, #4]
    406c:	689a      	ldr	r2, [r3, #8]
    406e:	4291      	cmp	r1, r2
    4070:	db04      	blt.n	407c <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    4072:	685a      	ldr	r2, [r3, #4]
    4074:	6898      	ldr	r0, [r3, #8]
    4076:	1a80      	subs	r0, r0, r2
    4078:	30ff      	adds	r0, #255	; 0xff
}
    407a:	4770      	bx	lr
    return _iTail - _iHead - 1;
    407c:	6898      	ldr	r0, [r3, #8]
    407e:	685b      	ldr	r3, [r3, #4]
    4080:	1ac0      	subs	r0, r0, r3
    4082:	3801      	subs	r0, #1
    4084:	e7f9      	b.n	407a <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00004086 <_ZN4Uart17availableForWriteEv>:
{
    4086:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    4088:	301d      	adds	r0, #29
    408a:	30ff      	adds	r0, #255	; 0xff
    408c:	f7ff ffeb 	bl	4066 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    4090:	bd10      	pop	{r4, pc}

00004092 <_ZN4Uart10IrqHandlerEv>:
{
    4092:	b510      	push	{r4, lr}
    4094:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    4096:	6900      	ldr	r0, [r0, #16]
    4098:	f7ff fd09 	bl	3aae <_ZN6SERCOM16isFrameErrorUARTEv>
    409c:	2800      	cmp	r0, #0
    409e:	d005      	beq.n	40ac <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    40a0:	6920      	ldr	r0, [r4, #16]
    40a2:	f7ff fd14 	bl	3ace <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    40a6:	6920      	ldr	r0, [r4, #16]
    40a8:	f7ff fd06 	bl	3ab8 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    40ac:	6920      	ldr	r0, [r4, #16]
    40ae:	f7ff fcee 	bl	3a8e <_ZN6SERCOM17availableDataUARTEv>
    40b2:	2800      	cmp	r0, #0
    40b4:	d020      	beq.n	40f8 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    40b6:	6920      	ldr	r0, [r4, #16]
    40b8:	f7ff fd09 	bl	3ace <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    40bc:	0022      	movs	r2, r4
    40be:	32fc      	adds	r2, #252	; 0xfc
    40c0:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    40c2:	69d1      	ldr	r1, [r2, #28]
  return (uint32_t)(index + 1) % N;
    40c4:	3301      	adds	r3, #1
    40c6:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    40c8:	428b      	cmp	r3, r1
    40ca:	d003      	beq.n	40d4 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    40cc:	6991      	ldr	r1, [r2, #24]
    40ce:	1861      	adds	r1, r4, r1
    40d0:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    40d2:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    40d4:	238a      	movs	r3, #138	; 0x8a
    40d6:	009b      	lsls	r3, r3, #2
    40d8:	5ce3      	ldrb	r3, [r4, r3]
    40da:	2bff      	cmp	r3, #255	; 0xff
    40dc:	d00c      	beq.n	40f8 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    40de:	0020      	movs	r0, r4
    40e0:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    40e2:	f7ff ffc0 	bl	4066 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    40e6:	2809      	cmp	r0, #9
    40e8:	dc06      	bgt.n	40f8 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    40ea:	238b      	movs	r3, #139	; 0x8b
    40ec:	228d      	movs	r2, #141	; 0x8d
    40ee:	009b      	lsls	r3, r3, #2
    40f0:	0092      	lsls	r2, r2, #2
    40f2:	58e3      	ldr	r3, [r4, r3]
    40f4:	58a2      	ldr	r2, [r4, r2]
    40f6:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    40f8:	6920      	ldr	r0, [r4, #16]
    40fa:	f7ff fce3 	bl	3ac4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    40fe:	2800      	cmp	r0, #0
    4100:	d01a      	beq.n	4138 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    4102:	0020      	movs	r0, r4
    4104:	301d      	adds	r0, #29
    4106:	30ff      	adds	r0, #255	; 0xff
    4108:	f7ff ff92 	bl	4030 <_ZN11RingBufferNILi256EE9availableEv>
    410c:	2800      	cmp	r0, #0
    410e:	d022      	beq.n	4156 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    4110:	2386      	movs	r3, #134	; 0x86
    4112:	009b      	lsls	r3, r3, #2
    4114:	18e3      	adds	r3, r4, r3
    4116:	6899      	ldr	r1, [r3, #8]
    4118:	685a      	ldr	r2, [r3, #4]
    411a:	4291      	cmp	r1, r2
    411c:	d018      	beq.n	4150 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    411e:	218e      	movs	r1, #142	; 0x8e
    4120:	689a      	ldr	r2, [r3, #8]
    4122:	0049      	lsls	r1, r1, #1
    4124:	18a2      	adds	r2, r4, r2
    4126:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    4128:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    412a:	3201      	adds	r2, #1
    412c:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    412e:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    4130:	b2c9      	uxtb	r1, r1
    4132:	6920      	ldr	r0, [r4, #16]
    4134:	f7ff fccf 	bl	3ad6 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    4138:	6920      	ldr	r0, [r4, #16]
    413a:	f7ff fcad 	bl	3a98 <_ZN6SERCOM11isUARTErrorEv>
    413e:	2800      	cmp	r0, #0
    4140:	d005      	beq.n	414e <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    4142:	6920      	ldr	r0, [r4, #16]
    4144:	f7ff fcac 	bl	3aa0 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    4148:	6920      	ldr	r0, [r4, #16]
    414a:	f7ff fc9c 	bl	3a86 <_ZN6SERCOM15clearStatusUARTEv>
}
    414e:	bd10      	pop	{r4, pc}
    return -1;
    4150:	2101      	movs	r1, #1
    4152:	4249      	negs	r1, r1
    4154:	e7ec      	b.n	4130 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    4156:	6920      	ldr	r0, [r4, #16]
    4158:	f7ff fcc9 	bl	3aee <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    415c:	e7ec      	b.n	4138 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00004160 <_ZN4Uart5writeEh>:
{
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4164:	6900      	ldr	r0, [r0, #16]
{
    4166:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    4168:	f7ff fcac 	bl	3ac4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    416c:	2800      	cmp	r0, #0
    416e:	d124      	bne.n	41ba <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    4170:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    4172:	2386      	movs	r3, #134	; 0x86
    4174:	009b      	lsls	r3, r3, #2
    4176:	18e3      	adds	r3, r4, r3
    4178:	685a      	ldr	r2, [r3, #4]
    417a:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    417c:	3201      	adds	r2, #1
    417e:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    4180:	428a      	cmp	r2, r1
    4182:	d12f      	bne.n	41e4 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4184:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    4188:	07db      	lsls	r3, r3, #31
    418a:	d40d      	bmi.n	41a8 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    418c:	4b1e      	ldr	r3, [pc, #120]	; (4208 <_ZN4Uart5writeEh+0xa8>)
    418e:	685b      	ldr	r3, [r3, #4]
    4190:	05db      	lsls	r3, r3, #23
    4192:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    4194:	d0ed      	beq.n	4172 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    4196:	3b10      	subs	r3, #16
    4198:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    419a:	2b00      	cmp	r3, #0
    419c:	db19      	blt.n	41d2 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    419e:	089b      	lsrs	r3, r3, #2
    41a0:	33c0      	adds	r3, #192	; 0xc0
    41a2:	4a1a      	ldr	r2, [pc, #104]	; (420c <_ZN4Uart5writeEh+0xac>)
    41a4:	009b      	lsls	r3, r3, #2
    41a6:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    41a8:	6920      	ldr	r0, [r4, #16]
    41aa:	f7ff fc8b 	bl	3ac4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    41ae:	2800      	cmp	r0, #0
    41b0:	d0df      	beq.n	4172 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    41b2:	0020      	movs	r0, r4
    41b4:	f7ff ff6d 	bl	4092 <_ZN4Uart10IrqHandlerEv>
    41b8:	e7db      	b.n	4172 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    41ba:	0020      	movs	r0, r4
    41bc:	301d      	adds	r0, #29
    41be:	30ff      	adds	r0, #255	; 0xff
    41c0:	f7ff ff36 	bl	4030 <_ZN11RingBufferNILi256EE9availableEv>
    41c4:	2800      	cmp	r0, #0
    41c6:	d1d3      	bne.n	4170 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    41c8:	0029      	movs	r1, r5
    41ca:	6920      	ldr	r0, [r4, #16]
    41cc:	f7ff fc83 	bl	3ad6 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    41d0:	e017      	b.n	4202 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    41d2:	220f      	movs	r2, #15
    41d4:	4013      	ands	r3, r2
    41d6:	3b08      	subs	r3, #8
    41d8:	089b      	lsrs	r3, r3, #2
    41da:	4a0d      	ldr	r2, [pc, #52]	; (4210 <_ZN4Uart5writeEh+0xb0>)
    41dc:	009b      	lsls	r3, r3, #2
    41de:	189b      	adds	r3, r3, r2
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	e7e1      	b.n	41a8 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    41e4:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    41e6:	3201      	adds	r2, #1
    41e8:	4016      	ands	r6, r2
  if ( i != _iTail )
    41ea:	689a      	ldr	r2, [r3, #8]
    41ec:	4296      	cmp	r6, r2
    41ee:	d005      	beq.n	41fc <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    41f0:	218e      	movs	r1, #142	; 0x8e
    41f2:	685a      	ldr	r2, [r3, #4]
    41f4:	0049      	lsls	r1, r1, #1
    41f6:	18a2      	adds	r2, r4, r2
    41f8:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    41fa:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    41fc:	6920      	ldr	r0, [r4, #16]
    41fe:	f7ff fc72 	bl	3ae6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    4202:	2001      	movs	r0, #1
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	e000ed00 	.word	0xe000ed00
    420c:	e000e100 	.word	0xe000e100
    4210:	e000ed1c 	.word	0xe000ed1c

00004214 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    4214:	0003      	movs	r3, r0
    4216:	33fc      	adds	r3, #252	; 0xfc
    4218:	69d9      	ldr	r1, [r3, #28]
    421a:	699a      	ldr	r2, [r3, #24]
{
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	0004      	movs	r4, r0
    4220:	4291      	cmp	r1, r2
    4222:	d01a      	beq.n	425a <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    4224:	69da      	ldr	r2, [r3, #28]
    4226:	1882      	adds	r2, r0, r2
    4228:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    422a:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    422c:	3201      	adds	r2, #1
    422e:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    4230:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    4232:	238a      	movs	r3, #138	; 0x8a
    4234:	009b      	lsls	r3, r3, #2
    4236:	5ce3      	ldrb	r3, [r4, r3]
    4238:	2bff      	cmp	r3, #255	; 0xff
    423a:	d00c      	beq.n	4256 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    423c:	0020      	movs	r0, r4
    423e:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    4240:	f7ff ff11 	bl	4066 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    4244:	280a      	cmp	r0, #10
    4246:	dd06      	ble.n	4256 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    4248:	238c      	movs	r3, #140	; 0x8c
    424a:	228d      	movs	r2, #141	; 0x8d
    424c:	009b      	lsls	r3, r3, #2
    424e:	0092      	lsls	r2, r2, #2
    4250:	58e3      	ldr	r3, [r4, r3]
    4252:	58a2      	ldr	r2, [r4, r2]
    4254:	601a      	str	r2, [r3, #0]
}
    4256:	0028      	movs	r0, r5
    4258:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    425a:	2501      	movs	r5, #1
    425c:	426d      	negs	r5, r5
    425e:	e7e8      	b.n	4232 <_ZN4Uart4readEv+0x1e>

00004260 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
    4260:	2000      	movs	r0, #0
    4262:	4770      	bx	lr

00004264 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
    4264:	b408      	push	{r3}
    4266:	4b02      	ldr	r3, [pc, #8]	; (4270 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
    4268:	469c      	mov	ip, r3
    426a:	3810      	subs	r0, #16
    426c:	bc08      	pop	{r3}
    426e:	4760      	bx	ip
    4270:	00004261 	.word	0x00004261

00004274 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    4274:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    4276:	250f      	movs	r5, #15
    4278:	1dcb      	adds	r3, r1, #7
    427a:	3901      	subs	r1, #1
    427c:	0002      	movs	r2, r0
    427e:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    4280:	0014      	movs	r4, r2
		val = (val >> 4);
    4282:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    4284:	3430      	adds	r4, #48	; 0x30
    4286:	2a09      	cmp	r2, #9
    4288:	dd01      	ble.n	428e <_ZL5utox8mPc+0x1a>
    428a:	3237      	adds	r2, #55	; 0x37
    428c:	0014      	movs	r4, r2
    428e:	701c      	strb	r4, [r3, #0]
    4290:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    4292:	428b      	cmp	r3, r1
    4294:	d1f2      	bne.n	427c <_ZL5utox8mPc+0x8>
	}
}
    4296:	bd30      	pop	{r4, r5, pc}

00004298 <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
    4298:	b510      	push	{r4, lr}
    429a:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    429c:	4b0b      	ldr	r3, [pc, #44]	; (42cc <_ZN7Serial_12getShortNameEPc+0x34>)
    429e:	6818      	ldr	r0, [r3, #0]
    42a0:	f7ff ffe8 	bl	4274 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    42a4:	0021      	movs	r1, r4
    42a6:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <_ZN7Serial_12getShortNameEPc+0x38>)
    42a8:	3108      	adds	r1, #8
    42aa:	6818      	ldr	r0, [r3, #0]
    42ac:	f7ff ffe2 	bl	4274 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    42b0:	0021      	movs	r1, r4
    42b2:	4b08      	ldr	r3, [pc, #32]	; (42d4 <_ZN7Serial_12getShortNameEPc+0x3c>)
    42b4:	3110      	adds	r1, #16
    42b6:	6818      	ldr	r0, [r3, #0]
    42b8:	f7ff ffdc 	bl	4274 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    42bc:	0021      	movs	r1, r4
    42be:	4b06      	ldr	r3, [pc, #24]	; (42d8 <_ZN7Serial_12getShortNameEPc+0x40>)
    42c0:	3118      	adds	r1, #24
    42c2:	6818      	ldr	r0, [r3, #0]
    42c4:	f7ff ffd6 	bl	4274 <_ZL5utox8mPc>
	return 32;
}
    42c8:	2020      	movs	r0, #32
    42ca:	bd10      	pop	{r4, pc}
    42cc:	0080a00c 	.word	0x0080a00c
    42d0:	0080a040 	.word	0x0080a040
    42d4:	0080a044 	.word	0x0080a044
    42d8:	0080a048 	.word	0x0080a048

000042dc <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
    42dc:	b408      	push	{r3}
    42de:	4b02      	ldr	r3, [pc, #8]	; (42e8 <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
    42e0:	469c      	mov	ip, r3
    42e2:	3810      	subs	r0, #16
    42e4:	bc08      	pop	{r3}
    42e6:	4760      	bx	ip
    42e8:	00004299 	.word	0x00004299

000042ec <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
    42ec:	4770      	bx	lr
	...

000042f0 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
    42f0:	b408      	push	{r3}
    42f2:	4b02      	ldr	r3, [pc, #8]	; (42fc <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
    42f4:	469c      	mov	ip, r3
    42f6:	3810      	subs	r0, #16
    42f8:	bc08      	pop	{r3}
    42fa:	4760      	bx	ip
    42fc:	000042ed 	.word	0x000042ed

00004300 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    4300:	203f      	movs	r0, #63	; 0x3f
    4302:	4770      	bx	lr

00004304 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    4304:	b513      	push	{r0, r1, r4, lr}
    4306:	466b      	mov	r3, sp
	return write(&c, 1);
    4308:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    430a:	71d9      	strb	r1, [r3, #7]
    430c:	3307      	adds	r3, #7
	return write(&c, 1);
    430e:	6854      	ldr	r4, [r2, #4]
    4310:	0019      	movs	r1, r3
    4312:	2201      	movs	r2, #1
    4314:	47a0      	blx	r4
}
    4316:	bd16      	pop	{r1, r2, r4, pc}

00004318 <_ZN7Serial_12getInterfaceEPh>:
{
    4318:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
    431a:	780b      	ldrb	r3, [r1, #0]
{
    431c:	b095      	sub	sp, #84	; 0x54
	};
    431e:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
    4320:	3302      	adds	r3, #2
{
    4322:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
    4324:	700b      	strb	r3, [r1, #0]
	};
    4326:	2242      	movs	r2, #66	; 0x42
    4328:	2100      	movs	r1, #0
    432a:	0020      	movs	r0, r4
    432c:	f000 fb01 	bl	4932 <memset>
    4330:	2209      	movs	r2, #9
    4332:	2504      	movs	r5, #4
    4334:	7222      	strb	r2, [r4, #8]
    4336:	2204      	movs	r2, #4
    4338:	75a5      	strb	r5, [r4, #22]
    433a:	7262      	strb	r2, [r4, #9]
    433c:	2506      	movs	r5, #6
    433e:	2205      	movs	r2, #5
    4340:	2024      	movs	r0, #36	; 0x24
    4342:	ae02      	add	r6, sp, #8
    4344:	7665      	strb	r5, [r4, #25]
    4346:	7725      	strb	r5, [r4, #28]
    4348:	1995      	adds	r5, r2, r6
    434a:	74a0      	strb	r0, [r4, #18]
    434c:	75e0      	strb	r0, [r4, #23]
    434e:	76e0      	strb	r0, [r4, #27]
    4350:	77e8      	strb	r0, [r5, #31]
    4352:	0030      	movs	r0, r6
    4354:	2101      	movs	r1, #1
    4356:	3006      	adds	r0, #6
    4358:	77c1      	strb	r1, [r0, #31]
    435a:	0030      	movs	r0, r6
    435c:	3007      	adds	r0, #7
    435e:	77c1      	strb	r1, [r0, #31]
    4360:	a804      	add	r0, sp, #16
    4362:	77c1      	strb	r1, [r0, #31]
    4364:	2009      	movs	r0, #9
    4366:	7321      	strb	r1, [r4, #12]
    4368:	7561      	strb	r1, [r4, #21]
    436a:	1980      	adds	r0, r0, r6
    436c:	3106      	adds	r1, #6
    436e:	77c1      	strb	r1, [r0, #31]
    4370:	200a      	movs	r0, #10
    4372:	1980      	adds	r0, r0, r6
    4374:	77c2      	strb	r2, [r0, #31]
    4376:	2003      	movs	r0, #3
    4378:	4684      	mov	ip, r0
    437a:	4665      	mov	r5, ip
    437c:	a805      	add	r0, sp, #20
    437e:	77c5      	strb	r5, [r0, #31]
    4380:	202e      	movs	r0, #46	; 0x2e
    4382:	2710      	movs	r7, #16
    4384:	1980      	adds	r0, r0, r6
    4386:	7007      	strb	r7, [r0, #0]
    4388:	202f      	movs	r0, #47	; 0x2f
    438a:	2509      	movs	r5, #9
    438c:	2308      	movs	r3, #8
    438e:	1980      	adds	r0, r0, r6
    4390:	7005      	strb	r5, [r0, #0]
    4392:	2504      	movs	r5, #4
    4394:	7023      	strb	r3, [r4, #0]
    4396:	3303      	adds	r3, #3
    4398:	7063      	strb	r3, [r4, #1]
    439a:	a80e      	add	r0, sp, #56	; 0x38
    439c:	3b09      	subs	r3, #9
    439e:	70e3      	strb	r3, [r4, #3]
    43a0:	7123      	strb	r3, [r4, #4]
    43a2:	7163      	strb	r3, [r4, #5]
    43a4:	7363      	strb	r3, [r4, #13]
    43a6:	73a3      	strb	r3, [r4, #14]
    43a8:	7462      	strb	r2, [r4, #17]
    43aa:	7623      	strb	r3, [r4, #24]
    43ac:	76a2      	strb	r2, [r4, #26]
    43ae:	77e2      	strb	r2, [r4, #31]
    43b0:	7527      	strb	r7, [r4, #20]
    43b2:	8527      	strh	r7, [r4, #40]	; 0x28
    43b4:	7005      	strb	r5, [r0, #0]
    43b6:	2033      	movs	r0, #51	; 0x33
    43b8:	0035      	movs	r5, r6
    43ba:	1980      	adds	r0, r0, r6
    43bc:	260a      	movs	r6, #10
    43be:	7003      	strb	r3, [r0, #0]
    43c0:	a80f      	add	r0, sp, #60	; 0x3c
    43c2:	7006      	strb	r6, [r0, #0]
    43c4:	a810      	add	r0, sp, #64	; 0x40
    43c6:	7001      	strb	r1, [r0, #0]
    43c8:	2039      	movs	r0, #57	; 0x39
    43ca:	1940      	adds	r0, r0, r5
    43cc:	7002      	strb	r2, [r0, #0]
    43ce:	203b      	movs	r0, #59	; 0x3b
    43d0:	3635      	adds	r6, #53	; 0x35
    43d2:	1976      	adds	r6, r6, r5
    43d4:	7031      	strb	r1, [r6, #0]
    43d6:	a912      	add	r1, sp, #72	; 0x48
    43d8:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    43da:	2180      	movs	r1, #128	; 0x80
	};
    43dc:	323d      	adds	r2, #61	; 0x3d
    43de:	1940      	adds	r0, r0, r5
    43e0:	1952      	adds	r2, r2, r5
    43e2:	7003      	strb	r3, [r0, #0]
    43e4:	7013      	strb	r3, [r2, #0]
    43e6:	2040      	movs	r0, #64	; 0x40
    43e8:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    43ea:	4249      	negs	r1, r1
    43ec:	000e      	movs	r6, r1
	};
    43ee:	3341      	adds	r3, #65	; 0x41
    43f0:	195b      	adds	r3, r3, r5
    43f2:	7018      	strb	r0, [r3, #0]
    43f4:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    43f6:	9b01      	ldr	r3, [sp, #4]
	};
    43f8:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
    43fa:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    43fc:	9a01      	ldr	r2, [sp, #4]
	};
    43fe:	70a3      	strb	r3, [r4, #2]
    4400:	72a3      	strb	r3, [r4, #10]
    4402:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
    4404:	3301      	adds	r3, #1
    4406:	b2db      	uxtb	r3, r3
	};
    4408:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    440a:	7d52      	ldrb	r2, [r2, #21]
	};
    440c:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
    440e:	4316      	orrs	r6, r2
	};
    4410:	1940      	adds	r0, r0, r5
    4412:	77c6      	strb	r6, [r0, #31]
    4414:	2031      	movs	r0, #49	; 0x31
    4416:	1940      	adds	r0, r0, r5
    4418:	7003      	strb	r3, [r0, #0]
    441a:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
    441c:	1c50      	adds	r0, r2, #1
	};
    441e:	195b      	adds	r3, r3, r5
    4420:	7018      	strb	r0, [r3, #0]
    4422:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
    4424:	3202      	adds	r2, #2
    4426:	430a      	orrs	r2, r1
	};
    4428:	195b      	adds	r3, r3, r5
    442a:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
    442c:	0021      	movs	r1, r4
    442e:	2242      	movs	r2, #66	; 0x42
    4430:	4802      	ldr	r0, [pc, #8]	; (443c <_ZN7Serial_12getInterfaceEPh+0x124>)
    4432:	f7fe fdd1 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    4436:	b015      	add	sp, #84	; 0x54
    4438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	200000ec 	.word	0x200000ec

00004440 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
    4440:	b408      	push	{r3}
    4442:	4b02      	ldr	r3, [pc, #8]	; (444c <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
    4444:	469c      	mov	ip, r3
    4446:	3810      	subs	r0, #16
    4448:	bc08      	pop	{r3}
    444a:	4760      	bx	ip
    444c:	00004319 	.word	0x00004319

00004450 <_ZN7Serial_5setupER8USBSetup>:
{
    4450:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
    4452:	790a      	ldrb	r2, [r1, #4]
    4454:	7d03      	ldrb	r3, [r0, #20]
{
    4456:	000c      	movs	r4, r1
		return false;
    4458:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
    445a:	429a      	cmp	r2, r3
    445c:	d10b      	bne.n	4476 <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
    445e:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
    4460:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    4462:	2ba1      	cmp	r3, #161	; 0xa1
    4464:	d109      	bne.n	447a <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
    4466:	2e21      	cmp	r6, #33	; 0x21
    4468:	d105      	bne.n	4476 <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    446a:	2207      	movs	r2, #7
    446c:	491f      	ldr	r1, [pc, #124]	; (44ec <_ZN7Serial_5setupER8USBSetup+0x9c>)
    446e:	4820      	ldr	r0, [pc, #128]	; (44f0 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    4470:	f7fe fdb2 	bl	2fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    4474:	3501      	adds	r5, #1
}
    4476:	0028      	movs	r0, r5
    4478:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    447a:	2b21      	cmp	r3, #33	; 0x21
    447c:	d1fb      	bne.n	4476 <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
    447e:	2e20      	cmp	r6, #32
    4480:	d119      	bne.n	44b6 <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    4482:	2207      	movs	r2, #7
    4484:	4919      	ldr	r1, [pc, #100]	; (44ec <_ZN7Serial_5setupER8USBSetup+0x9c>)
    4486:	481a      	ldr	r0, [pc, #104]	; (44f0 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    4488:	f7fe fce8 	bl	2e5c <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
    448c:	4b17      	ldr	r3, [pc, #92]	; (44ec <_ZN7Serial_5setupER8USBSetup+0x9c>)
    448e:	781a      	ldrb	r2, [r3, #0]
    4490:	7859      	ldrb	r1, [r3, #1]
    4492:	0209      	lsls	r1, r1, #8
    4494:	4311      	orrs	r1, r2
    4496:	789a      	ldrb	r2, [r3, #2]
    4498:	0412      	lsls	r2, r2, #16
    449a:	4311      	orrs	r1, r2
    449c:	78da      	ldrb	r2, [r3, #3]
    449e:	0612      	lsls	r2, r2, #24
    44a0:	430a      	orrs	r2, r1
    44a2:	2196      	movs	r1, #150	; 0x96
    44a4:	00c9      	lsls	r1, r1, #3
    44a6:	428a      	cmp	r2, r1
    44a8:	d102      	bne.n	44b0 <_ZN7Serial_5setupER8USBSetup+0x60>
    44aa:	79db      	ldrb	r3, [r3, #7]
    44ac:	07db      	lsls	r3, r3, #31
    44ae:	d508      	bpl.n	44c2 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
    44b0:	f7fd ff0c 	bl	22cc <cancelReset>
    44b4:	e008      	b.n	44c8 <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    44b6:	2e22      	cmp	r6, #34	; 0x22
    44b8:	d10a      	bne.n	44d0 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
    44ba:	788a      	ldrb	r2, [r1, #2]
    44bc:	4b0b      	ldr	r3, [pc, #44]	; (44ec <_ZN7Serial_5setupER8USBSetup+0x9c>)
    44be:	71da      	strb	r2, [r3, #7]
    44c0:	e7e4      	b.n	448c <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
    44c2:	20fa      	movs	r0, #250	; 0xfa
    44c4:	f7fd fef8 	bl	22b8 <initiateReset>
			USBDevice.sendZlp(0);
    44c8:	2100      	movs	r1, #0
    44ca:	4809      	ldr	r0, [pc, #36]	; (44f0 <_ZN7Serial_5setupER8USBSetup+0xa0>)
    44cc:	f7fe fe9a 	bl	3204 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    44d0:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
    44d2:	2e23      	cmp	r6, #35	; 0x23
    44d4:	d1cf      	bne.n	4476 <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    44d6:	78e3      	ldrb	r3, [r4, #3]
    44d8:	78a2      	ldrb	r2, [r4, #2]
    44da:	021b      	lsls	r3, r3, #8
    44dc:	4313      	orrs	r3, r2
    44de:	4a05      	ldr	r2, [pc, #20]	; (44f4 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
    44e0:	2100      	movs	r1, #0
    44e2:	4803      	ldr	r0, [pc, #12]	; (44f0 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    44e4:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
    44e6:	f7fe fe8d 	bl	3204 <_ZN14USBDeviceClass7sendZlpEm>
    44ea:	e7c4      	b.n	4476 <_ZN7Serial_5setupER8USBSetup+0x26>
    44ec:	20000014 	.word	0x20000014
    44f0:	200000ec 	.word	0x200000ec
    44f4:	20000010 	.word	0x20000010

000044f8 <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
    44f8:	b408      	push	{r3}
    44fa:	4b02      	ldr	r3, [pc, #8]	; (4504 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
    44fc:	469c      	mov	ip, r3
    44fe:	3810      	subs	r0, #16
    4500:	bc08      	pop	{r3}
    4502:	4760      	bx	ip
    4504:	00004451 	.word	0x00004451

00004508 <_ZN7Serial_9availableEv>:
{
    4508:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
    450a:	7d41      	ldrb	r1, [r0, #21]
    450c:	6a00      	ldr	r0, [r0, #32]
    450e:	3101      	adds	r1, #1
    4510:	f7fe fbda 	bl	2cc8 <_ZN14USBDeviceClass9availableEm>
    4514:	4b03      	ldr	r3, [pc, #12]	; (4524 <_ZN7Serial_9availableEv+0x1c>)
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	3301      	adds	r3, #1
    451a:	1e5a      	subs	r2, r3, #1
    451c:	4193      	sbcs	r3, r2
    451e:	1818      	adds	r0, r3, r0
}
    4520:	bd10      	pop	{r4, pc}
    4522:	46c0      	nop			; (mov r8, r8)
    4524:	2000001c 	.word	0x2000001c

00004528 <_ZN7Serial_5flushEv>:
{
    4528:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    452a:	7d41      	ldrb	r1, [r0, #21]
    452c:	6a00      	ldr	r0, [r0, #32]
    452e:	3102      	adds	r1, #2
    4530:	f7fe fbe0 	bl	2cf4 <_ZN14USBDeviceClass5flushEm>
}
    4534:	bd10      	pop	{r4, pc}

00004536 <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
    4536:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
    4538:	7d41      	ldrb	r1, [r0, #21]
    453a:	6a00      	ldr	r0, [r0, #32]
    453c:	3102      	adds	r1, #2
    453e:	f7fe fba7 	bl	2c90 <_ZN14USBDeviceClass5clearEm>
}
    4542:	bd10      	pop	{r4, pc}

00004544 <_ZN7Serial_5writeEPKhj>:
{
    4544:	b570      	push	{r4, r5, r6, lr}
    4546:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    4548:	7d41      	ldrb	r1, [r0, #21]
{
    454a:	0004      	movs	r4, r0
    454c:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    454e:	3102      	adds	r1, #2
    4550:	002a      	movs	r2, r5
    4552:	6a00      	ldr	r0, [r0, #32]
    4554:	f7fe fc96 	bl	2e84 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    4558:	2800      	cmp	r0, #0
    455a:	d101      	bne.n	4560 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
    455c:	2301      	movs	r3, #1
    455e:	6063      	str	r3, [r4, #4]
}
    4560:	bd70      	pop	{r4, r5, r6, pc}
	...

00004564 <_ZN7Serial_4peekEv>:
{
    4564:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    4566:	4c05      	ldr	r4, [pc, #20]	; (457c <_ZN7Serial_4peekEv+0x18>)
    4568:	6823      	ldr	r3, [r4, #0]
    456a:	1c5a      	adds	r2, r3, #1
    456c:	d104      	bne.n	4578 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    456e:	6803      	ldr	r3, [r0, #0]
    4570:	695b      	ldr	r3, [r3, #20]
    4572:	4798      	blx	r3
    4574:	0003      	movs	r3, r0
    4576:	6020      	str	r0, [r4, #0]
}
    4578:	0018      	movs	r0, r3
    457a:	bd10      	pop	{r4, pc}
    457c:	2000001c 	.word	0x2000001c

00004580 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    4580:	4a07      	ldr	r2, [pc, #28]	; (45a0 <_ZN7Serial_4readEv+0x20>)
{
    4582:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
    4584:	6810      	ldr	r0, [r2, #0]
{
    4586:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    4588:	1c41      	adds	r1, r0, #1
    458a:	d003      	beq.n	4594 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    458c:	2301      	movs	r3, #1
    458e:	425b      	negs	r3, r3
    4590:	6013      	str	r3, [r2, #0]
}
    4592:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    4594:	7d59      	ldrb	r1, [r3, #21]
    4596:	6a18      	ldr	r0, [r3, #32]
    4598:	3101      	adds	r1, #1
    459a:	f7fe fc23 	bl	2de4 <_ZN14USBDeviceClass4recvEm>
    459e:	e7f8      	b.n	4592 <_ZN7Serial_4readEv+0x12>
    45a0:	2000001c 	.word	0x2000001c

000045a4 <_ZN7Serial_C1ER14USBDeviceClass>:
    45a4:	23fa      	movs	r3, #250	; 0xfa
    45a6:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	0004      	movs	r4, r0
    45ac:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
    45ae:	2303      	movs	r3, #3
    45b0:	7583      	strb	r3, [r0, #22]
    45b2:	0023      	movs	r3, r4
    Print() : write_error(0) {}
    45b4:	2200      	movs	r2, #0
    45b6:	3328      	adds	r3, #40	; 0x28
    45b8:	6042      	str	r2, [r0, #4]
    45ba:	61a3      	str	r3, [r4, #24]
    45bc:	4b0c      	ldr	r3, [pc, #48]	; (45f0 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
    45be:	2002      	movs	r0, #2
    45c0:	001d      	movs	r5, r3
    45c2:	3344      	adds	r3, #68	; 0x44
    45c4:	6123      	str	r3, [r4, #16]
    45c6:	3508      	adds	r5, #8
    45c8:	1d63      	adds	r3, r4, #5
    45ca:	61e2      	str	r2, [r4, #28]
    45cc:	6025      	str	r5, [r4, #0]
    45ce:	6221      	str	r1, [r4, #32]
    45d0:	75e0      	strb	r0, [r4, #23]
    45d2:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
    45d4:	2383      	movs	r3, #131	; 0x83
    45d6:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
    45d8:	3b01      	subs	r3, #1
    45da:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
    45dc:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
    45de:	f000 f8ad 	bl	473c <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
    45e2:	0021      	movs	r1, r4
    45e4:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
    45e6:	f000 f87d 	bl	46e4 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
    45ea:	0020      	movs	r0, r4
    45ec:	bd70      	pop	{r4, r5, r6, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	00004ef0 	.word	0x00004ef0

000045f4 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
    45f4:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    45f6:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    45f8:	4a09      	ldr	r2, [pc, #36]	; (4620 <_ZN7Serial_15enableInterruptEv+0x2c>)
    45fa:	2002      	movs	r0, #2
    45fc:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    45fe:	3301      	adds	r3, #1
    4600:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4602:	b2db      	uxtb	r3, r3
    4604:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    4606:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4608:	18d3      	adds	r3, r2, r3
    460a:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    460c:	31ff      	adds	r1, #255	; 0xff
    460e:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4610:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    4612:	4320      	orrs	r0, r4
    4614:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4616:	7a99      	ldrb	r1, [r3, #10]
    4618:	430a      	orrs	r2, r1
    461a:	729a      	strb	r2, [r3, #10]
}
    461c:	bd10      	pop	{r4, pc}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	200005a4 	.word	0x200005a4

00004624 <_ZN7Serial_5beginEm>:
}
    4624:	4770      	bx	lr
	...

00004628 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
    4628:	b510      	push	{r4, lr}
    462a:	4902      	ldr	r1, [pc, #8]	; (4634 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
    462c:	4802      	ldr	r0, [pc, #8]	; (4638 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
    462e:	f7ff ffb9 	bl	45a4 <_ZN7Serial_C1ER14USBDeviceClass>
    4632:	bd10      	pop	{r4, pc}
    4634:	200000ec 	.word	0x200000ec
    4638:	20000b38 	.word	0x20000b38

0000463c <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    463c:	b570      	push	{r4, r5, r6, lr}
    463e:	000e      	movs	r6, r1
	int sent = 0;
    4640:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    4642:	6844      	ldr	r4, [r0, #4]
    4644:	2c00      	cmp	r4, #0
    4646:	d00b      	beq.n	4660 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    4648:	6823      	ldr	r3, [r4, #0]
    464a:	0031      	movs	r1, r6
    464c:	685b      	ldr	r3, [r3, #4]
    464e:	0020      	movs	r0, r4
    4650:	4798      	blx	r3
		if (res < 0)
    4652:	2800      	cmp	r0, #0
    4654:	db02      	blt.n	465c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    4656:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    4658:	68e4      	ldr	r4, [r4, #12]
    465a:	e7f3      	b.n	4644 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    465c:	2501      	movs	r5, #1
    465e:	426d      	negs	r5, r5
	}
	return sent;
}
    4660:	0028      	movs	r0, r5
    4662:	bd70      	pop	{r4, r5, r6, pc}

00004664 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    4664:	b570      	push	{r4, r5, r6, lr}
    4666:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    4668:	6844      	ldr	r4, [r0, #4]
    466a:	2c00      	cmp	r4, #0
    466c:	d008      	beq.n	4680 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    466e:	6823      	ldr	r3, [r4, #0]
    4670:	0029      	movs	r1, r5
    4672:	689b      	ldr	r3, [r3, #8]
    4674:	0020      	movs	r0, r4
    4676:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    4678:	2800      	cmp	r0, #0
    467a:	d102      	bne.n	4682 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    467c:	68e4      	ldr	r4, [r4, #12]
    467e:	e7f4      	b.n	466a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    4680:	0020      	movs	r0, r4
}
    4682:	bd70      	pop	{r4, r5, r6, pc}

00004684 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
    4684:	b570      	push	{r4, r5, r6, lr}
    4686:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
    4688:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
    468a:	6844      	ldr	r4, [r0, #4]
    468c:	2c00      	cmp	r4, #0
    468e:	d009      	beq.n	46a4 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
    4690:	6823      	ldr	r3, [r4, #0]
    4692:	0029      	movs	r1, r5
    4694:	0020      	movs	r0, r4
    4696:	691b      	ldr	r3, [r3, #16]
    4698:	4798      	blx	r3
		iSerialNum += len;
		size += len;
    469a:	1836      	adds	r6, r6, r0
		iSerialNum += len;
    469c:	182d      	adds	r5, r5, r0
		size += len;
    469e:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
    46a0:	68e4      	ldr	r4, [r4, #12]
    46a2:	e7f3      	b.n	468c <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
    46a4:	0030      	movs	r0, r6
	*iSerialNum = 0;
    46a6:	702c      	strb	r4, [r5, #0]
}
    46a8:	bd70      	pop	{r4, r5, r6, pc}

000046aa <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    46aa:	b570      	push	{r4, r5, r6, lr}
    46ac:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    46ae:	6844      	ldr	r4, [r0, #4]
    46b0:	2c00      	cmp	r4, #0
    46b2:	d008      	beq.n	46c6 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    46b4:	6823      	ldr	r3, [r4, #0]
    46b6:	0029      	movs	r1, r5
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	0020      	movs	r0, r4
    46bc:	4798      	blx	r3
    46be:	2800      	cmp	r0, #0
    46c0:	d102      	bne.n	46c8 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    46c2:	68e4      	ldr	r4, [r4, #12]
    46c4:	e7f4      	b.n	46b0 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    46c6:	0020      	movs	r0, r4
}
    46c8:	bd70      	pop	{r4, r5, r6, pc}

000046ca <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
    46ca:	b570      	push	{r4, r5, r6, lr}
    46cc:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    46ce:	6844      	ldr	r4, [r0, #4]
    46d0:	2c00      	cmp	r4, #0
    46d2:	d006      	beq.n	46e2 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
    46d4:	6823      	ldr	r3, [r4, #0]
    46d6:	0020      	movs	r0, r4
    46d8:	68db      	ldr	r3, [r3, #12]
    46da:	0029      	movs	r1, r5
    46dc:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
    46de:	68e4      	ldr	r4, [r4, #12]
    46e0:	e7f6      	b.n	46d0 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
    46e2:	bd70      	pop	{r4, r5, r6, pc}

000046e4 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
    46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    46e6:	798c      	ldrb	r4, [r1, #6]
    46e8:	7845      	ldrb	r5, [r0, #1]
{
    46ea:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    46ec:	192a      	adds	r2, r5, r4
		return false;
    46ee:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    46f0:	2a07      	cmp	r2, #7
    46f2:	dc1f      	bgt.n	4734 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
    46f4:	685a      	ldr	r2, [r3, #4]
    46f6:	4282      	cmp	r2, r0
    46f8:	d116      	bne.n	4728 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
    46fa:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
    46fc:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
    46fe:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
    4700:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
    4702:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
    4704:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
    4706:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    4708:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
    470a:	4d0b      	ldr	r5, [pc, #44]	; (4738 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    470c:	4294      	cmp	r4, r2
    470e:	dd10      	ble.n	4732 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
    4710:	688f      	ldr	r7, [r1, #8]
    4712:	7858      	ldrb	r0, [r3, #1]
    4714:	0096      	lsls	r6, r2, #2
    4716:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    4718:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
    471a:	0086      	lsls	r6, r0, #2
		lastEp++;
    471c:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
    471e:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    4720:	b2d2      	uxtb	r2, r2
		lastEp++;
    4722:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    4724:	e7f2      	b.n	470c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
    4726:	0002      	movs	r2, r0
		while (current->next) {
    4728:	68d0      	ldr	r0, [r2, #12]
    472a:	2800      	cmp	r0, #0
    472c:	d1fb      	bne.n	4726 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
    472e:	60d1      	str	r1, [r2, #12]
    4730:	e7e4      	b.n	46fc <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
    4732:	2001      	movs	r0, #1
	// restart USB layer???
}
    4734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	200000c4 	.word	0x200000c4

0000473c <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    473c:	2201      	movs	r2, #1
    473e:	4905      	ldr	r1, [pc, #20]	; (4754 <_Z12PluggableUSBv+0x18>)
    4740:	4805      	ldr	r0, [pc, #20]	; (4758 <_Z12PluggableUSBv+0x1c>)
    4742:	680b      	ldr	r3, [r1, #0]
    4744:	4013      	ands	r3, r2
    4746:	d103      	bne.n	4750 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
    4748:	7003      	strb	r3, [r0, #0]
    474a:	7042      	strb	r2, [r0, #1]
    474c:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    474e:	600a      	str	r2, [r1, #0]
}
    4750:	4770      	bx	lr
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	20000b6c 	.word	0x20000b6c
    4758:	20000b70 	.word	0x20000b70

0000475c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    475c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    475e:	0006      	movs	r6, r0
    4760:	000d      	movs	r5, r1
    4762:	000c      	movs	r4, r1
    4764:	188b      	adds	r3, r1, r2
    4766:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    4768:	9b01      	ldr	r3, [sp, #4]
    476a:	1b67      	subs	r7, r4, r5
    476c:	429c      	cmp	r4, r3
    476e:	d007      	beq.n	4780 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    4770:	6833      	ldr	r3, [r6, #0]
    4772:	7821      	ldrb	r1, [r4, #0]
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	0030      	movs	r0, r6
    4778:	4798      	blx	r3
    477a:	3401      	adds	r4, #1
    477c:	2800      	cmp	r0, #0
    477e:	d1f3      	bne.n	4768 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    4780:	0038      	movs	r0, r7
    4782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004784 <__gnu_thumb1_case_uqi>:
    4784:	b402      	push	{r1}
    4786:	4671      	mov	r1, lr
    4788:	0849      	lsrs	r1, r1, #1
    478a:	0049      	lsls	r1, r1, #1
    478c:	5c09      	ldrb	r1, [r1, r0]
    478e:	0049      	lsls	r1, r1, #1
    4790:	448e      	add	lr, r1
    4792:	bc02      	pop	{r1}
    4794:	4770      	bx	lr
    4796:	46c0      	nop			; (mov r8, r8)

00004798 <__udivsi3>:
    4798:	2200      	movs	r2, #0
    479a:	0843      	lsrs	r3, r0, #1
    479c:	428b      	cmp	r3, r1
    479e:	d374      	bcc.n	488a <__udivsi3+0xf2>
    47a0:	0903      	lsrs	r3, r0, #4
    47a2:	428b      	cmp	r3, r1
    47a4:	d35f      	bcc.n	4866 <__udivsi3+0xce>
    47a6:	0a03      	lsrs	r3, r0, #8
    47a8:	428b      	cmp	r3, r1
    47aa:	d344      	bcc.n	4836 <__udivsi3+0x9e>
    47ac:	0b03      	lsrs	r3, r0, #12
    47ae:	428b      	cmp	r3, r1
    47b0:	d328      	bcc.n	4804 <__udivsi3+0x6c>
    47b2:	0c03      	lsrs	r3, r0, #16
    47b4:	428b      	cmp	r3, r1
    47b6:	d30d      	bcc.n	47d4 <__udivsi3+0x3c>
    47b8:	22ff      	movs	r2, #255	; 0xff
    47ba:	0209      	lsls	r1, r1, #8
    47bc:	ba12      	rev	r2, r2
    47be:	0c03      	lsrs	r3, r0, #16
    47c0:	428b      	cmp	r3, r1
    47c2:	d302      	bcc.n	47ca <__udivsi3+0x32>
    47c4:	1212      	asrs	r2, r2, #8
    47c6:	0209      	lsls	r1, r1, #8
    47c8:	d065      	beq.n	4896 <__udivsi3+0xfe>
    47ca:	0b03      	lsrs	r3, r0, #12
    47cc:	428b      	cmp	r3, r1
    47ce:	d319      	bcc.n	4804 <__udivsi3+0x6c>
    47d0:	e000      	b.n	47d4 <__udivsi3+0x3c>
    47d2:	0a09      	lsrs	r1, r1, #8
    47d4:	0bc3      	lsrs	r3, r0, #15
    47d6:	428b      	cmp	r3, r1
    47d8:	d301      	bcc.n	47de <__udivsi3+0x46>
    47da:	03cb      	lsls	r3, r1, #15
    47dc:	1ac0      	subs	r0, r0, r3
    47de:	4152      	adcs	r2, r2
    47e0:	0b83      	lsrs	r3, r0, #14
    47e2:	428b      	cmp	r3, r1
    47e4:	d301      	bcc.n	47ea <__udivsi3+0x52>
    47e6:	038b      	lsls	r3, r1, #14
    47e8:	1ac0      	subs	r0, r0, r3
    47ea:	4152      	adcs	r2, r2
    47ec:	0b43      	lsrs	r3, r0, #13
    47ee:	428b      	cmp	r3, r1
    47f0:	d301      	bcc.n	47f6 <__udivsi3+0x5e>
    47f2:	034b      	lsls	r3, r1, #13
    47f4:	1ac0      	subs	r0, r0, r3
    47f6:	4152      	adcs	r2, r2
    47f8:	0b03      	lsrs	r3, r0, #12
    47fa:	428b      	cmp	r3, r1
    47fc:	d301      	bcc.n	4802 <__udivsi3+0x6a>
    47fe:	030b      	lsls	r3, r1, #12
    4800:	1ac0      	subs	r0, r0, r3
    4802:	4152      	adcs	r2, r2
    4804:	0ac3      	lsrs	r3, r0, #11
    4806:	428b      	cmp	r3, r1
    4808:	d301      	bcc.n	480e <__udivsi3+0x76>
    480a:	02cb      	lsls	r3, r1, #11
    480c:	1ac0      	subs	r0, r0, r3
    480e:	4152      	adcs	r2, r2
    4810:	0a83      	lsrs	r3, r0, #10
    4812:	428b      	cmp	r3, r1
    4814:	d301      	bcc.n	481a <__udivsi3+0x82>
    4816:	028b      	lsls	r3, r1, #10
    4818:	1ac0      	subs	r0, r0, r3
    481a:	4152      	adcs	r2, r2
    481c:	0a43      	lsrs	r3, r0, #9
    481e:	428b      	cmp	r3, r1
    4820:	d301      	bcc.n	4826 <__udivsi3+0x8e>
    4822:	024b      	lsls	r3, r1, #9
    4824:	1ac0      	subs	r0, r0, r3
    4826:	4152      	adcs	r2, r2
    4828:	0a03      	lsrs	r3, r0, #8
    482a:	428b      	cmp	r3, r1
    482c:	d301      	bcc.n	4832 <__udivsi3+0x9a>
    482e:	020b      	lsls	r3, r1, #8
    4830:	1ac0      	subs	r0, r0, r3
    4832:	4152      	adcs	r2, r2
    4834:	d2cd      	bcs.n	47d2 <__udivsi3+0x3a>
    4836:	09c3      	lsrs	r3, r0, #7
    4838:	428b      	cmp	r3, r1
    483a:	d301      	bcc.n	4840 <__udivsi3+0xa8>
    483c:	01cb      	lsls	r3, r1, #7
    483e:	1ac0      	subs	r0, r0, r3
    4840:	4152      	adcs	r2, r2
    4842:	0983      	lsrs	r3, r0, #6
    4844:	428b      	cmp	r3, r1
    4846:	d301      	bcc.n	484c <__udivsi3+0xb4>
    4848:	018b      	lsls	r3, r1, #6
    484a:	1ac0      	subs	r0, r0, r3
    484c:	4152      	adcs	r2, r2
    484e:	0943      	lsrs	r3, r0, #5
    4850:	428b      	cmp	r3, r1
    4852:	d301      	bcc.n	4858 <__udivsi3+0xc0>
    4854:	014b      	lsls	r3, r1, #5
    4856:	1ac0      	subs	r0, r0, r3
    4858:	4152      	adcs	r2, r2
    485a:	0903      	lsrs	r3, r0, #4
    485c:	428b      	cmp	r3, r1
    485e:	d301      	bcc.n	4864 <__udivsi3+0xcc>
    4860:	010b      	lsls	r3, r1, #4
    4862:	1ac0      	subs	r0, r0, r3
    4864:	4152      	adcs	r2, r2
    4866:	08c3      	lsrs	r3, r0, #3
    4868:	428b      	cmp	r3, r1
    486a:	d301      	bcc.n	4870 <__udivsi3+0xd8>
    486c:	00cb      	lsls	r3, r1, #3
    486e:	1ac0      	subs	r0, r0, r3
    4870:	4152      	adcs	r2, r2
    4872:	0883      	lsrs	r3, r0, #2
    4874:	428b      	cmp	r3, r1
    4876:	d301      	bcc.n	487c <__udivsi3+0xe4>
    4878:	008b      	lsls	r3, r1, #2
    487a:	1ac0      	subs	r0, r0, r3
    487c:	4152      	adcs	r2, r2
    487e:	0843      	lsrs	r3, r0, #1
    4880:	428b      	cmp	r3, r1
    4882:	d301      	bcc.n	4888 <__udivsi3+0xf0>
    4884:	004b      	lsls	r3, r1, #1
    4886:	1ac0      	subs	r0, r0, r3
    4888:	4152      	adcs	r2, r2
    488a:	1a41      	subs	r1, r0, r1
    488c:	d200      	bcs.n	4890 <__udivsi3+0xf8>
    488e:	4601      	mov	r1, r0
    4890:	4152      	adcs	r2, r2
    4892:	4610      	mov	r0, r2
    4894:	4770      	bx	lr
    4896:	e7ff      	b.n	4898 <__udivsi3+0x100>
    4898:	b501      	push	{r0, lr}
    489a:	2000      	movs	r0, #0
    489c:	f000 f806 	bl	48ac <__aeabi_idiv0>
    48a0:	bd02      	pop	{r1, pc}
    48a2:	46c0      	nop			; (mov r8, r8)

000048a4 <__aeabi_uidivmod>:
    48a4:	2900      	cmp	r1, #0
    48a6:	d0f7      	beq.n	4898 <__udivsi3+0x100>
    48a8:	e776      	b.n	4798 <__udivsi3>
    48aa:	4770      	bx	lr

000048ac <__aeabi_idiv0>:
    48ac:	4770      	bx	lr
    48ae:	46c0      	nop			; (mov r8, r8)

000048b0 <__libc_init_array>:
    48b0:	b570      	push	{r4, r5, r6, lr}
    48b2:	2600      	movs	r6, #0
    48b4:	4d0c      	ldr	r5, [pc, #48]	; (48e8 <__libc_init_array+0x38>)
    48b6:	4c0d      	ldr	r4, [pc, #52]	; (48ec <__libc_init_array+0x3c>)
    48b8:	1b64      	subs	r4, r4, r5
    48ba:	10a4      	asrs	r4, r4, #2
    48bc:	42a6      	cmp	r6, r4
    48be:	d109      	bne.n	48d4 <__libc_init_array+0x24>
    48c0:	2600      	movs	r6, #0
    48c2:	f000 f911 	bl	4ae8 <_init>
    48c6:	4d0a      	ldr	r5, [pc, #40]	; (48f0 <__libc_init_array+0x40>)
    48c8:	4c0a      	ldr	r4, [pc, #40]	; (48f4 <__libc_init_array+0x44>)
    48ca:	1b64      	subs	r4, r4, r5
    48cc:	10a4      	asrs	r4, r4, #2
    48ce:	42a6      	cmp	r6, r4
    48d0:	d105      	bne.n	48de <__libc_init_array+0x2e>
    48d2:	bd70      	pop	{r4, r5, r6, pc}
    48d4:	00b3      	lsls	r3, r6, #2
    48d6:	58eb      	ldr	r3, [r5, r3]
    48d8:	4798      	blx	r3
    48da:	3601      	adds	r6, #1
    48dc:	e7ee      	b.n	48bc <__libc_init_array+0xc>
    48de:	00b3      	lsls	r3, r6, #2
    48e0:	58eb      	ldr	r3, [r5, r3]
    48e2:	4798      	blx	r3
    48e4:	3601      	adds	r6, #1
    48e6:	e7f2      	b.n	48ce <__libc_init_array+0x1e>
    48e8:	20000084 	.word	0x20000084
    48ec:	20000084 	.word	0x20000084
    48f0:	20000084 	.word	0x20000084
    48f4:	20000094 	.word	0x20000094

000048f8 <malloc>:
    48f8:	b510      	push	{r4, lr}
    48fa:	4b03      	ldr	r3, [pc, #12]	; (4908 <malloc+0x10>)
    48fc:	0001      	movs	r1, r0
    48fe:	6818      	ldr	r0, [r3, #0]
    4900:	f000 f86a 	bl	49d8 <_malloc_r>
    4904:	bd10      	pop	{r4, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	20000020 	.word	0x20000020

0000490c <free>:
    490c:	b510      	push	{r4, lr}
    490e:	4b03      	ldr	r3, [pc, #12]	; (491c <free+0x10>)
    4910:	0001      	movs	r1, r0
    4912:	6818      	ldr	r0, [r3, #0]
    4914:	f000 f816 	bl	4944 <_free_r>
    4918:	bd10      	pop	{r4, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	20000020 	.word	0x20000020

00004920 <memcpy>:
    4920:	2300      	movs	r3, #0
    4922:	b510      	push	{r4, lr}
    4924:	429a      	cmp	r2, r3
    4926:	d100      	bne.n	492a <memcpy+0xa>
    4928:	bd10      	pop	{r4, pc}
    492a:	5ccc      	ldrb	r4, [r1, r3]
    492c:	54c4      	strb	r4, [r0, r3]
    492e:	3301      	adds	r3, #1
    4930:	e7f8      	b.n	4924 <memcpy+0x4>

00004932 <memset>:
    4932:	0003      	movs	r3, r0
    4934:	1882      	adds	r2, r0, r2
    4936:	4293      	cmp	r3, r2
    4938:	d100      	bne.n	493c <memset+0xa>
    493a:	4770      	bx	lr
    493c:	7019      	strb	r1, [r3, #0]
    493e:	3301      	adds	r3, #1
    4940:	e7f9      	b.n	4936 <memset+0x4>
	...

00004944 <_free_r>:
    4944:	b570      	push	{r4, r5, r6, lr}
    4946:	0005      	movs	r5, r0
    4948:	2900      	cmp	r1, #0
    494a:	d010      	beq.n	496e <_free_r+0x2a>
    494c:	1f0c      	subs	r4, r1, #4
    494e:	6823      	ldr	r3, [r4, #0]
    4950:	2b00      	cmp	r3, #0
    4952:	da00      	bge.n	4956 <_free_r+0x12>
    4954:	18e4      	adds	r4, r4, r3
    4956:	0028      	movs	r0, r5
    4958:	f000 f8b5 	bl	4ac6 <__malloc_lock>
    495c:	4a1d      	ldr	r2, [pc, #116]	; (49d4 <_free_r+0x90>)
    495e:	6813      	ldr	r3, [r2, #0]
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_free_r+0x2c>
    4964:	6063      	str	r3, [r4, #4]
    4966:	6014      	str	r4, [r2, #0]
    4968:	0028      	movs	r0, r5
    496a:	f000 f8ad 	bl	4ac8 <__malloc_unlock>
    496e:	bd70      	pop	{r4, r5, r6, pc}
    4970:	42a3      	cmp	r3, r4
    4972:	d909      	bls.n	4988 <_free_r+0x44>
    4974:	6821      	ldr	r1, [r4, #0]
    4976:	1860      	adds	r0, r4, r1
    4978:	4283      	cmp	r3, r0
    497a:	d1f3      	bne.n	4964 <_free_r+0x20>
    497c:	6818      	ldr	r0, [r3, #0]
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	1841      	adds	r1, r0, r1
    4982:	6021      	str	r1, [r4, #0]
    4984:	e7ee      	b.n	4964 <_free_r+0x20>
    4986:	0013      	movs	r3, r2
    4988:	685a      	ldr	r2, [r3, #4]
    498a:	2a00      	cmp	r2, #0
    498c:	d001      	beq.n	4992 <_free_r+0x4e>
    498e:	42a2      	cmp	r2, r4
    4990:	d9f9      	bls.n	4986 <_free_r+0x42>
    4992:	6819      	ldr	r1, [r3, #0]
    4994:	1858      	adds	r0, r3, r1
    4996:	42a0      	cmp	r0, r4
    4998:	d10b      	bne.n	49b2 <_free_r+0x6e>
    499a:	6820      	ldr	r0, [r4, #0]
    499c:	1809      	adds	r1, r1, r0
    499e:	1858      	adds	r0, r3, r1
    49a0:	6019      	str	r1, [r3, #0]
    49a2:	4282      	cmp	r2, r0
    49a4:	d1e0      	bne.n	4968 <_free_r+0x24>
    49a6:	6810      	ldr	r0, [r2, #0]
    49a8:	6852      	ldr	r2, [r2, #4]
    49aa:	1841      	adds	r1, r0, r1
    49ac:	6019      	str	r1, [r3, #0]
    49ae:	605a      	str	r2, [r3, #4]
    49b0:	e7da      	b.n	4968 <_free_r+0x24>
    49b2:	42a0      	cmp	r0, r4
    49b4:	d902      	bls.n	49bc <_free_r+0x78>
    49b6:	230c      	movs	r3, #12
    49b8:	602b      	str	r3, [r5, #0]
    49ba:	e7d5      	b.n	4968 <_free_r+0x24>
    49bc:	6821      	ldr	r1, [r4, #0]
    49be:	1860      	adds	r0, r4, r1
    49c0:	4282      	cmp	r2, r0
    49c2:	d103      	bne.n	49cc <_free_r+0x88>
    49c4:	6810      	ldr	r0, [r2, #0]
    49c6:	6852      	ldr	r2, [r2, #4]
    49c8:	1841      	adds	r1, r0, r1
    49ca:	6021      	str	r1, [r4, #0]
    49cc:	6062      	str	r2, [r4, #4]
    49ce:	605c      	str	r4, [r3, #4]
    49d0:	e7ca      	b.n	4968 <_free_r+0x24>
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	20000b78 	.word	0x20000b78

000049d8 <_malloc_r>:
    49d8:	2303      	movs	r3, #3
    49da:	b570      	push	{r4, r5, r6, lr}
    49dc:	1ccd      	adds	r5, r1, #3
    49de:	439d      	bics	r5, r3
    49e0:	3508      	adds	r5, #8
    49e2:	0006      	movs	r6, r0
    49e4:	2d0c      	cmp	r5, #12
    49e6:	d21e      	bcs.n	4a26 <_malloc_r+0x4e>
    49e8:	250c      	movs	r5, #12
    49ea:	42a9      	cmp	r1, r5
    49ec:	d81d      	bhi.n	4a2a <_malloc_r+0x52>
    49ee:	0030      	movs	r0, r6
    49f0:	f000 f869 	bl	4ac6 <__malloc_lock>
    49f4:	4a25      	ldr	r2, [pc, #148]	; (4a8c <_malloc_r+0xb4>)
    49f6:	6814      	ldr	r4, [r2, #0]
    49f8:	0021      	movs	r1, r4
    49fa:	2900      	cmp	r1, #0
    49fc:	d119      	bne.n	4a32 <_malloc_r+0x5a>
    49fe:	4c24      	ldr	r4, [pc, #144]	; (4a90 <_malloc_r+0xb8>)
    4a00:	6823      	ldr	r3, [r4, #0]
    4a02:	2b00      	cmp	r3, #0
    4a04:	d103      	bne.n	4a0e <_malloc_r+0x36>
    4a06:	0030      	movs	r0, r6
    4a08:	f000 f844 	bl	4a94 <_sbrk_r>
    4a0c:	6020      	str	r0, [r4, #0]
    4a0e:	0029      	movs	r1, r5
    4a10:	0030      	movs	r0, r6
    4a12:	f000 f83f 	bl	4a94 <_sbrk_r>
    4a16:	1c43      	adds	r3, r0, #1
    4a18:	d12c      	bne.n	4a74 <_malloc_r+0x9c>
    4a1a:	230c      	movs	r3, #12
    4a1c:	0030      	movs	r0, r6
    4a1e:	6033      	str	r3, [r6, #0]
    4a20:	f000 f852 	bl	4ac8 <__malloc_unlock>
    4a24:	e003      	b.n	4a2e <_malloc_r+0x56>
    4a26:	2d00      	cmp	r5, #0
    4a28:	dadf      	bge.n	49ea <_malloc_r+0x12>
    4a2a:	230c      	movs	r3, #12
    4a2c:	6033      	str	r3, [r6, #0]
    4a2e:	2000      	movs	r0, #0
    4a30:	bd70      	pop	{r4, r5, r6, pc}
    4a32:	680b      	ldr	r3, [r1, #0]
    4a34:	1b5b      	subs	r3, r3, r5
    4a36:	d41a      	bmi.n	4a6e <_malloc_r+0x96>
    4a38:	2b0b      	cmp	r3, #11
    4a3a:	d903      	bls.n	4a44 <_malloc_r+0x6c>
    4a3c:	600b      	str	r3, [r1, #0]
    4a3e:	18cc      	adds	r4, r1, r3
    4a40:	6025      	str	r5, [r4, #0]
    4a42:	e003      	b.n	4a4c <_malloc_r+0x74>
    4a44:	428c      	cmp	r4, r1
    4a46:	d10e      	bne.n	4a66 <_malloc_r+0x8e>
    4a48:	6863      	ldr	r3, [r4, #4]
    4a4a:	6013      	str	r3, [r2, #0]
    4a4c:	0030      	movs	r0, r6
    4a4e:	f000 f83b 	bl	4ac8 <__malloc_unlock>
    4a52:	0020      	movs	r0, r4
    4a54:	2207      	movs	r2, #7
    4a56:	300b      	adds	r0, #11
    4a58:	1d23      	adds	r3, r4, #4
    4a5a:	4390      	bics	r0, r2
    4a5c:	1ac3      	subs	r3, r0, r3
    4a5e:	d0e7      	beq.n	4a30 <_malloc_r+0x58>
    4a60:	425a      	negs	r2, r3
    4a62:	50e2      	str	r2, [r4, r3]
    4a64:	e7e4      	b.n	4a30 <_malloc_r+0x58>
    4a66:	684b      	ldr	r3, [r1, #4]
    4a68:	6063      	str	r3, [r4, #4]
    4a6a:	000c      	movs	r4, r1
    4a6c:	e7ee      	b.n	4a4c <_malloc_r+0x74>
    4a6e:	000c      	movs	r4, r1
    4a70:	6849      	ldr	r1, [r1, #4]
    4a72:	e7c2      	b.n	49fa <_malloc_r+0x22>
    4a74:	2303      	movs	r3, #3
    4a76:	1cc4      	adds	r4, r0, #3
    4a78:	439c      	bics	r4, r3
    4a7a:	42a0      	cmp	r0, r4
    4a7c:	d0e0      	beq.n	4a40 <_malloc_r+0x68>
    4a7e:	1a21      	subs	r1, r4, r0
    4a80:	0030      	movs	r0, r6
    4a82:	f000 f807 	bl	4a94 <_sbrk_r>
    4a86:	1c43      	adds	r3, r0, #1
    4a88:	d1da      	bne.n	4a40 <_malloc_r+0x68>
    4a8a:	e7c6      	b.n	4a1a <_malloc_r+0x42>
    4a8c:	20000b78 	.word	0x20000b78
    4a90:	20000b7c 	.word	0x20000b7c

00004a94 <_sbrk_r>:
    4a94:	2300      	movs	r3, #0
    4a96:	b570      	push	{r4, r5, r6, lr}
    4a98:	4c06      	ldr	r4, [pc, #24]	; (4ab4 <_sbrk_r+0x20>)
    4a9a:	0005      	movs	r5, r0
    4a9c:	0008      	movs	r0, r1
    4a9e:	6023      	str	r3, [r4, #0]
    4aa0:	f000 f814 	bl	4acc <_sbrk>
    4aa4:	1c43      	adds	r3, r0, #1
    4aa6:	d103      	bne.n	4ab0 <_sbrk_r+0x1c>
    4aa8:	6823      	ldr	r3, [r4, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d000      	beq.n	4ab0 <_sbrk_r+0x1c>
    4aae:	602b      	str	r3, [r5, #0]
    4ab0:	bd70      	pop	{r4, r5, r6, pc}
    4ab2:	46c0      	nop			; (mov r8, r8)
    4ab4:	20000b84 	.word	0x20000b84

00004ab8 <strlen>:
    4ab8:	2300      	movs	r3, #0
    4aba:	5cc2      	ldrb	r2, [r0, r3]
    4abc:	3301      	adds	r3, #1
    4abe:	2a00      	cmp	r2, #0
    4ac0:	d1fb      	bne.n	4aba <strlen+0x2>
    4ac2:	1e58      	subs	r0, r3, #1
    4ac4:	4770      	bx	lr

00004ac6 <__malloc_lock>:
    4ac6:	4770      	bx	lr

00004ac8 <__malloc_unlock>:
    4ac8:	4770      	bx	lr
	...

00004acc <_sbrk>:
    4acc:	4a04      	ldr	r2, [pc, #16]	; (4ae0 <_sbrk+0x14>)
    4ace:	6813      	ldr	r3, [r2, #0]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d003      	beq.n	4adc <_sbrk+0x10>
    4ad4:	1818      	adds	r0, r3, r0
    4ad6:	6010      	str	r0, [r2, #0]
    4ad8:	0018      	movs	r0, r3
    4ada:	4770      	bx	lr
    4adc:	4b01      	ldr	r3, [pc, #4]	; (4ae4 <_sbrk+0x18>)
    4ade:	e7f9      	b.n	4ad4 <_sbrk+0x8>
    4ae0:	20000b80 	.word	0x20000b80
    4ae4:	20000b88 	.word	0x20000b88

00004ae8 <_init>:
    4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4aee:	bc08      	pop	{r3}
    4af0:	469e      	mov	lr, r3
    4af2:	4770      	bx	lr

00004af4 <_fini>:
    4af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4afa:	bc08      	pop	{r3}
    4afc:	469e      	mov	lr, r3
    4afe:	4770      	bx	lr

00004b00 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    4b08:	2651 0000 2907 0000 28ef 0000 28cd 0000     Q&...)...(...(..
    4b18:	24b5 0000 24b7 0000 25a5 0000               .$...$...%..

00004b24 <_ZL14STRING_PRODUCT>:
    4b24:	7241 7564 6e69 206f 4b4d 2052 6957 6946     Arduino MKR WiFi
    4b34:	3120 3130 0030                               1010.

00004b3a <_ZL15STRING_LANGUAGE>:
    4b3a:	0304 0409                                   ....

00004b3e <_ZL19STRING_MANUFACTURER>:
    4b3e:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

00004b4a <_ZL21USB_DeviceDescriptorB>:
    4b4a:	0112 0200 02ef 4001 2341 8054 0100 0201     .......@A#T.....
    4b5a:	0103                                        ..

00004b5c <g_APinDescription>:
    4b5c:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    4b6c:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    4b7c:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    4b8c:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    4b9c:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    4bac:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    4bbc:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    4bcc:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    4bdc:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    4bec:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    4bfc:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    4c0c:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    4c1c:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    4c2c:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    4c3c:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    4c4c:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    4c5c:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    4c6c:	0003 0000 0004 0000 0010 ffff ffff 0010     ................
    4c7c:	0000 0000 0009 0000 0003 0000 0004 0000     ................
    4c8c:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    4c9c:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    4cac:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    4cbc:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    4ccc:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    4cdc:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    4cec:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    4cfc:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    4d0c:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    4d1c:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    4d2c:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    4d3c:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    4d4c:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    4d5c:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    4d6c:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    4d7c:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    4d8c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    4d9c:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    4dac:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    4dbc:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................
    4dcc:	0000 0000 000c 0000 0003 0000 0000 0000     ................
    4ddc:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    4dec:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    4dfc:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    4e0c:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    4e1c:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    4e2c:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    4e3c:	00ff ffff ffff 000f 0001 0000 0008 0000     ................
    4e4c:	0008 0000 0006 0000 0002 ffff ffff 00ff     ................
    4e5c:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    4e6c:	0003 0401 0401 0009 0000 0000 0000 0000     ................
    4e7c:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    4e8c:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    4e9c:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    4eac:	0008 0000 0004 0000 00ff ffff ffff 00ff     ................

00004ebc <_ZTV4Uart>:
	...
    4ec4:	4161 0000 475d 0000 4087 0000 4043 0000     aA..]G...@..C@..
    4ed4:	405d 0000 4215 0000 3d9d 0000 3d8d 0000     ]@...B...=...=..
    4ee4:	3e21 0000 3db7 0000 3d89 0000               !>...=...=..

00004ef0 <_ZTV7Serial_>:
	...
    4ef8:	4305 0000 4545 0000 4301 0000 4529 0000     .C..EE...C..)E..
    4f08:	4509 0000 4581 0000 4565 0000 4537 0000     .E...E..eE..7E..
    4f18:	4319 0000 4261 0000 4451 0000 4299 0000     .C..aB..QD...B..
    4f28:	42ed 0000 fff0 ffff 0000 0000 44f9 0000     .B...........D..
    4f38:	4441 0000 4265 0000 42f1 0000 42dd 0000     AD..eB...B...B..

00004f48 <__EH_FRAME_BEGIN__>:
    4f48:	0000 0000                                   ....
